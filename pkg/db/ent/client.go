// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/migrate"

	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/coin"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fraction"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionrule"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/gooduser"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/orderuser"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Coin is the client for interacting with the Coin builders.
	Coin *CoinClient
	// Fraction is the client for interacting with the Fraction builders.
	Fraction *FractionClient
	// FractionRule is the client for interacting with the FractionRule builders.
	FractionRule *FractionRuleClient
	// GoodUser is the client for interacting with the GoodUser builders.
	GoodUser *GoodUserClient
	// OrderUser is the client for interacting with the OrderUser builders.
	OrderUser *OrderUserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Coin = NewCoinClient(c.config)
	c.Fraction = NewFractionClient(c.config)
	c.FractionRule = NewFractionRuleClient(c.config)
	c.GoodUser = NewGoodUserClient(c.config)
	c.OrderUser = NewOrderUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Coin:         NewCoinClient(cfg),
		Fraction:     NewFractionClient(cfg),
		FractionRule: NewFractionRuleClient(cfg),
		GoodUser:     NewGoodUserClient(cfg),
		OrderUser:    NewOrderUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Coin:         NewCoinClient(cfg),
		Fraction:     NewFractionClient(cfg),
		FractionRule: NewFractionRuleClient(cfg),
		GoodUser:     NewGoodUserClient(cfg),
		OrderUser:    NewOrderUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Coin.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Coin.Use(hooks...)
	c.Fraction.Use(hooks...)
	c.FractionRule.Use(hooks...)
	c.GoodUser.Use(hooks...)
	c.OrderUser.Use(hooks...)
}

// CoinClient is a client for the Coin schema.
type CoinClient struct {
	config
}

// NewCoinClient returns a client for the Coin from the given config.
func NewCoinClient(c config) *CoinClient {
	return &CoinClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `coin.Hooks(f(g(h())))`.
func (c *CoinClient) Use(hooks ...Hook) {
	c.hooks.Coin = append(c.hooks.Coin, hooks...)
}

// Create returns a builder for creating a Coin entity.
func (c *CoinClient) Create() *CoinCreate {
	mutation := newCoinMutation(c.config, OpCreate)
	return &CoinCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Coin entities.
func (c *CoinClient) CreateBulk(builders ...*CoinCreate) *CoinCreateBulk {
	return &CoinCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Coin.
func (c *CoinClient) Update() *CoinUpdate {
	mutation := newCoinMutation(c.config, OpUpdate)
	return &CoinUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CoinClient) UpdateOne(co *Coin) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoin(co))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CoinClient) UpdateOneID(id uint32) *CoinUpdateOne {
	mutation := newCoinMutation(c.config, OpUpdateOne, withCoinID(id))
	return &CoinUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Coin.
func (c *CoinClient) Delete() *CoinDelete {
	mutation := newCoinMutation(c.config, OpDelete)
	return &CoinDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CoinClient) DeleteOne(co *Coin) *CoinDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *CoinClient) DeleteOneID(id uint32) *CoinDeleteOne {
	builder := c.Delete().Where(coin.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CoinDeleteOne{builder}
}

// Query returns a query builder for Coin.
func (c *CoinClient) Query() *CoinQuery {
	return &CoinQuery{
		config: c.config,
	}
}

// Get returns a Coin entity by its id.
func (c *CoinClient) Get(ctx context.Context, id uint32) (*Coin, error) {
	return c.Query().Where(coin.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CoinClient) GetX(ctx context.Context, id uint32) *Coin {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CoinClient) Hooks() []Hook {
	hooks := c.hooks.Coin
	return append(hooks[:len(hooks):len(hooks)], coin.Hooks[:]...)
}

// FractionClient is a client for the Fraction schema.
type FractionClient struct {
	config
}

// NewFractionClient returns a client for the Fraction from the given config.
func NewFractionClient(c config) *FractionClient {
	return &FractionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fraction.Hooks(f(g(h())))`.
func (c *FractionClient) Use(hooks ...Hook) {
	c.hooks.Fraction = append(c.hooks.Fraction, hooks...)
}

// Create returns a builder for creating a Fraction entity.
func (c *FractionClient) Create() *FractionCreate {
	mutation := newFractionMutation(c.config, OpCreate)
	return &FractionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Fraction entities.
func (c *FractionClient) CreateBulk(builders ...*FractionCreate) *FractionCreateBulk {
	return &FractionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Fraction.
func (c *FractionClient) Update() *FractionUpdate {
	mutation := newFractionMutation(c.config, OpUpdate)
	return &FractionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FractionClient) UpdateOne(f *Fraction) *FractionUpdateOne {
	mutation := newFractionMutation(c.config, OpUpdateOne, withFraction(f))
	return &FractionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FractionClient) UpdateOneID(id uint32) *FractionUpdateOne {
	mutation := newFractionMutation(c.config, OpUpdateOne, withFractionID(id))
	return &FractionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Fraction.
func (c *FractionClient) Delete() *FractionDelete {
	mutation := newFractionMutation(c.config, OpDelete)
	return &FractionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FractionClient) DeleteOne(f *Fraction) *FractionDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FractionClient) DeleteOneID(id uint32) *FractionDeleteOne {
	builder := c.Delete().Where(fraction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FractionDeleteOne{builder}
}

// Query returns a query builder for Fraction.
func (c *FractionClient) Query() *FractionQuery {
	return &FractionQuery{
		config: c.config,
	}
}

// Get returns a Fraction entity by its id.
func (c *FractionClient) Get(ctx context.Context, id uint32) (*Fraction, error) {
	return c.Query().Where(fraction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FractionClient) GetX(ctx context.Context, id uint32) *Fraction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FractionClient) Hooks() []Hook {
	hooks := c.hooks.Fraction
	return append(hooks[:len(hooks):len(hooks)], fraction.Hooks[:]...)
}

// FractionRuleClient is a client for the FractionRule schema.
type FractionRuleClient struct {
	config
}

// NewFractionRuleClient returns a client for the FractionRule from the given config.
func NewFractionRuleClient(c config) *FractionRuleClient {
	return &FractionRuleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fractionrule.Hooks(f(g(h())))`.
func (c *FractionRuleClient) Use(hooks ...Hook) {
	c.hooks.FractionRule = append(c.hooks.FractionRule, hooks...)
}

// Create returns a builder for creating a FractionRule entity.
func (c *FractionRuleClient) Create() *FractionRuleCreate {
	mutation := newFractionRuleMutation(c.config, OpCreate)
	return &FractionRuleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FractionRule entities.
func (c *FractionRuleClient) CreateBulk(builders ...*FractionRuleCreate) *FractionRuleCreateBulk {
	return &FractionRuleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FractionRule.
func (c *FractionRuleClient) Update() *FractionRuleUpdate {
	mutation := newFractionRuleMutation(c.config, OpUpdate)
	return &FractionRuleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FractionRuleClient) UpdateOne(fr *FractionRule) *FractionRuleUpdateOne {
	mutation := newFractionRuleMutation(c.config, OpUpdateOne, withFractionRule(fr))
	return &FractionRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FractionRuleClient) UpdateOneID(id uint32) *FractionRuleUpdateOne {
	mutation := newFractionRuleMutation(c.config, OpUpdateOne, withFractionRuleID(id))
	return &FractionRuleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FractionRule.
func (c *FractionRuleClient) Delete() *FractionRuleDelete {
	mutation := newFractionRuleMutation(c.config, OpDelete)
	return &FractionRuleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FractionRuleClient) DeleteOne(fr *FractionRule) *FractionRuleDeleteOne {
	return c.DeleteOneID(fr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *FractionRuleClient) DeleteOneID(id uint32) *FractionRuleDeleteOne {
	builder := c.Delete().Where(fractionrule.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FractionRuleDeleteOne{builder}
}

// Query returns a query builder for FractionRule.
func (c *FractionRuleClient) Query() *FractionRuleQuery {
	return &FractionRuleQuery{
		config: c.config,
	}
}

// Get returns a FractionRule entity by its id.
func (c *FractionRuleClient) Get(ctx context.Context, id uint32) (*FractionRule, error) {
	return c.Query().Where(fractionrule.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FractionRuleClient) GetX(ctx context.Context, id uint32) *FractionRule {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FractionRuleClient) Hooks() []Hook {
	hooks := c.hooks.FractionRule
	return append(hooks[:len(hooks):len(hooks)], fractionrule.Hooks[:]...)
}

// GoodUserClient is a client for the GoodUser schema.
type GoodUserClient struct {
	config
}

// NewGoodUserClient returns a client for the GoodUser from the given config.
func NewGoodUserClient(c config) *GoodUserClient {
	return &GoodUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gooduser.Hooks(f(g(h())))`.
func (c *GoodUserClient) Use(hooks ...Hook) {
	c.hooks.GoodUser = append(c.hooks.GoodUser, hooks...)
}

// Create returns a builder for creating a GoodUser entity.
func (c *GoodUserClient) Create() *GoodUserCreate {
	mutation := newGoodUserMutation(c.config, OpCreate)
	return &GoodUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GoodUser entities.
func (c *GoodUserClient) CreateBulk(builders ...*GoodUserCreate) *GoodUserCreateBulk {
	return &GoodUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GoodUser.
func (c *GoodUserClient) Update() *GoodUserUpdate {
	mutation := newGoodUserMutation(c.config, OpUpdate)
	return &GoodUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GoodUserClient) UpdateOne(gu *GoodUser) *GoodUserUpdateOne {
	mutation := newGoodUserMutation(c.config, OpUpdateOne, withGoodUser(gu))
	return &GoodUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GoodUserClient) UpdateOneID(id uint32) *GoodUserUpdateOne {
	mutation := newGoodUserMutation(c.config, OpUpdateOne, withGoodUserID(id))
	return &GoodUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GoodUser.
func (c *GoodUserClient) Delete() *GoodUserDelete {
	mutation := newGoodUserMutation(c.config, OpDelete)
	return &GoodUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GoodUserClient) DeleteOne(gu *GoodUser) *GoodUserDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *GoodUserClient) DeleteOneID(id uint32) *GoodUserDeleteOne {
	builder := c.Delete().Where(gooduser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GoodUserDeleteOne{builder}
}

// Query returns a query builder for GoodUser.
func (c *GoodUserClient) Query() *GoodUserQuery {
	return &GoodUserQuery{
		config: c.config,
	}
}

// Get returns a GoodUser entity by its id.
func (c *GoodUserClient) Get(ctx context.Context, id uint32) (*GoodUser, error) {
	return c.Query().Where(gooduser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GoodUserClient) GetX(ctx context.Context, id uint32) *GoodUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GoodUserClient) Hooks() []Hook {
	hooks := c.hooks.GoodUser
	return append(hooks[:len(hooks):len(hooks)], gooduser.Hooks[:]...)
}

// OrderUserClient is a client for the OrderUser schema.
type OrderUserClient struct {
	config
}

// NewOrderUserClient returns a client for the OrderUser from the given config.
func NewOrderUserClient(c config) *OrderUserClient {
	return &OrderUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `orderuser.Hooks(f(g(h())))`.
func (c *OrderUserClient) Use(hooks ...Hook) {
	c.hooks.OrderUser = append(c.hooks.OrderUser, hooks...)
}

// Create returns a builder for creating a OrderUser entity.
func (c *OrderUserClient) Create() *OrderUserCreate {
	mutation := newOrderUserMutation(c.config, OpCreate)
	return &OrderUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrderUser entities.
func (c *OrderUserClient) CreateBulk(builders ...*OrderUserCreate) *OrderUserCreateBulk {
	return &OrderUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrderUser.
func (c *OrderUserClient) Update() *OrderUserUpdate {
	mutation := newOrderUserMutation(c.config, OpUpdate)
	return &OrderUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrderUserClient) UpdateOne(ou *OrderUser) *OrderUserUpdateOne {
	mutation := newOrderUserMutation(c.config, OpUpdateOne, withOrderUser(ou))
	return &OrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrderUserClient) UpdateOneID(id uint32) *OrderUserUpdateOne {
	mutation := newOrderUserMutation(c.config, OpUpdateOne, withOrderUserID(id))
	return &OrderUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrderUser.
func (c *OrderUserClient) Delete() *OrderUserDelete {
	mutation := newOrderUserMutation(c.config, OpDelete)
	return &OrderUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrderUserClient) DeleteOne(ou *OrderUser) *OrderUserDeleteOne {
	return c.DeleteOneID(ou.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *OrderUserClient) DeleteOneID(id uint32) *OrderUserDeleteOne {
	builder := c.Delete().Where(orderuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrderUserDeleteOne{builder}
}

// Query returns a query builder for OrderUser.
func (c *OrderUserClient) Query() *OrderUserQuery {
	return &OrderUserQuery{
		config: c.config,
	}
}

// Get returns a OrderUser entity by its id.
func (c *OrderUserClient) Get(ctx context.Context, id uint32) (*OrderUser, error) {
	return c.Query().Where(orderuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrderUserClient) GetX(ctx context.Context, id uint32) *OrderUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrderUserClient) Hooks() []Hook {
	hooks := c.hooks.OrderUser
	return append(hooks[:len(hooks):len(hooks)], orderuser.Hooks[:]...)
}
