// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/apppool"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/coin"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionwithdrawal"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionwithdrawalrule"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/gooduser"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/orderuser"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/pool"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/rootuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 8)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   apppool.Table,
			Columns: apppool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: apppool.FieldID,
			},
		},
		Type: "AppPool",
		Fields: map[string]*sqlgraph.FieldSpec{
			apppool.FieldCreatedAt: {Type: field.TypeUint32, Column: apppool.FieldCreatedAt},
			apppool.FieldUpdatedAt: {Type: field.TypeUint32, Column: apppool.FieldUpdatedAt},
			apppool.FieldDeletedAt: {Type: field.TypeUint32, Column: apppool.FieldDeletedAt},
			apppool.FieldEntID:     {Type: field.TypeUUID, Column: apppool.FieldEntID},
			apppool.FieldAppID:     {Type: field.TypeUUID, Column: apppool.FieldAppID},
			apppool.FieldPoolID:    {Type: field.TypeUUID, Column: apppool.FieldPoolID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   coin.Table,
			Columns: coin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: coin.FieldID,
			},
		},
		Type: "Coin",
		Fields: map[string]*sqlgraph.FieldSpec{
			coin.FieldCreatedAt:              {Type: field.TypeUint32, Column: coin.FieldCreatedAt},
			coin.FieldUpdatedAt:              {Type: field.TypeUint32, Column: coin.FieldUpdatedAt},
			coin.FieldDeletedAt:              {Type: field.TypeUint32, Column: coin.FieldDeletedAt},
			coin.FieldEntID:                  {Type: field.TypeUUID, Column: coin.FieldEntID},
			coin.FieldPoolID:                 {Type: field.TypeUUID, Column: coin.FieldPoolID},
			coin.FieldCoinTypeID:             {Type: field.TypeUUID, Column: coin.FieldCoinTypeID},
			coin.FieldCoinType:               {Type: field.TypeString, Column: coin.FieldCoinType},
			coin.FieldFeeRatio:               {Type: field.TypeOther, Column: coin.FieldFeeRatio},
			coin.FieldFixedRevenueAble:       {Type: field.TypeBool, Column: coin.FieldFixedRevenueAble},
			coin.FieldLeastTransferAmount:    {Type: field.TypeOther, Column: coin.FieldLeastTransferAmount},
			coin.FieldBenefitIntervalSeconds: {Type: field.TypeUint32, Column: coin.FieldBenefitIntervalSeconds},
			coin.FieldRemark:                 {Type: field.TypeString, Column: coin.FieldRemark},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fractionwithdrawal.Table,
			Columns: fractionwithdrawal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionwithdrawal.FieldID,
			},
		},
		Type: "FractionWithdrawal",
		Fields: map[string]*sqlgraph.FieldSpec{
			fractionwithdrawal.FieldCreatedAt:             {Type: field.TypeUint32, Column: fractionwithdrawal.FieldCreatedAt},
			fractionwithdrawal.FieldUpdatedAt:             {Type: field.TypeUint32, Column: fractionwithdrawal.FieldUpdatedAt},
			fractionwithdrawal.FieldDeletedAt:             {Type: field.TypeUint32, Column: fractionwithdrawal.FieldDeletedAt},
			fractionwithdrawal.FieldEntID:                 {Type: field.TypeUUID, Column: fractionwithdrawal.FieldEntID},
			fractionwithdrawal.FieldAppID:                 {Type: field.TypeUUID, Column: fractionwithdrawal.FieldAppID},
			fractionwithdrawal.FieldUserID:                {Type: field.TypeUUID, Column: fractionwithdrawal.FieldUserID},
			fractionwithdrawal.FieldOrderUserID:           {Type: field.TypeUUID, Column: fractionwithdrawal.FieldOrderUserID},
			fractionwithdrawal.FieldCoinTypeID:            {Type: field.TypeUUID, Column: fractionwithdrawal.FieldCoinTypeID},
			fractionwithdrawal.FieldFractionWithdrawState: {Type: field.TypeString, Column: fractionwithdrawal.FieldFractionWithdrawState},
			fractionwithdrawal.FieldWithdrawAt:            {Type: field.TypeUint32, Column: fractionwithdrawal.FieldWithdrawAt},
			fractionwithdrawal.FieldPromisePayAt:          {Type: field.TypeUint32, Column: fractionwithdrawal.FieldPromisePayAt},
			fractionwithdrawal.FieldMsg:                   {Type: field.TypeString, Column: fractionwithdrawal.FieldMsg},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   fractionwithdrawalrule.Table,
			Columns: fractionwithdrawalrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionwithdrawalrule.FieldID,
			},
		},
		Type: "FractionWithdrawalRule",
		Fields: map[string]*sqlgraph.FieldSpec{
			fractionwithdrawalrule.FieldCreatedAt:             {Type: field.TypeUint32, Column: fractionwithdrawalrule.FieldCreatedAt},
			fractionwithdrawalrule.FieldUpdatedAt:             {Type: field.TypeUint32, Column: fractionwithdrawalrule.FieldUpdatedAt},
			fractionwithdrawalrule.FieldDeletedAt:             {Type: field.TypeUint32, Column: fractionwithdrawalrule.FieldDeletedAt},
			fractionwithdrawalrule.FieldEntID:                 {Type: field.TypeUUID, Column: fractionwithdrawalrule.FieldEntID},
			fractionwithdrawalrule.FieldPoolCoinTypeID:        {Type: field.TypeUUID, Column: fractionwithdrawalrule.FieldPoolCoinTypeID},
			fractionwithdrawalrule.FieldWithdrawInterval:      {Type: field.TypeUint32, Column: fractionwithdrawalrule.FieldWithdrawInterval},
			fractionwithdrawalrule.FieldLeastWithdrawalAmount: {Type: field.TypeOther, Column: fractionwithdrawalrule.FieldLeastWithdrawalAmount},
			fractionwithdrawalrule.FieldPayoutThreshold:       {Type: field.TypeOther, Column: fractionwithdrawalrule.FieldPayoutThreshold},
			fractionwithdrawalrule.FieldWithdrawFee:           {Type: field.TypeOther, Column: fractionwithdrawalrule.FieldWithdrawFee},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   gooduser.Table,
			Columns: gooduser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: gooduser.FieldID,
			},
		},
		Type: "GoodUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			gooduser.FieldCreatedAt:    {Type: field.TypeUint32, Column: gooduser.FieldCreatedAt},
			gooduser.FieldUpdatedAt:    {Type: field.TypeUint32, Column: gooduser.FieldUpdatedAt},
			gooduser.FieldDeletedAt:    {Type: field.TypeUint32, Column: gooduser.FieldDeletedAt},
			gooduser.FieldEntID:        {Type: field.TypeUUID, Column: gooduser.FieldEntID},
			gooduser.FieldRootUserID:   {Type: field.TypeUUID, Column: gooduser.FieldRootUserID},
			gooduser.FieldName:         {Type: field.TypeString, Column: gooduser.FieldName},
			gooduser.FieldReadPageLink: {Type: field.TypeString, Column: gooduser.FieldReadPageLink},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orderuser.Table,
			Columns: orderuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderuser.FieldID,
			},
		},
		Type: "OrderUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			orderuser.FieldCreatedAt:    {Type: field.TypeUint32, Column: orderuser.FieldCreatedAt},
			orderuser.FieldUpdatedAt:    {Type: field.TypeUint32, Column: orderuser.FieldUpdatedAt},
			orderuser.FieldDeletedAt:    {Type: field.TypeUint32, Column: orderuser.FieldDeletedAt},
			orderuser.FieldEntID:        {Type: field.TypeUUID, Column: orderuser.FieldEntID},
			orderuser.FieldGoodUserID:   {Type: field.TypeUUID, Column: orderuser.FieldGoodUserID},
			orderuser.FieldUserID:       {Type: field.TypeUUID, Column: orderuser.FieldUserID},
			orderuser.FieldAppID:        {Type: field.TypeUUID, Column: orderuser.FieldAppID},
			orderuser.FieldName:         {Type: field.TypeString, Column: orderuser.FieldName},
			orderuser.FieldReadPageLink: {Type: field.TypeString, Column: orderuser.FieldReadPageLink},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   pool.Table,
			Columns: pool.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: pool.FieldID,
			},
		},
		Type: "Pool",
		Fields: map[string]*sqlgraph.FieldSpec{
			pool.FieldCreatedAt:      {Type: field.TypeUint32, Column: pool.FieldCreatedAt},
			pool.FieldUpdatedAt:      {Type: field.TypeUint32, Column: pool.FieldUpdatedAt},
			pool.FieldDeletedAt:      {Type: field.TypeUint32, Column: pool.FieldDeletedAt},
			pool.FieldEntID:          {Type: field.TypeUUID, Column: pool.FieldEntID},
			pool.FieldMiningPoolType: {Type: field.TypeString, Column: pool.FieldMiningPoolType},
			pool.FieldName:           {Type: field.TypeString, Column: pool.FieldName},
			pool.FieldSite:           {Type: field.TypeString, Column: pool.FieldSite},
			pool.FieldLogo:           {Type: field.TypeString, Column: pool.FieldLogo},
			pool.FieldDescription:    {Type: field.TypeString, Column: pool.FieldDescription},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   rootuser.Table,
			Columns: rootuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: rootuser.FieldID,
			},
		},
		Type: "RootUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			rootuser.FieldCreatedAt:     {Type: field.TypeUint32, Column: rootuser.FieldCreatedAt},
			rootuser.FieldUpdatedAt:     {Type: field.TypeUint32, Column: rootuser.FieldUpdatedAt},
			rootuser.FieldDeletedAt:     {Type: field.TypeUint32, Column: rootuser.FieldDeletedAt},
			rootuser.FieldEntID:         {Type: field.TypeUUID, Column: rootuser.FieldEntID},
			rootuser.FieldName:          {Type: field.TypeString, Column: rootuser.FieldName},
			rootuser.FieldPoolID:        {Type: field.TypeUUID, Column: rootuser.FieldPoolID},
			rootuser.FieldEmail:         {Type: field.TypeString, Column: rootuser.FieldEmail},
			rootuser.FieldAuthToken:     {Type: field.TypeString, Column: rootuser.FieldAuthToken},
			rootuser.FieldAuthTokenSalt: {Type: field.TypeString, Column: rootuser.FieldAuthTokenSalt},
			rootuser.FieldAuthed:        {Type: field.TypeBool, Column: rootuser.FieldAuthed},
			rootuser.FieldRemark:        {Type: field.TypeString, Column: rootuser.FieldRemark},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (apq *AppPoolQuery) addPredicate(pred func(s *sql.Selector)) {
	apq.predicates = append(apq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AppPoolQuery builder.
func (apq *AppPoolQuery) Filter() *AppPoolFilter {
	return &AppPoolFilter{config: apq.config, predicateAdder: apq}
}

// addPredicate implements the predicateAdder interface.
func (m *AppPoolMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AppPoolMutation builder.
func (m *AppPoolMutation) Filter() *AppPoolFilter {
	return &AppPoolFilter{config: m.config, predicateAdder: m}
}

// AppPoolFilter provides a generic filtering capability at runtime for AppPoolQuery.
type AppPoolFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AppPoolFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AppPoolFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(apppool.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *AppPoolFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(apppool.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *AppPoolFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(apppool.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *AppPoolFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(apppool.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *AppPoolFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(apppool.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *AppPoolFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(apppool.FieldAppID))
}

// WherePoolID applies the entql [16]byte predicate on the pool_id field.
func (f *AppPoolFilter) WherePoolID(p entql.ValueP) {
	f.Where(p.Field(apppool.FieldPoolID))
}

// addPredicate implements the predicateAdder interface.
func (cq *CoinQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CoinQuery builder.
func (cq *CoinQuery) Filter() *CoinFilter {
	return &CoinFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CoinMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CoinMutation builder.
func (m *CoinMutation) Filter() *CoinFilter {
	return &CoinFilter{config: m.config, predicateAdder: m}
}

// CoinFilter provides a generic filtering capability at runtime for CoinQuery.
type CoinFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CoinFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *CoinFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(coin.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *CoinFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(coin.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *CoinFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(coin.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *CoinFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(coin.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *CoinFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(coin.FieldEntID))
}

// WherePoolID applies the entql [16]byte predicate on the pool_id field.
func (f *CoinFilter) WherePoolID(p entql.ValueP) {
	f.Where(p.Field(coin.FieldPoolID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *CoinFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(coin.FieldCoinTypeID))
}

// WhereCoinType applies the entql string predicate on the coin_type field.
func (f *CoinFilter) WhereCoinType(p entql.StringP) {
	f.Where(p.Field(coin.FieldCoinType))
}

// WhereFeeRatio applies the entql other predicate on the fee_ratio field.
func (f *CoinFilter) WhereFeeRatio(p entql.OtherP) {
	f.Where(p.Field(coin.FieldFeeRatio))
}

// WhereFixedRevenueAble applies the entql bool predicate on the fixed_revenue_able field.
func (f *CoinFilter) WhereFixedRevenueAble(p entql.BoolP) {
	f.Where(p.Field(coin.FieldFixedRevenueAble))
}

// WhereLeastTransferAmount applies the entql other predicate on the least_transfer_amount field.
func (f *CoinFilter) WhereLeastTransferAmount(p entql.OtherP) {
	f.Where(p.Field(coin.FieldLeastTransferAmount))
}

// WhereBenefitIntervalSeconds applies the entql uint32 predicate on the benefit_interval_seconds field.
func (f *CoinFilter) WhereBenefitIntervalSeconds(p entql.Uint32P) {
	f.Where(p.Field(coin.FieldBenefitIntervalSeconds))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *CoinFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(coin.FieldRemark))
}

// addPredicate implements the predicateAdder interface.
func (fwq *FractionWithdrawalQuery) addPredicate(pred func(s *sql.Selector)) {
	fwq.predicates = append(fwq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FractionWithdrawalQuery builder.
func (fwq *FractionWithdrawalQuery) Filter() *FractionWithdrawalFilter {
	return &FractionWithdrawalFilter{config: fwq.config, predicateAdder: fwq}
}

// addPredicate implements the predicateAdder interface.
func (m *FractionWithdrawalMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FractionWithdrawalMutation builder.
func (m *FractionWithdrawalMutation) Filter() *FractionWithdrawalFilter {
	return &FractionWithdrawalFilter{config: m.config, predicateAdder: m}
}

// FractionWithdrawalFilter provides a generic filtering capability at runtime for FractionWithdrawalQuery.
type FractionWithdrawalFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FractionWithdrawalFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *FractionWithdrawalFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawal.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *FractionWithdrawalFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawal.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *FractionWithdrawalFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawal.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *FractionWithdrawalFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawal.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *FractionWithdrawalFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(fractionwithdrawal.FieldEntID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *FractionWithdrawalFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(fractionwithdrawal.FieldAppID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *FractionWithdrawalFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(fractionwithdrawal.FieldUserID))
}

// WhereOrderUserID applies the entql [16]byte predicate on the order_user_id field.
func (f *FractionWithdrawalFilter) WhereOrderUserID(p entql.ValueP) {
	f.Where(p.Field(fractionwithdrawal.FieldOrderUserID))
}

// WhereCoinTypeID applies the entql [16]byte predicate on the coin_type_id field.
func (f *FractionWithdrawalFilter) WhereCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(fractionwithdrawal.FieldCoinTypeID))
}

// WhereFractionWithdrawState applies the entql string predicate on the fraction_withdraw_state field.
func (f *FractionWithdrawalFilter) WhereFractionWithdrawState(p entql.StringP) {
	f.Where(p.Field(fractionwithdrawal.FieldFractionWithdrawState))
}

// WhereWithdrawAt applies the entql uint32 predicate on the withdraw_at field.
func (f *FractionWithdrawalFilter) WhereWithdrawAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawal.FieldWithdrawAt))
}

// WherePromisePayAt applies the entql uint32 predicate on the promise_pay_at field.
func (f *FractionWithdrawalFilter) WherePromisePayAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawal.FieldPromisePayAt))
}

// WhereMsg applies the entql string predicate on the msg field.
func (f *FractionWithdrawalFilter) WhereMsg(p entql.StringP) {
	f.Where(p.Field(fractionwithdrawal.FieldMsg))
}

// addPredicate implements the predicateAdder interface.
func (fwrq *FractionWithdrawalRuleQuery) addPredicate(pred func(s *sql.Selector)) {
	fwrq.predicates = append(fwrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the FractionWithdrawalRuleQuery builder.
func (fwrq *FractionWithdrawalRuleQuery) Filter() *FractionWithdrawalRuleFilter {
	return &FractionWithdrawalRuleFilter{config: fwrq.config, predicateAdder: fwrq}
}

// addPredicate implements the predicateAdder interface.
func (m *FractionWithdrawalRuleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the FractionWithdrawalRuleMutation builder.
func (m *FractionWithdrawalRuleMutation) Filter() *FractionWithdrawalRuleFilter {
	return &FractionWithdrawalRuleFilter{config: m.config, predicateAdder: m}
}

// FractionWithdrawalRuleFilter provides a generic filtering capability at runtime for FractionWithdrawalRuleQuery.
type FractionWithdrawalRuleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *FractionWithdrawalRuleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *FractionWithdrawalRuleFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawalrule.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *FractionWithdrawalRuleFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawalrule.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *FractionWithdrawalRuleFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawalrule.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *FractionWithdrawalRuleFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawalrule.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *FractionWithdrawalRuleFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(fractionwithdrawalrule.FieldEntID))
}

// WherePoolCoinTypeID applies the entql [16]byte predicate on the pool_coin_type_id field.
func (f *FractionWithdrawalRuleFilter) WherePoolCoinTypeID(p entql.ValueP) {
	f.Where(p.Field(fractionwithdrawalrule.FieldPoolCoinTypeID))
}

// WhereWithdrawInterval applies the entql uint32 predicate on the withdraw_interval field.
func (f *FractionWithdrawalRuleFilter) WhereWithdrawInterval(p entql.Uint32P) {
	f.Where(p.Field(fractionwithdrawalrule.FieldWithdrawInterval))
}

// WhereLeastWithdrawalAmount applies the entql other predicate on the least_withdrawal_amount field.
func (f *FractionWithdrawalRuleFilter) WhereLeastWithdrawalAmount(p entql.OtherP) {
	f.Where(p.Field(fractionwithdrawalrule.FieldLeastWithdrawalAmount))
}

// WherePayoutThreshold applies the entql other predicate on the payout_threshold field.
func (f *FractionWithdrawalRuleFilter) WherePayoutThreshold(p entql.OtherP) {
	f.Where(p.Field(fractionwithdrawalrule.FieldPayoutThreshold))
}

// WhereWithdrawFee applies the entql other predicate on the withdraw_fee field.
func (f *FractionWithdrawalRuleFilter) WhereWithdrawFee(p entql.OtherP) {
	f.Where(p.Field(fractionwithdrawalrule.FieldWithdrawFee))
}

// addPredicate implements the predicateAdder interface.
func (guq *GoodUserQuery) addPredicate(pred func(s *sql.Selector)) {
	guq.predicates = append(guq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GoodUserQuery builder.
func (guq *GoodUserQuery) Filter() *GoodUserFilter {
	return &GoodUserFilter{config: guq.config, predicateAdder: guq}
}

// addPredicate implements the predicateAdder interface.
func (m *GoodUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GoodUserMutation builder.
func (m *GoodUserMutation) Filter() *GoodUserFilter {
	return &GoodUserFilter{config: m.config, predicateAdder: m}
}

// GoodUserFilter provides a generic filtering capability at runtime for GoodUserQuery.
type GoodUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GoodUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *GoodUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(gooduser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *GoodUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(gooduser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *GoodUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(gooduser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *GoodUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(gooduser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *GoodUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(gooduser.FieldEntID))
}

// WhereRootUserID applies the entql [16]byte predicate on the root_user_id field.
func (f *GoodUserFilter) WhereRootUserID(p entql.ValueP) {
	f.Where(p.Field(gooduser.FieldRootUserID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GoodUserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(gooduser.FieldName))
}

// WhereReadPageLink applies the entql string predicate on the read_page_link field.
func (f *GoodUserFilter) WhereReadPageLink(p entql.StringP) {
	f.Where(p.Field(gooduser.FieldReadPageLink))
}

// addPredicate implements the predicateAdder interface.
func (ouq *OrderUserQuery) addPredicate(pred func(s *sql.Selector)) {
	ouq.predicates = append(ouq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrderUserQuery builder.
func (ouq *OrderUserQuery) Filter() *OrderUserFilter {
	return &OrderUserFilter{config: ouq.config, predicateAdder: ouq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrderUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrderUserMutation builder.
func (m *OrderUserMutation) Filter() *OrderUserFilter {
	return &OrderUserFilter{config: m.config, predicateAdder: m}
}

// OrderUserFilter provides a generic filtering capability at runtime for OrderUserQuery.
type OrderUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrderUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *OrderUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(orderuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *OrderUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *OrderUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(orderuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *OrderUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(orderuser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *OrderUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(orderuser.FieldEntID))
}

// WhereGoodUserID applies the entql [16]byte predicate on the good_user_id field.
func (f *OrderUserFilter) WhereGoodUserID(p entql.ValueP) {
	f.Where(p.Field(orderuser.FieldGoodUserID))
}

// WhereUserID applies the entql [16]byte predicate on the user_id field.
func (f *OrderUserFilter) WhereUserID(p entql.ValueP) {
	f.Where(p.Field(orderuser.FieldUserID))
}

// WhereAppID applies the entql [16]byte predicate on the app_id field.
func (f *OrderUserFilter) WhereAppID(p entql.ValueP) {
	f.Where(p.Field(orderuser.FieldAppID))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrderUserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(orderuser.FieldName))
}

// WhereReadPageLink applies the entql string predicate on the read_page_link field.
func (f *OrderUserFilter) WhereReadPageLink(p entql.StringP) {
	f.Where(p.Field(orderuser.FieldReadPageLink))
}

// addPredicate implements the predicateAdder interface.
func (pq *PoolQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PoolQuery builder.
func (pq *PoolQuery) Filter() *PoolFilter {
	return &PoolFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PoolMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PoolMutation builder.
func (m *PoolMutation) Filter() *PoolFilter {
	return &PoolFilter{config: m.config, predicateAdder: m}
}

// PoolFilter provides a generic filtering capability at runtime for PoolQuery.
type PoolFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PoolFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *PoolFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(pool.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *PoolFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(pool.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *PoolFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(pool.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *PoolFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(pool.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *PoolFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(pool.FieldEntID))
}

// WhereMiningPoolType applies the entql string predicate on the mining_pool_type field.
func (f *PoolFilter) WhereMiningPoolType(p entql.StringP) {
	f.Where(p.Field(pool.FieldMiningPoolType))
}

// WhereName applies the entql string predicate on the name field.
func (f *PoolFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(pool.FieldName))
}

// WhereSite applies the entql string predicate on the site field.
func (f *PoolFilter) WhereSite(p entql.StringP) {
	f.Where(p.Field(pool.FieldSite))
}

// WhereLogo applies the entql string predicate on the logo field.
func (f *PoolFilter) WhereLogo(p entql.StringP) {
	f.Where(p.Field(pool.FieldLogo))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PoolFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(pool.FieldDescription))
}

// addPredicate implements the predicateAdder interface.
func (ruq *RootUserQuery) addPredicate(pred func(s *sql.Selector)) {
	ruq.predicates = append(ruq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RootUserQuery builder.
func (ruq *RootUserQuery) Filter() *RootUserFilter {
	return &RootUserFilter{config: ruq.config, predicateAdder: ruq}
}

// addPredicate implements the predicateAdder interface.
func (m *RootUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RootUserMutation builder.
func (m *RootUserMutation) Filter() *RootUserFilter {
	return &RootUserFilter{config: m.config, predicateAdder: m}
}

// RootUserFilter provides a generic filtering capability at runtime for RootUserQuery.
type RootUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RootUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *RootUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(rootuser.FieldID))
}

// WhereCreatedAt applies the entql uint32 predicate on the created_at field.
func (f *RootUserFilter) WhereCreatedAt(p entql.Uint32P) {
	f.Where(p.Field(rootuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql uint32 predicate on the updated_at field.
func (f *RootUserFilter) WhereUpdatedAt(p entql.Uint32P) {
	f.Where(p.Field(rootuser.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql uint32 predicate on the deleted_at field.
func (f *RootUserFilter) WhereDeletedAt(p entql.Uint32P) {
	f.Where(p.Field(rootuser.FieldDeletedAt))
}

// WhereEntID applies the entql [16]byte predicate on the ent_id field.
func (f *RootUserFilter) WhereEntID(p entql.ValueP) {
	f.Where(p.Field(rootuser.FieldEntID))
}

// WhereName applies the entql string predicate on the name field.
func (f *RootUserFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(rootuser.FieldName))
}

// WherePoolID applies the entql [16]byte predicate on the pool_id field.
func (f *RootUserFilter) WherePoolID(p entql.ValueP) {
	f.Where(p.Field(rootuser.FieldPoolID))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *RootUserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(rootuser.FieldEmail))
}

// WhereAuthToken applies the entql string predicate on the auth_token field.
func (f *RootUserFilter) WhereAuthToken(p entql.StringP) {
	f.Where(p.Field(rootuser.FieldAuthToken))
}

// WhereAuthTokenSalt applies the entql string predicate on the auth_token_salt field.
func (f *RootUserFilter) WhereAuthTokenSalt(p entql.StringP) {
	f.Where(p.Field(rootuser.FieldAuthTokenSalt))
}

// WhereAuthed applies the entql bool predicate on the authed field.
func (f *RootUserFilter) WhereAuthed(p entql.BoolP) {
	f.Where(p.Field(rootuser.FieldAuthed))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *RootUserFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(rootuser.FieldRemark))
}
