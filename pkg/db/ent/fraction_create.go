// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fraction"
	"github.com/google/uuid"
)

// FractionCreate is the builder for creating a Fraction entity.
type FractionCreate struct {
	config
	mutation *FractionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fc *FractionCreate) SetCreatedAt(u uint32) *FractionCreate {
	fc.mutation.SetCreatedAt(u)
	return fc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fc *FractionCreate) SetNillableCreatedAt(u *uint32) *FractionCreate {
	if u != nil {
		fc.SetCreatedAt(*u)
	}
	return fc
}

// SetUpdatedAt sets the "updated_at" field.
func (fc *FractionCreate) SetUpdatedAt(u uint32) *FractionCreate {
	fc.mutation.SetUpdatedAt(u)
	return fc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fc *FractionCreate) SetNillableUpdatedAt(u *uint32) *FractionCreate {
	if u != nil {
		fc.SetUpdatedAt(*u)
	}
	return fc
}

// SetDeletedAt sets the "deleted_at" field.
func (fc *FractionCreate) SetDeletedAt(u uint32) *FractionCreate {
	fc.mutation.SetDeletedAt(u)
	return fc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fc *FractionCreate) SetNillableDeletedAt(u *uint32) *FractionCreate {
	if u != nil {
		fc.SetDeletedAt(*u)
	}
	return fc
}

// SetEntID sets the "ent_id" field.
func (fc *FractionCreate) SetEntID(u uuid.UUID) *FractionCreate {
	fc.mutation.SetEntID(u)
	return fc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fc *FractionCreate) SetNillableEntID(u *uuid.UUID) *FractionCreate {
	if u != nil {
		fc.SetEntID(*u)
	}
	return fc
}

// SetAppID sets the "app_id" field.
func (fc *FractionCreate) SetAppID(u uuid.UUID) *FractionCreate {
	fc.mutation.SetAppID(u)
	return fc
}

// SetUserID sets the "user_id" field.
func (fc *FractionCreate) SetUserID(u uuid.UUID) *FractionCreate {
	fc.mutation.SetUserID(u)
	return fc
}

// SetOrderUserID sets the "order_user_id" field.
func (fc *FractionCreate) SetOrderUserID(u uuid.UUID) *FractionCreate {
	fc.mutation.SetOrderUserID(u)
	return fc
}

// SetWithdrawState sets the "withdraw_state" field.
func (fc *FractionCreate) SetWithdrawState(s string) *FractionCreate {
	fc.mutation.SetWithdrawState(s)
	return fc
}

// SetWithdrawTime sets the "withdraw_time" field.
func (fc *FractionCreate) SetWithdrawTime(u uint32) *FractionCreate {
	fc.mutation.SetWithdrawTime(u)
	return fc
}

// SetPayTime sets the "pay_time" field.
func (fc *FractionCreate) SetPayTime(u uint32) *FractionCreate {
	fc.mutation.SetPayTime(u)
	return fc
}

// SetNillablePayTime sets the "pay_time" field if the given value is not nil.
func (fc *FractionCreate) SetNillablePayTime(u *uint32) *FractionCreate {
	if u != nil {
		fc.SetPayTime(*u)
	}
	return fc
}

// SetMsg sets the "msg" field.
func (fc *FractionCreate) SetMsg(s string) *FractionCreate {
	fc.mutation.SetMsg(s)
	return fc
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (fc *FractionCreate) SetNillableMsg(s *string) *FractionCreate {
	if s != nil {
		fc.SetMsg(*s)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FractionCreate) SetID(u uint32) *FractionCreate {
	fc.mutation.SetID(u)
	return fc
}

// Mutation returns the FractionMutation object of the builder.
func (fc *FractionCreate) Mutation() *FractionMutation {
	return fc.mutation
}

// Save creates the Fraction in the database.
func (fc *FractionCreate) Save(ctx context.Context) (*Fraction, error) {
	var (
		err  error
		node *Fraction
	)
	if err := fc.defaults(); err != nil {
		return nil, err
	}
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FractionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Fraction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FractionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FractionCreate) SaveX(ctx context.Context) *Fraction {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FractionCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FractionCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FractionCreate) defaults() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		if fraction.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized fraction.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := fraction.DefaultCreatedAt()
		fc.mutation.SetCreatedAt(v)
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		if fraction.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fraction.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fraction.DefaultUpdatedAt()
		fc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fc.mutation.DeletedAt(); !ok {
		if fraction.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized fraction.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := fraction.DefaultDeletedAt()
		fc.mutation.SetDeletedAt(v)
	}
	if _, ok := fc.mutation.EntID(); !ok {
		if fraction.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized fraction.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := fraction.DefaultEntID()
		fc.mutation.SetEntID(v)
	}
	if _, ok := fc.mutation.PayTime(); !ok {
		v := fraction.DefaultPayTime
		fc.mutation.SetPayTime(v)
	}
	if _, ok := fc.mutation.Msg(); !ok {
		v := fraction.DefaultMsg
		fc.mutation.SetMsg(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fc *FractionCreate) check() error {
	if _, ok := fc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Fraction.created_at"`)}
	}
	if _, ok := fc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Fraction.updated_at"`)}
	}
	if _, ok := fc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Fraction.deleted_at"`)}
	}
	if _, ok := fc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "Fraction.ent_id"`)}
	}
	if _, ok := fc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "Fraction.app_id"`)}
	}
	if _, ok := fc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Fraction.user_id"`)}
	}
	if _, ok := fc.mutation.OrderUserID(); !ok {
		return &ValidationError{Name: "order_user_id", err: errors.New(`ent: missing required field "Fraction.order_user_id"`)}
	}
	if _, ok := fc.mutation.WithdrawState(); !ok {
		return &ValidationError{Name: "withdraw_state", err: errors.New(`ent: missing required field "Fraction.withdraw_state"`)}
	}
	if _, ok := fc.mutation.WithdrawTime(); !ok {
		return &ValidationError{Name: "withdraw_time", err: errors.New(`ent: missing required field "Fraction.withdraw_time"`)}
	}
	return nil
}

func (fc *FractionCreate) sqlSave(ctx context.Context) (*Fraction, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (fc *FractionCreate) createSpec() (*Fraction, *sqlgraph.CreateSpec) {
	var (
		_node = &Fraction{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fraction.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fraction.FieldID,
			},
		}
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fraction.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fraction.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fraction.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fraction.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := fc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fraction.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := fc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fraction.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := fc.mutation.OrderUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fraction.FieldOrderUserID,
		})
		_node.OrderUserID = value
	}
	if value, ok := fc.mutation.WithdrawState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fraction.FieldWithdrawState,
		})
		_node.WithdrawState = value
	}
	if value, ok := fc.mutation.WithdrawTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fraction.FieldWithdrawTime,
		})
		_node.WithdrawTime = value
	}
	if value, ok := fc.mutation.PayTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fraction.FieldPayTime,
		})
		_node.PayTime = value
	}
	if value, ok := fc.mutation.Msg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fraction.FieldMsg,
		})
		_node.Msg = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fraction.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FractionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fc *FractionCreate) OnConflict(opts ...sql.ConflictOption) *FractionUpsertOne {
	fc.conflict = opts
	return &FractionUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fraction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FractionCreate) OnConflictColumns(columns ...string) *FractionUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FractionUpsertOne{
		create: fc,
	}
}

type (
	// FractionUpsertOne is the builder for "upsert"-ing
	//  one Fraction node.
	FractionUpsertOne struct {
		create *FractionCreate
	}

	// FractionUpsert is the "OnConflict" setter.
	FractionUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FractionUpsert) SetCreatedAt(v uint32) *FractionUpsert {
	u.Set(fraction.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionUpsert) UpdateCreatedAt() *FractionUpsert {
	u.SetExcluded(fraction.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionUpsert) AddCreatedAt(v uint32) *FractionUpsert {
	u.Add(fraction.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionUpsert) SetUpdatedAt(v uint32) *FractionUpsert {
	u.Set(fraction.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionUpsert) UpdateUpdatedAt() *FractionUpsert {
	u.SetExcluded(fraction.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionUpsert) AddUpdatedAt(v uint32) *FractionUpsert {
	u.Add(fraction.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionUpsert) SetDeletedAt(v uint32) *FractionUpsert {
	u.Set(fraction.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionUpsert) UpdateDeletedAt() *FractionUpsert {
	u.SetExcluded(fraction.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionUpsert) AddDeletedAt(v uint32) *FractionUpsert {
	u.Add(fraction.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FractionUpsert) SetEntID(v uuid.UUID) *FractionUpsert {
	u.Set(fraction.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionUpsert) UpdateEntID() *FractionUpsert {
	u.SetExcluded(fraction.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *FractionUpsert) SetAppID(v uuid.UUID) *FractionUpsert {
	u.Set(fraction.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FractionUpsert) UpdateAppID() *FractionUpsert {
	u.SetExcluded(fraction.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *FractionUpsert) SetUserID(v uuid.UUID) *FractionUpsert {
	u.Set(fraction.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FractionUpsert) UpdateUserID() *FractionUpsert {
	u.SetExcluded(fraction.FieldUserID)
	return u
}

// SetOrderUserID sets the "order_user_id" field.
func (u *FractionUpsert) SetOrderUserID(v uuid.UUID) *FractionUpsert {
	u.Set(fraction.FieldOrderUserID, v)
	return u
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *FractionUpsert) UpdateOrderUserID() *FractionUpsert {
	u.SetExcluded(fraction.FieldOrderUserID)
	return u
}

// SetWithdrawState sets the "withdraw_state" field.
func (u *FractionUpsert) SetWithdrawState(v string) *FractionUpsert {
	u.Set(fraction.FieldWithdrawState, v)
	return u
}

// UpdateWithdrawState sets the "withdraw_state" field to the value that was provided on create.
func (u *FractionUpsert) UpdateWithdrawState() *FractionUpsert {
	u.SetExcluded(fraction.FieldWithdrawState)
	return u
}

// SetWithdrawTime sets the "withdraw_time" field.
func (u *FractionUpsert) SetWithdrawTime(v uint32) *FractionUpsert {
	u.Set(fraction.FieldWithdrawTime, v)
	return u
}

// UpdateWithdrawTime sets the "withdraw_time" field to the value that was provided on create.
func (u *FractionUpsert) UpdateWithdrawTime() *FractionUpsert {
	u.SetExcluded(fraction.FieldWithdrawTime)
	return u
}

// AddWithdrawTime adds v to the "withdraw_time" field.
func (u *FractionUpsert) AddWithdrawTime(v uint32) *FractionUpsert {
	u.Add(fraction.FieldWithdrawTime, v)
	return u
}

// SetPayTime sets the "pay_time" field.
func (u *FractionUpsert) SetPayTime(v uint32) *FractionUpsert {
	u.Set(fraction.FieldPayTime, v)
	return u
}

// UpdatePayTime sets the "pay_time" field to the value that was provided on create.
func (u *FractionUpsert) UpdatePayTime() *FractionUpsert {
	u.SetExcluded(fraction.FieldPayTime)
	return u
}

// AddPayTime adds v to the "pay_time" field.
func (u *FractionUpsert) AddPayTime(v uint32) *FractionUpsert {
	u.Add(fraction.FieldPayTime, v)
	return u
}

// ClearPayTime clears the value of the "pay_time" field.
func (u *FractionUpsert) ClearPayTime() *FractionUpsert {
	u.SetNull(fraction.FieldPayTime)
	return u
}

// SetMsg sets the "msg" field.
func (u *FractionUpsert) SetMsg(v string) *FractionUpsert {
	u.Set(fraction.FieldMsg, v)
	return u
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *FractionUpsert) UpdateMsg() *FractionUpsert {
	u.SetExcluded(fraction.FieldMsg)
	return u
}

// ClearMsg clears the value of the "msg" field.
func (u *FractionUpsert) ClearMsg() *FractionUpsert {
	u.SetNull(fraction.FieldMsg)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Fraction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fraction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FractionUpsertOne) UpdateNewValues() *FractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fraction.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fraction.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FractionUpsertOne) Ignore() *FractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FractionUpsertOne) DoNothing() *FractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FractionCreate.OnConflict
// documentation for more info.
func (u *FractionUpsertOne) Update(set func(*FractionUpsert)) *FractionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FractionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FractionUpsertOne) SetCreatedAt(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionUpsertOne) AddCreatedAt(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateCreatedAt() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionUpsertOne) SetUpdatedAt(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionUpsertOne) AddUpdatedAt(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateUpdatedAt() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionUpsertOne) SetDeletedAt(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionUpsertOne) AddDeletedAt(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateDeletedAt() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FractionUpsertOne) SetEntID(v uuid.UUID) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateEntID() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *FractionUpsertOne) SetAppID(v uuid.UUID) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateAppID() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *FractionUpsertOne) SetUserID(v uuid.UUID) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateUserID() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateUserID()
	})
}

// SetOrderUserID sets the "order_user_id" field.
func (u *FractionUpsertOne) SetOrderUserID(v uuid.UUID) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetOrderUserID(v)
	})
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateOrderUserID() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateOrderUserID()
	})
}

// SetWithdrawState sets the "withdraw_state" field.
func (u *FractionUpsertOne) SetWithdrawState(v string) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetWithdrawState(v)
	})
}

// UpdateWithdrawState sets the "withdraw_state" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateWithdrawState() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateWithdrawState()
	})
}

// SetWithdrawTime sets the "withdraw_time" field.
func (u *FractionUpsertOne) SetWithdrawTime(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetWithdrawTime(v)
	})
}

// AddWithdrawTime adds v to the "withdraw_time" field.
func (u *FractionUpsertOne) AddWithdrawTime(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.AddWithdrawTime(v)
	})
}

// UpdateWithdrawTime sets the "withdraw_time" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateWithdrawTime() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateWithdrawTime()
	})
}

// SetPayTime sets the "pay_time" field.
func (u *FractionUpsertOne) SetPayTime(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetPayTime(v)
	})
}

// AddPayTime adds v to the "pay_time" field.
func (u *FractionUpsertOne) AddPayTime(v uint32) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.AddPayTime(v)
	})
}

// UpdatePayTime sets the "pay_time" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdatePayTime() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdatePayTime()
	})
}

// ClearPayTime clears the value of the "pay_time" field.
func (u *FractionUpsertOne) ClearPayTime() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.ClearPayTime()
	})
}

// SetMsg sets the "msg" field.
func (u *FractionUpsertOne) SetMsg(v string) *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.SetMsg(v)
	})
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *FractionUpsertOne) UpdateMsg() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateMsg()
	})
}

// ClearMsg clears the value of the "msg" field.
func (u *FractionUpsertOne) ClearMsg() *FractionUpsertOne {
	return u.Update(func(s *FractionUpsert) {
		s.ClearMsg()
	})
}

// Exec executes the query.
func (u *FractionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FractionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FractionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FractionUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FractionUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FractionCreateBulk is the builder for creating many Fraction entities in bulk.
type FractionCreateBulk struct {
	config
	builders []*FractionCreate
	conflict []sql.ConflictOption
}

// Save creates the Fraction entities in the database.
func (fcb *FractionCreateBulk) Save(ctx context.Context) ([]*Fraction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fraction, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FractionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FractionCreateBulk) SaveX(ctx context.Context) []*Fraction {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FractionCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FractionCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Fraction.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FractionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (fcb *FractionCreateBulk) OnConflict(opts ...sql.ConflictOption) *FractionUpsertBulk {
	fcb.conflict = opts
	return &FractionUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Fraction.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FractionCreateBulk) OnConflictColumns(columns ...string) *FractionUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FractionUpsertBulk{
		create: fcb,
	}
}

// FractionUpsertBulk is the builder for "upsert"-ing
// a bulk of Fraction nodes.
type FractionUpsertBulk struct {
	create *FractionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Fraction.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fraction.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FractionUpsertBulk) UpdateNewValues() *FractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fraction.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Fraction.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FractionUpsertBulk) Ignore() *FractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FractionUpsertBulk) DoNothing() *FractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FractionCreateBulk.OnConflict
// documentation for more info.
func (u *FractionUpsertBulk) Update(set func(*FractionUpsert)) *FractionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FractionUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FractionUpsertBulk) SetCreatedAt(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionUpsertBulk) AddCreatedAt(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateCreatedAt() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionUpsertBulk) SetUpdatedAt(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionUpsertBulk) AddUpdatedAt(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateUpdatedAt() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionUpsertBulk) SetDeletedAt(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionUpsertBulk) AddDeletedAt(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateDeletedAt() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FractionUpsertBulk) SetEntID(v uuid.UUID) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateEntID() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *FractionUpsertBulk) SetAppID(v uuid.UUID) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateAppID() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *FractionUpsertBulk) SetUserID(v uuid.UUID) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateUserID() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateUserID()
	})
}

// SetOrderUserID sets the "order_user_id" field.
func (u *FractionUpsertBulk) SetOrderUserID(v uuid.UUID) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetOrderUserID(v)
	})
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateOrderUserID() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateOrderUserID()
	})
}

// SetWithdrawState sets the "withdraw_state" field.
func (u *FractionUpsertBulk) SetWithdrawState(v string) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetWithdrawState(v)
	})
}

// UpdateWithdrawState sets the "withdraw_state" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateWithdrawState() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateWithdrawState()
	})
}

// SetWithdrawTime sets the "withdraw_time" field.
func (u *FractionUpsertBulk) SetWithdrawTime(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetWithdrawTime(v)
	})
}

// AddWithdrawTime adds v to the "withdraw_time" field.
func (u *FractionUpsertBulk) AddWithdrawTime(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.AddWithdrawTime(v)
	})
}

// UpdateWithdrawTime sets the "withdraw_time" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateWithdrawTime() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateWithdrawTime()
	})
}

// SetPayTime sets the "pay_time" field.
func (u *FractionUpsertBulk) SetPayTime(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetPayTime(v)
	})
}

// AddPayTime adds v to the "pay_time" field.
func (u *FractionUpsertBulk) AddPayTime(v uint32) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.AddPayTime(v)
	})
}

// UpdatePayTime sets the "pay_time" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdatePayTime() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdatePayTime()
	})
}

// ClearPayTime clears the value of the "pay_time" field.
func (u *FractionUpsertBulk) ClearPayTime() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.ClearPayTime()
	})
}

// SetMsg sets the "msg" field.
func (u *FractionUpsertBulk) SetMsg(v string) *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.SetMsg(v)
	})
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *FractionUpsertBulk) UpdateMsg() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.UpdateMsg()
	})
}

// ClearMsg clears the value of the "msg" field.
func (u *FractionUpsertBulk) ClearMsg() *FractionUpsertBulk {
	return u.Update(func(s *FractionUpsert) {
		s.ClearMsg()
	})
}

// Exec executes the query.
func (u *FractionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FractionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FractionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FractionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
