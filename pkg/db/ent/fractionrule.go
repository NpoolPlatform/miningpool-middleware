// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionrule"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FractionRule is the model entity for the FractionRule schema.
type FractionRule struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// PoolCoinTypeID holds the value of the "pool_coin_type_id" field.
	PoolCoinTypeID uuid.UUID `json:"pool_coin_type_id,omitempty"`
	// WithdrawInterval holds the value of the "withdraw_interval" field.
	WithdrawInterval uint32 `json:"withdraw_interval,omitempty"`
	// MinAmount holds the value of the "min_amount" field.
	MinAmount decimal.Decimal `json:"min_amount,omitempty"`
	// WithdrawRate holds the value of the "withdraw_rate" field.
	WithdrawRate decimal.Decimal `json:"withdraw_rate,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FractionRule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fractionrule.FieldMinAmount, fractionrule.FieldWithdrawRate:
			values[i] = new(decimal.Decimal)
		case fractionrule.FieldID, fractionrule.FieldCreatedAt, fractionrule.FieldUpdatedAt, fractionrule.FieldDeletedAt, fractionrule.FieldWithdrawInterval:
			values[i] = new(sql.NullInt64)
		case fractionrule.FieldEntID, fractionrule.FieldPoolCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FractionRule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FractionRule fields.
func (fr *FractionRule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fractionrule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fr.ID = uint32(value.Int64)
		case fractionrule.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fr.CreatedAt = uint32(value.Int64)
			}
		case fractionrule.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fr.UpdatedAt = uint32(value.Int64)
			}
		case fractionrule.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fr.DeletedAt = uint32(value.Int64)
			}
		case fractionrule.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				fr.EntID = *value
			}
		case fractionrule.FieldPoolCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field pool_coin_type_id", values[i])
			} else if value != nil {
				fr.PoolCoinTypeID = *value
			}
		case fractionrule.FieldWithdrawInterval:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_interval", values[i])
			} else if value.Valid {
				fr.WithdrawInterval = uint32(value.Int64)
			}
		case fractionrule.FieldMinAmount:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field min_amount", values[i])
			} else if value != nil {
				fr.MinAmount = *value
			}
		case fractionrule.FieldWithdrawRate:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_rate", values[i])
			} else if value != nil {
				fr.WithdrawRate = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FractionRule.
// Note that you need to call FractionRule.Unwrap() before calling this method if this FractionRule
// was returned from a transaction, and the transaction was committed or rolled back.
func (fr *FractionRule) Update() *FractionRuleUpdateOne {
	return (&FractionRuleClient{config: fr.config}).UpdateOne(fr)
}

// Unwrap unwraps the FractionRule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fr *FractionRule) Unwrap() *FractionRule {
	_tx, ok := fr.config.driver.(*txDriver)
	if !ok {
		panic("ent: FractionRule is not a transactional entity")
	}
	fr.config.driver = _tx.drv
	return fr
}

// String implements the fmt.Stringer.
func (fr *FractionRule) String() string {
	var builder strings.Builder
	builder.WriteString("FractionRule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fr.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fr.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fr.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.EntID))
	builder.WriteString(", ")
	builder.WriteString("pool_coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", fr.PoolCoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("withdraw_interval=")
	builder.WriteString(fmt.Sprintf("%v", fr.WithdrawInterval))
	builder.WriteString(", ")
	builder.WriteString("min_amount=")
	builder.WriteString(fmt.Sprintf("%v", fr.MinAmount))
	builder.WriteString(", ")
	builder.WriteString("withdraw_rate=")
	builder.WriteString(fmt.Sprintf("%v", fr.WithdrawRate))
	builder.WriteByte(')')
	return builder.String()
}

// FractionRules is a parsable slice of FractionRule.
type FractionRules []*FractionRule

func (fr FractionRules) config(cfg config) {
	for _i := range fr {
		fr[_i].config = cfg
	}
}
