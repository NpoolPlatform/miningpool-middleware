// Code generated by ent, DO NOT EDIT.

package fractionrule

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// PoolCoinTypeID applies equality check predicate on the "pool_coin_type_id" field. It's identical to PoolCoinTypeIDEQ.
func PoolCoinTypeID(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoolCoinTypeID), v))
	})
}

// WithdrawInterval applies equality check predicate on the "withdraw_interval" field. It's identical to WithdrawIntervalEQ.
func WithdrawInterval(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawInterval), v))
	})
}

// MinAmount applies equality check predicate on the "min_amount" field. It's identical to MinAmountEQ.
func MinAmount(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinAmount), v))
	})
}

// PayoutThreshold applies equality check predicate on the "payout_threshold" field. It's identical to PayoutThresholdEQ.
func PayoutThreshold(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayoutThreshold), v))
	})
}

// WithdrawRate applies equality check predicate on the "withdraw_rate" field. It's identical to WithdrawRateEQ.
func WithdrawRate(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawRate), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// PoolCoinTypeIDEQ applies the EQ predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDEQ(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoolCoinTypeID), v))
	})
}

// PoolCoinTypeIDNEQ applies the NEQ predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDNEQ(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoolCoinTypeID), v))
	})
}

// PoolCoinTypeIDIn applies the In predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDIn(vs ...uuid.UUID) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPoolCoinTypeID), v...))
	})
}

// PoolCoinTypeIDNotIn applies the NotIn predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDNotIn(vs ...uuid.UUID) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPoolCoinTypeID), v...))
	})
}

// PoolCoinTypeIDGT applies the GT predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDGT(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoolCoinTypeID), v))
	})
}

// PoolCoinTypeIDGTE applies the GTE predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDGTE(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoolCoinTypeID), v))
	})
}

// PoolCoinTypeIDLT applies the LT predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDLT(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoolCoinTypeID), v))
	})
}

// PoolCoinTypeIDLTE applies the LTE predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDLTE(v uuid.UUID) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoolCoinTypeID), v))
	})
}

// PoolCoinTypeIDIsNil applies the IsNil predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDIsNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPoolCoinTypeID)))
	})
}

// PoolCoinTypeIDNotNil applies the NotNil predicate on the "pool_coin_type_id" field.
func PoolCoinTypeIDNotNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPoolCoinTypeID)))
	})
}

// WithdrawIntervalEQ applies the EQ predicate on the "withdraw_interval" field.
func WithdrawIntervalEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawInterval), v))
	})
}

// WithdrawIntervalNEQ applies the NEQ predicate on the "withdraw_interval" field.
func WithdrawIntervalNEQ(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWithdrawInterval), v))
	})
}

// WithdrawIntervalIn applies the In predicate on the "withdraw_interval" field.
func WithdrawIntervalIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWithdrawInterval), v...))
	})
}

// WithdrawIntervalNotIn applies the NotIn predicate on the "withdraw_interval" field.
func WithdrawIntervalNotIn(vs ...uint32) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWithdrawInterval), v...))
	})
}

// WithdrawIntervalGT applies the GT predicate on the "withdraw_interval" field.
func WithdrawIntervalGT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWithdrawInterval), v))
	})
}

// WithdrawIntervalGTE applies the GTE predicate on the "withdraw_interval" field.
func WithdrawIntervalGTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWithdrawInterval), v))
	})
}

// WithdrawIntervalLT applies the LT predicate on the "withdraw_interval" field.
func WithdrawIntervalLT(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWithdrawInterval), v))
	})
}

// WithdrawIntervalLTE applies the LTE predicate on the "withdraw_interval" field.
func WithdrawIntervalLTE(v uint32) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWithdrawInterval), v))
	})
}

// WithdrawIntervalIsNil applies the IsNil predicate on the "withdraw_interval" field.
func WithdrawIntervalIsNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWithdrawInterval)))
	})
}

// WithdrawIntervalNotNil applies the NotNil predicate on the "withdraw_interval" field.
func WithdrawIntervalNotNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWithdrawInterval)))
	})
}

// MinAmountEQ applies the EQ predicate on the "min_amount" field.
func MinAmountEQ(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinAmount), v))
	})
}

// MinAmountNEQ applies the NEQ predicate on the "min_amount" field.
func MinAmountNEQ(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinAmount), v))
	})
}

// MinAmountIn applies the In predicate on the "min_amount" field.
func MinAmountIn(vs ...decimal.Decimal) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinAmount), v...))
	})
}

// MinAmountNotIn applies the NotIn predicate on the "min_amount" field.
func MinAmountNotIn(vs ...decimal.Decimal) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinAmount), v...))
	})
}

// MinAmountGT applies the GT predicate on the "min_amount" field.
func MinAmountGT(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinAmount), v))
	})
}

// MinAmountGTE applies the GTE predicate on the "min_amount" field.
func MinAmountGTE(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinAmount), v))
	})
}

// MinAmountLT applies the LT predicate on the "min_amount" field.
func MinAmountLT(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinAmount), v))
	})
}

// MinAmountLTE applies the LTE predicate on the "min_amount" field.
func MinAmountLTE(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinAmount), v))
	})
}

// MinAmountIsNil applies the IsNil predicate on the "min_amount" field.
func MinAmountIsNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinAmount)))
	})
}

// MinAmountNotNil applies the NotNil predicate on the "min_amount" field.
func MinAmountNotNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinAmount)))
	})
}

// PayoutThresholdEQ applies the EQ predicate on the "payout_threshold" field.
func PayoutThresholdEQ(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPayoutThreshold), v))
	})
}

// PayoutThresholdNEQ applies the NEQ predicate on the "payout_threshold" field.
func PayoutThresholdNEQ(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPayoutThreshold), v))
	})
}

// PayoutThresholdIn applies the In predicate on the "payout_threshold" field.
func PayoutThresholdIn(vs ...decimal.Decimal) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPayoutThreshold), v...))
	})
}

// PayoutThresholdNotIn applies the NotIn predicate on the "payout_threshold" field.
func PayoutThresholdNotIn(vs ...decimal.Decimal) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPayoutThreshold), v...))
	})
}

// PayoutThresholdGT applies the GT predicate on the "payout_threshold" field.
func PayoutThresholdGT(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPayoutThreshold), v))
	})
}

// PayoutThresholdGTE applies the GTE predicate on the "payout_threshold" field.
func PayoutThresholdGTE(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPayoutThreshold), v))
	})
}

// PayoutThresholdLT applies the LT predicate on the "payout_threshold" field.
func PayoutThresholdLT(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPayoutThreshold), v))
	})
}

// PayoutThresholdLTE applies the LTE predicate on the "payout_threshold" field.
func PayoutThresholdLTE(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPayoutThreshold), v))
	})
}

// PayoutThresholdIsNil applies the IsNil predicate on the "payout_threshold" field.
func PayoutThresholdIsNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPayoutThreshold)))
	})
}

// PayoutThresholdNotNil applies the NotNil predicate on the "payout_threshold" field.
func PayoutThresholdNotNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPayoutThreshold)))
	})
}

// WithdrawRateEQ applies the EQ predicate on the "withdraw_rate" field.
func WithdrawRateEQ(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWithdrawRate), v))
	})
}

// WithdrawRateNEQ applies the NEQ predicate on the "withdraw_rate" field.
func WithdrawRateNEQ(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWithdrawRate), v))
	})
}

// WithdrawRateIn applies the In predicate on the "withdraw_rate" field.
func WithdrawRateIn(vs ...decimal.Decimal) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldWithdrawRate), v...))
	})
}

// WithdrawRateNotIn applies the NotIn predicate on the "withdraw_rate" field.
func WithdrawRateNotIn(vs ...decimal.Decimal) predicate.FractionRule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldWithdrawRate), v...))
	})
}

// WithdrawRateGT applies the GT predicate on the "withdraw_rate" field.
func WithdrawRateGT(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWithdrawRate), v))
	})
}

// WithdrawRateGTE applies the GTE predicate on the "withdraw_rate" field.
func WithdrawRateGTE(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWithdrawRate), v))
	})
}

// WithdrawRateLT applies the LT predicate on the "withdraw_rate" field.
func WithdrawRateLT(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWithdrawRate), v))
	})
}

// WithdrawRateLTE applies the LTE predicate on the "withdraw_rate" field.
func WithdrawRateLTE(v decimal.Decimal) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWithdrawRate), v))
	})
}

// WithdrawRateIsNil applies the IsNil predicate on the "withdraw_rate" field.
func WithdrawRateIsNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldWithdrawRate)))
	})
}

// WithdrawRateNotNil applies the NotNil predicate on the "withdraw_rate" field.
func WithdrawRateNotNil() predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldWithdrawRate)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FractionRule) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FractionRule) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FractionRule) predicate.FractionRule {
	return predicate.FractionRule(func(s *sql.Selector) {
		p(s.Not())
	})
}
