// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionrule"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// FractionRuleUpdate is the builder for updating FractionRule entities.
type FractionRuleUpdate struct {
	config
	hooks     []Hook
	mutation  *FractionRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FractionRuleUpdate builder.
func (fru *FractionRuleUpdate) Where(ps ...predicate.FractionRule) *FractionRuleUpdate {
	fru.mutation.Where(ps...)
	return fru
}

// SetCreatedAt sets the "created_at" field.
func (fru *FractionRuleUpdate) SetCreatedAt(u uint32) *FractionRuleUpdate {
	fru.mutation.ResetCreatedAt()
	fru.mutation.SetCreatedAt(u)
	return fru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fru *FractionRuleUpdate) SetNillableCreatedAt(u *uint32) *FractionRuleUpdate {
	if u != nil {
		fru.SetCreatedAt(*u)
	}
	return fru
}

// AddCreatedAt adds u to the "created_at" field.
func (fru *FractionRuleUpdate) AddCreatedAt(u int32) *FractionRuleUpdate {
	fru.mutation.AddCreatedAt(u)
	return fru
}

// SetUpdatedAt sets the "updated_at" field.
func (fru *FractionRuleUpdate) SetUpdatedAt(u uint32) *FractionRuleUpdate {
	fru.mutation.ResetUpdatedAt()
	fru.mutation.SetUpdatedAt(u)
	return fru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fru *FractionRuleUpdate) AddUpdatedAt(u int32) *FractionRuleUpdate {
	fru.mutation.AddUpdatedAt(u)
	return fru
}

// SetDeletedAt sets the "deleted_at" field.
func (fru *FractionRuleUpdate) SetDeletedAt(u uint32) *FractionRuleUpdate {
	fru.mutation.ResetDeletedAt()
	fru.mutation.SetDeletedAt(u)
	return fru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fru *FractionRuleUpdate) SetNillableDeletedAt(u *uint32) *FractionRuleUpdate {
	if u != nil {
		fru.SetDeletedAt(*u)
	}
	return fru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fru *FractionRuleUpdate) AddDeletedAt(u int32) *FractionRuleUpdate {
	fru.mutation.AddDeletedAt(u)
	return fru
}

// SetEntID sets the "ent_id" field.
func (fru *FractionRuleUpdate) SetEntID(u uuid.UUID) *FractionRuleUpdate {
	fru.mutation.SetEntID(u)
	return fru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fru *FractionRuleUpdate) SetNillableEntID(u *uuid.UUID) *FractionRuleUpdate {
	if u != nil {
		fru.SetEntID(*u)
	}
	return fru
}

// SetMiningpoolType sets the "miningpool_type" field.
func (fru *FractionRuleUpdate) SetMiningpoolType(s string) *FractionRuleUpdate {
	fru.mutation.SetMiningpoolType(s)
	return fru
}

// SetCoinType sets the "coin_type" field.
func (fru *FractionRuleUpdate) SetCoinType(s string) *FractionRuleUpdate {
	fru.mutation.SetCoinType(s)
	return fru
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (fru *FractionRuleUpdate) SetWithdrawInterval(u uint32) *FractionRuleUpdate {
	fru.mutation.ResetWithdrawInterval()
	fru.mutation.SetWithdrawInterval(u)
	return fru
}

// AddWithdrawInterval adds u to the "withdraw_interval" field.
func (fru *FractionRuleUpdate) AddWithdrawInterval(u int32) *FractionRuleUpdate {
	fru.mutation.AddWithdrawInterval(u)
	return fru
}

// SetMinAmount sets the "min_amount" field.
func (fru *FractionRuleUpdate) SetMinAmount(f float32) *FractionRuleUpdate {
	fru.mutation.ResetMinAmount()
	fru.mutation.SetMinAmount(f)
	return fru
}

// AddMinAmount adds f to the "min_amount" field.
func (fru *FractionRuleUpdate) AddMinAmount(f float32) *FractionRuleUpdate {
	fru.mutation.AddMinAmount(f)
	return fru
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (fru *FractionRuleUpdate) SetWithdrawRate(f float32) *FractionRuleUpdate {
	fru.mutation.ResetWithdrawRate()
	fru.mutation.SetWithdrawRate(f)
	return fru
}

// AddWithdrawRate adds f to the "withdraw_rate" field.
func (fru *FractionRuleUpdate) AddWithdrawRate(f float32) *FractionRuleUpdate {
	fru.mutation.AddWithdrawRate(f)
	return fru
}

// Mutation returns the FractionRuleMutation object of the builder.
func (fru *FractionRuleUpdate) Mutation() *FractionRuleMutation {
	return fru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fru *FractionRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fru.defaults(); err != nil {
		return 0, err
	}
	if len(fru.hooks) == 0 {
		affected, err = fru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FractionRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fru.mutation = mutation
			affected, err = fru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fru.hooks) - 1; i >= 0; i-- {
			if fru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fru *FractionRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := fru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fru *FractionRuleUpdate) Exec(ctx context.Context) error {
	_, err := fru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fru *FractionRuleUpdate) ExecX(ctx context.Context) {
	if err := fru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fru *FractionRuleUpdate) defaults() error {
	if _, ok := fru.mutation.UpdatedAt(); !ok {
		if fractionrule.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionrule.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fractionrule.UpdateDefaultUpdatedAt()
		fru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fru *FractionRuleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FractionRuleUpdate {
	fru.modifiers = append(fru.modifiers, modifiers...)
	return fru
}

func (fru *FractionRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fractionrule.Table,
			Columns: fractionrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionrule.FieldID,
			},
		},
	}
	if ps := fru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldCreatedAt,
		})
	}
	if value, ok := fru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldCreatedAt,
		})
	}
	if value, ok := fru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldUpdatedAt,
		})
	}
	if value, ok := fru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldUpdatedAt,
		})
	}
	if value, ok := fru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldDeletedAt,
		})
	}
	if value, ok := fru.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldDeletedAt,
		})
	}
	if value, ok := fru.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionrule.FieldEntID,
		})
	}
	if value, ok := fru.mutation.MiningpoolType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fractionrule.FieldMiningpoolType,
		})
	}
	if value, ok := fru.mutation.CoinType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fractionrule.FieldCoinType,
		})
	}
	if value, ok := fru.mutation.WithdrawInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fru.mutation.AddedWithdrawInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fru.mutation.MinAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldMinAmount,
		})
	}
	if value, ok := fru.mutation.AddedMinAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldMinAmount,
		})
	}
	if value, ok := fru.mutation.WithdrawRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldWithdrawRate,
		})
	}
	if value, ok := fru.mutation.AddedWithdrawRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldWithdrawRate,
		})
	}
	_spec.Modifiers = fru.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, fru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fractionrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FractionRuleUpdateOne is the builder for updating a single FractionRule entity.
type FractionRuleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FractionRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fruo *FractionRuleUpdateOne) SetCreatedAt(u uint32) *FractionRuleUpdateOne {
	fruo.mutation.ResetCreatedAt()
	fruo.mutation.SetCreatedAt(u)
	return fruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fruo *FractionRuleUpdateOne) SetNillableCreatedAt(u *uint32) *FractionRuleUpdateOne {
	if u != nil {
		fruo.SetCreatedAt(*u)
	}
	return fruo
}

// AddCreatedAt adds u to the "created_at" field.
func (fruo *FractionRuleUpdateOne) AddCreatedAt(u int32) *FractionRuleUpdateOne {
	fruo.mutation.AddCreatedAt(u)
	return fruo
}

// SetUpdatedAt sets the "updated_at" field.
func (fruo *FractionRuleUpdateOne) SetUpdatedAt(u uint32) *FractionRuleUpdateOne {
	fruo.mutation.ResetUpdatedAt()
	fruo.mutation.SetUpdatedAt(u)
	return fruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fruo *FractionRuleUpdateOne) AddUpdatedAt(u int32) *FractionRuleUpdateOne {
	fruo.mutation.AddUpdatedAt(u)
	return fruo
}

// SetDeletedAt sets the "deleted_at" field.
func (fruo *FractionRuleUpdateOne) SetDeletedAt(u uint32) *FractionRuleUpdateOne {
	fruo.mutation.ResetDeletedAt()
	fruo.mutation.SetDeletedAt(u)
	return fruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fruo *FractionRuleUpdateOne) SetNillableDeletedAt(u *uint32) *FractionRuleUpdateOne {
	if u != nil {
		fruo.SetDeletedAt(*u)
	}
	return fruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fruo *FractionRuleUpdateOne) AddDeletedAt(u int32) *FractionRuleUpdateOne {
	fruo.mutation.AddDeletedAt(u)
	return fruo
}

// SetEntID sets the "ent_id" field.
func (fruo *FractionRuleUpdateOne) SetEntID(u uuid.UUID) *FractionRuleUpdateOne {
	fruo.mutation.SetEntID(u)
	return fruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fruo *FractionRuleUpdateOne) SetNillableEntID(u *uuid.UUID) *FractionRuleUpdateOne {
	if u != nil {
		fruo.SetEntID(*u)
	}
	return fruo
}

// SetMiningpoolType sets the "miningpool_type" field.
func (fruo *FractionRuleUpdateOne) SetMiningpoolType(s string) *FractionRuleUpdateOne {
	fruo.mutation.SetMiningpoolType(s)
	return fruo
}

// SetCoinType sets the "coin_type" field.
func (fruo *FractionRuleUpdateOne) SetCoinType(s string) *FractionRuleUpdateOne {
	fruo.mutation.SetCoinType(s)
	return fruo
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (fruo *FractionRuleUpdateOne) SetWithdrawInterval(u uint32) *FractionRuleUpdateOne {
	fruo.mutation.ResetWithdrawInterval()
	fruo.mutation.SetWithdrawInterval(u)
	return fruo
}

// AddWithdrawInterval adds u to the "withdraw_interval" field.
func (fruo *FractionRuleUpdateOne) AddWithdrawInterval(u int32) *FractionRuleUpdateOne {
	fruo.mutation.AddWithdrawInterval(u)
	return fruo
}

// SetMinAmount sets the "min_amount" field.
func (fruo *FractionRuleUpdateOne) SetMinAmount(f float32) *FractionRuleUpdateOne {
	fruo.mutation.ResetMinAmount()
	fruo.mutation.SetMinAmount(f)
	return fruo
}

// AddMinAmount adds f to the "min_amount" field.
func (fruo *FractionRuleUpdateOne) AddMinAmount(f float32) *FractionRuleUpdateOne {
	fruo.mutation.AddMinAmount(f)
	return fruo
}

// SetWithdrawRate sets the "withdraw_rate" field.
func (fruo *FractionRuleUpdateOne) SetWithdrawRate(f float32) *FractionRuleUpdateOne {
	fruo.mutation.ResetWithdrawRate()
	fruo.mutation.SetWithdrawRate(f)
	return fruo
}

// AddWithdrawRate adds f to the "withdraw_rate" field.
func (fruo *FractionRuleUpdateOne) AddWithdrawRate(f float32) *FractionRuleUpdateOne {
	fruo.mutation.AddWithdrawRate(f)
	return fruo
}

// Mutation returns the FractionRuleMutation object of the builder.
func (fruo *FractionRuleUpdateOne) Mutation() *FractionRuleMutation {
	return fruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fruo *FractionRuleUpdateOne) Select(field string, fields ...string) *FractionRuleUpdateOne {
	fruo.fields = append([]string{field}, fields...)
	return fruo
}

// Save executes the query and returns the updated FractionRule entity.
func (fruo *FractionRuleUpdateOne) Save(ctx context.Context) (*FractionRule, error) {
	var (
		err  error
		node *FractionRule
	)
	if err := fruo.defaults(); err != nil {
		return nil, err
	}
	if len(fruo.hooks) == 0 {
		node, err = fruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FractionRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fruo.mutation = mutation
			node, err = fruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fruo.hooks) - 1; i >= 0; i-- {
			if fruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FractionRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FractionRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fruo *FractionRuleUpdateOne) SaveX(ctx context.Context) *FractionRule {
	node, err := fruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fruo *FractionRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := fruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fruo *FractionRuleUpdateOne) ExecX(ctx context.Context) {
	if err := fruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fruo *FractionRuleUpdateOne) defaults() error {
	if _, ok := fruo.mutation.UpdatedAt(); !ok {
		if fractionrule.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionrule.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fractionrule.UpdateDefaultUpdatedAt()
		fruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fruo *FractionRuleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FractionRuleUpdateOne {
	fruo.modifiers = append(fruo.modifiers, modifiers...)
	return fruo
}

func (fruo *FractionRuleUpdateOne) sqlSave(ctx context.Context) (_node *FractionRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fractionrule.Table,
			Columns: fractionrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionrule.FieldID,
			},
		},
	}
	id, ok := fruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FractionRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fractionrule.FieldID)
		for _, f := range fields {
			if !fractionrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fractionrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldCreatedAt,
		})
	}
	if value, ok := fruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldCreatedAt,
		})
	}
	if value, ok := fruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldUpdatedAt,
		})
	}
	if value, ok := fruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldUpdatedAt,
		})
	}
	if value, ok := fruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldDeletedAt,
		})
	}
	if value, ok := fruo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldDeletedAt,
		})
	}
	if value, ok := fruo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionrule.FieldEntID,
		})
	}
	if value, ok := fruo.mutation.MiningpoolType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fractionrule.FieldMiningpoolType,
		})
	}
	if value, ok := fruo.mutation.CoinType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fractionrule.FieldCoinType,
		})
	}
	if value, ok := fruo.mutation.WithdrawInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fruo.mutation.AddedWithdrawInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fruo.mutation.MinAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldMinAmount,
		})
	}
	if value, ok := fruo.mutation.AddedMinAmount(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldMinAmount,
		})
	}
	if value, ok := fruo.mutation.WithdrawRate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldWithdrawRate,
		})
	}
	if value, ok := fruo.mutation.AddedWithdrawRate(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: fractionrule.FieldWithdrawRate,
		})
	}
	_spec.Modifiers = fruo.modifiers
	_node = &FractionRule{config: fruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fractionrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
