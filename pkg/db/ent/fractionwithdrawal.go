// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionwithdrawal"
	"github.com/google/uuid"
)

// FractionWithdrawal is the model entity for the FractionWithdrawal schema.
type FractionWithdrawal struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// OrderUserID holds the value of the "order_user_id" field.
	OrderUserID uuid.UUID `json:"order_user_id,omitempty"`
	// CoinTypeID holds the value of the "coin_type_id" field.
	CoinTypeID uuid.UUID `json:"coin_type_id,omitempty"`
	// FractionWithdrawState holds the value of the "fraction_withdraw_state" field.
	FractionWithdrawState string `json:"fraction_withdraw_state,omitempty"`
	// WithdrawAt holds the value of the "withdraw_at" field.
	WithdrawAt uint32 `json:"withdraw_at,omitempty"`
	// PromisePayAt holds the value of the "promise_pay_at" field.
	PromisePayAt uint32 `json:"promise_pay_at,omitempty"`
	// Msg holds the value of the "msg" field.
	Msg string `json:"msg,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FractionWithdrawal) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fractionwithdrawal.FieldID, fractionwithdrawal.FieldCreatedAt, fractionwithdrawal.FieldUpdatedAt, fractionwithdrawal.FieldDeletedAt, fractionwithdrawal.FieldWithdrawAt, fractionwithdrawal.FieldPromisePayAt:
			values[i] = new(sql.NullInt64)
		case fractionwithdrawal.FieldFractionWithdrawState, fractionwithdrawal.FieldMsg:
			values[i] = new(sql.NullString)
		case fractionwithdrawal.FieldEntID, fractionwithdrawal.FieldAppID, fractionwithdrawal.FieldUserID, fractionwithdrawal.FieldOrderUserID, fractionwithdrawal.FieldCoinTypeID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FractionWithdrawal", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FractionWithdrawal fields.
func (fw *FractionWithdrawal) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fractionwithdrawal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fw.ID = uint32(value.Int64)
		case fractionwithdrawal.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fw.CreatedAt = uint32(value.Int64)
			}
		case fractionwithdrawal.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fw.UpdatedAt = uint32(value.Int64)
			}
		case fractionwithdrawal.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fw.DeletedAt = uint32(value.Int64)
			}
		case fractionwithdrawal.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				fw.EntID = *value
			}
		case fractionwithdrawal.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				fw.AppID = *value
			}
		case fractionwithdrawal.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				fw.UserID = *value
			}
		case fractionwithdrawal.FieldOrderUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field order_user_id", values[i])
			} else if value != nil {
				fw.OrderUserID = *value
			}
		case fractionwithdrawal.FieldCoinTypeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type_id", values[i])
			} else if value != nil {
				fw.CoinTypeID = *value
			}
		case fractionwithdrawal.FieldFractionWithdrawState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fraction_withdraw_state", values[i])
			} else if value.Valid {
				fw.FractionWithdrawState = value.String
			}
		case fractionwithdrawal.FieldWithdrawAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field withdraw_at", values[i])
			} else if value.Valid {
				fw.WithdrawAt = uint32(value.Int64)
			}
		case fractionwithdrawal.FieldPromisePayAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field promise_pay_at", values[i])
			} else if value.Valid {
				fw.PromisePayAt = uint32(value.Int64)
			}
		case fractionwithdrawal.FieldMsg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msg", values[i])
			} else if value.Valid {
				fw.Msg = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FractionWithdrawal.
// Note that you need to call FractionWithdrawal.Unwrap() before calling this method if this FractionWithdrawal
// was returned from a transaction, and the transaction was committed or rolled back.
func (fw *FractionWithdrawal) Update() *FractionWithdrawalUpdateOne {
	return (&FractionWithdrawalClient{config: fw.config}).UpdateOne(fw)
}

// Unwrap unwraps the FractionWithdrawal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fw *FractionWithdrawal) Unwrap() *FractionWithdrawal {
	_tx, ok := fw.config.driver.(*txDriver)
	if !ok {
		panic("ent: FractionWithdrawal is not a transactional entity")
	}
	fw.config.driver = _tx.drv
	return fw
}

// String implements the fmt.Stringer.
func (fw *FractionWithdrawal) String() string {
	var builder strings.Builder
	builder.WriteString("FractionWithdrawal(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fw.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", fw.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fw.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fw.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", fw.EntID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", fw.AppID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", fw.UserID))
	builder.WriteString(", ")
	builder.WriteString("order_user_id=")
	builder.WriteString(fmt.Sprintf("%v", fw.OrderUserID))
	builder.WriteString(", ")
	builder.WriteString("coin_type_id=")
	builder.WriteString(fmt.Sprintf("%v", fw.CoinTypeID))
	builder.WriteString(", ")
	builder.WriteString("fraction_withdraw_state=")
	builder.WriteString(fw.FractionWithdrawState)
	builder.WriteString(", ")
	builder.WriteString("withdraw_at=")
	builder.WriteString(fmt.Sprintf("%v", fw.WithdrawAt))
	builder.WriteString(", ")
	builder.WriteString("promise_pay_at=")
	builder.WriteString(fmt.Sprintf("%v", fw.PromisePayAt))
	builder.WriteString(", ")
	builder.WriteString("msg=")
	builder.WriteString(fw.Msg)
	builder.WriteByte(')')
	return builder.String()
}

// FractionWithdrawals is a parsable slice of FractionWithdrawal.
type FractionWithdrawals []*FractionWithdrawal

func (fw FractionWithdrawals) config(cfg config) {
	for _i := range fw {
		fw[_i].config = cfg
	}
}
