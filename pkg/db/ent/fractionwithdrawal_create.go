// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionwithdrawal"
	"github.com/google/uuid"
)

// FractionWithdrawalCreate is the builder for creating a FractionWithdrawal entity.
type FractionWithdrawalCreate struct {
	config
	mutation *FractionWithdrawalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fwc *FractionWithdrawalCreate) SetCreatedAt(u uint32) *FractionWithdrawalCreate {
	fwc.mutation.SetCreatedAt(u)
	return fwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableCreatedAt(u *uint32) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetCreatedAt(*u)
	}
	return fwc
}

// SetUpdatedAt sets the "updated_at" field.
func (fwc *FractionWithdrawalCreate) SetUpdatedAt(u uint32) *FractionWithdrawalCreate {
	fwc.mutation.SetUpdatedAt(u)
	return fwc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableUpdatedAt(u *uint32) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetUpdatedAt(*u)
	}
	return fwc
}

// SetDeletedAt sets the "deleted_at" field.
func (fwc *FractionWithdrawalCreate) SetDeletedAt(u uint32) *FractionWithdrawalCreate {
	fwc.mutation.SetDeletedAt(u)
	return fwc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableDeletedAt(u *uint32) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetDeletedAt(*u)
	}
	return fwc
}

// SetEntID sets the "ent_id" field.
func (fwc *FractionWithdrawalCreate) SetEntID(u uuid.UUID) *FractionWithdrawalCreate {
	fwc.mutation.SetEntID(u)
	return fwc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableEntID(u *uuid.UUID) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetEntID(*u)
	}
	return fwc
}

// SetAppID sets the "app_id" field.
func (fwc *FractionWithdrawalCreate) SetAppID(u uuid.UUID) *FractionWithdrawalCreate {
	fwc.mutation.SetAppID(u)
	return fwc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableAppID(u *uuid.UUID) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetAppID(*u)
	}
	return fwc
}

// SetUserID sets the "user_id" field.
func (fwc *FractionWithdrawalCreate) SetUserID(u uuid.UUID) *FractionWithdrawalCreate {
	fwc.mutation.SetUserID(u)
	return fwc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableUserID(u *uuid.UUID) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetUserID(*u)
	}
	return fwc
}

// SetOrderUserID sets the "order_user_id" field.
func (fwc *FractionWithdrawalCreate) SetOrderUserID(u uuid.UUID) *FractionWithdrawalCreate {
	fwc.mutation.SetOrderUserID(u)
	return fwc
}

// SetNillableOrderUserID sets the "order_user_id" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableOrderUserID(u *uuid.UUID) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetOrderUserID(*u)
	}
	return fwc
}

// SetCoinTypeID sets the "coin_type_id" field.
func (fwc *FractionWithdrawalCreate) SetCoinTypeID(u uuid.UUID) *FractionWithdrawalCreate {
	fwc.mutation.SetCoinTypeID(u)
	return fwc
}

// SetNillableCoinTypeID sets the "coin_type_id" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableCoinTypeID(u *uuid.UUID) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetCoinTypeID(*u)
	}
	return fwc
}

// SetFractionWithdrawState sets the "fraction_withdraw_state" field.
func (fwc *FractionWithdrawalCreate) SetFractionWithdrawState(s string) *FractionWithdrawalCreate {
	fwc.mutation.SetFractionWithdrawState(s)
	return fwc
}

// SetNillableFractionWithdrawState sets the "fraction_withdraw_state" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableFractionWithdrawState(s *string) *FractionWithdrawalCreate {
	if s != nil {
		fwc.SetFractionWithdrawState(*s)
	}
	return fwc
}

// SetWithdrawAt sets the "withdraw_at" field.
func (fwc *FractionWithdrawalCreate) SetWithdrawAt(u uint32) *FractionWithdrawalCreate {
	fwc.mutation.SetWithdrawAt(u)
	return fwc
}

// SetNillableWithdrawAt sets the "withdraw_at" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableWithdrawAt(u *uint32) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetWithdrawAt(*u)
	}
	return fwc
}

// SetPromisePayAt sets the "promise_pay_at" field.
func (fwc *FractionWithdrawalCreate) SetPromisePayAt(u uint32) *FractionWithdrawalCreate {
	fwc.mutation.SetPromisePayAt(u)
	return fwc
}

// SetNillablePromisePayAt sets the "promise_pay_at" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillablePromisePayAt(u *uint32) *FractionWithdrawalCreate {
	if u != nil {
		fwc.SetPromisePayAt(*u)
	}
	return fwc
}

// SetMsg sets the "msg" field.
func (fwc *FractionWithdrawalCreate) SetMsg(s string) *FractionWithdrawalCreate {
	fwc.mutation.SetMsg(s)
	return fwc
}

// SetNillableMsg sets the "msg" field if the given value is not nil.
func (fwc *FractionWithdrawalCreate) SetNillableMsg(s *string) *FractionWithdrawalCreate {
	if s != nil {
		fwc.SetMsg(*s)
	}
	return fwc
}

// SetID sets the "id" field.
func (fwc *FractionWithdrawalCreate) SetID(u uint32) *FractionWithdrawalCreate {
	fwc.mutation.SetID(u)
	return fwc
}

// Mutation returns the FractionWithdrawalMutation object of the builder.
func (fwc *FractionWithdrawalCreate) Mutation() *FractionWithdrawalMutation {
	return fwc.mutation
}

// Save creates the FractionWithdrawal in the database.
func (fwc *FractionWithdrawalCreate) Save(ctx context.Context) (*FractionWithdrawal, error) {
	var (
		err  error
		node *FractionWithdrawal
	)
	if err := fwc.defaults(); err != nil {
		return nil, err
	}
	if len(fwc.hooks) == 0 {
		if err = fwc.check(); err != nil {
			return nil, err
		}
		node, err = fwc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FractionWithdrawalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fwc.check(); err != nil {
				return nil, err
			}
			fwc.mutation = mutation
			if node, err = fwc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fwc.hooks) - 1; i >= 0; i-- {
			if fwc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fwc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fwc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FractionWithdrawal)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FractionWithdrawalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fwc *FractionWithdrawalCreate) SaveX(ctx context.Context) *FractionWithdrawal {
	v, err := fwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fwc *FractionWithdrawalCreate) Exec(ctx context.Context) error {
	_, err := fwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwc *FractionWithdrawalCreate) ExecX(ctx context.Context) {
	if err := fwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fwc *FractionWithdrawalCreate) defaults() error {
	if _, ok := fwc.mutation.CreatedAt(); !ok {
		if fractionwithdrawal.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultCreatedAt()
		fwc.mutation.SetCreatedAt(v)
	}
	if _, ok := fwc.mutation.UpdatedAt(); !ok {
		if fractionwithdrawal.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultUpdatedAt()
		fwc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fwc.mutation.DeletedAt(); !ok {
		if fractionwithdrawal.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultDeletedAt()
		fwc.mutation.SetDeletedAt(v)
	}
	if _, ok := fwc.mutation.EntID(); !ok {
		if fractionwithdrawal.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultEntID()
		fwc.mutation.SetEntID(v)
	}
	if _, ok := fwc.mutation.AppID(); !ok {
		if fractionwithdrawal.DefaultAppID == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultAppID (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultAppID()
		fwc.mutation.SetAppID(v)
	}
	if _, ok := fwc.mutation.UserID(); !ok {
		if fractionwithdrawal.DefaultUserID == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultUserID (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultUserID()
		fwc.mutation.SetUserID(v)
	}
	if _, ok := fwc.mutation.OrderUserID(); !ok {
		if fractionwithdrawal.DefaultOrderUserID == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultOrderUserID (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultOrderUserID()
		fwc.mutation.SetOrderUserID(v)
	}
	if _, ok := fwc.mutation.CoinTypeID(); !ok {
		if fractionwithdrawal.DefaultCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawal.DefaultCoinTypeID (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawal.DefaultCoinTypeID()
		fwc.mutation.SetCoinTypeID(v)
	}
	if _, ok := fwc.mutation.FractionWithdrawState(); !ok {
		v := fractionwithdrawal.DefaultFractionWithdrawState
		fwc.mutation.SetFractionWithdrawState(v)
	}
	if _, ok := fwc.mutation.WithdrawAt(); !ok {
		v := fractionwithdrawal.DefaultWithdrawAt
		fwc.mutation.SetWithdrawAt(v)
	}
	if _, ok := fwc.mutation.PromisePayAt(); !ok {
		v := fractionwithdrawal.DefaultPromisePayAt
		fwc.mutation.SetPromisePayAt(v)
	}
	if _, ok := fwc.mutation.Msg(); !ok {
		v := fractionwithdrawal.DefaultMsg
		fwc.mutation.SetMsg(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fwc *FractionWithdrawalCreate) check() error {
	if _, ok := fwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FractionWithdrawal.created_at"`)}
	}
	if _, ok := fwc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FractionWithdrawal.updated_at"`)}
	}
	if _, ok := fwc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FractionWithdrawal.deleted_at"`)}
	}
	if _, ok := fwc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "FractionWithdrawal.ent_id"`)}
	}
	return nil
}

func (fwc *FractionWithdrawalCreate) sqlSave(ctx context.Context) (*FractionWithdrawal, error) {
	_node, _spec := fwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (fwc *FractionWithdrawalCreate) createSpec() (*FractionWithdrawal, *sqlgraph.CreateSpec) {
	var (
		_node = &FractionWithdrawal{config: fwc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fractionwithdrawal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionwithdrawal.FieldID,
			},
		}
	)
	_spec.OnConflict = fwc.conflict
	if id, ok := fwc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fwc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawal.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fwc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawal.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fwc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawal.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fwc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawal.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := fwc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawal.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := fwc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawal.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := fwc.mutation.OrderUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawal.FieldOrderUserID,
		})
		_node.OrderUserID = value
	}
	if value, ok := fwc.mutation.CoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawal.FieldCoinTypeID,
		})
		_node.CoinTypeID = value
	}
	if value, ok := fwc.mutation.FractionWithdrawState(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fractionwithdrawal.FieldFractionWithdrawState,
		})
		_node.FractionWithdrawState = value
	}
	if value, ok := fwc.mutation.WithdrawAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawal.FieldWithdrawAt,
		})
		_node.WithdrawAt = value
	}
	if value, ok := fwc.mutation.PromisePayAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawal.FieldPromisePayAt,
		})
		_node.PromisePayAt = value
	}
	if value, ok := fwc.mutation.Msg(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fractionwithdrawal.FieldMsg,
		})
		_node.Msg = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FractionWithdrawal.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FractionWithdrawalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fwc *FractionWithdrawalCreate) OnConflict(opts ...sql.ConflictOption) *FractionWithdrawalUpsertOne {
	fwc.conflict = opts
	return &FractionWithdrawalUpsertOne{
		create: fwc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FractionWithdrawal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fwc *FractionWithdrawalCreate) OnConflictColumns(columns ...string) *FractionWithdrawalUpsertOne {
	fwc.conflict = append(fwc.conflict, sql.ConflictColumns(columns...))
	return &FractionWithdrawalUpsertOne{
		create: fwc,
	}
}

type (
	// FractionWithdrawalUpsertOne is the builder for "upsert"-ing
	//  one FractionWithdrawal node.
	FractionWithdrawalUpsertOne struct {
		create *FractionWithdrawalCreate
	}

	// FractionWithdrawalUpsert is the "OnConflict" setter.
	FractionWithdrawalUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FractionWithdrawalUpsert) SetCreatedAt(v uint32) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateCreatedAt() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionWithdrawalUpsert) AddCreatedAt(v uint32) *FractionWithdrawalUpsert {
	u.Add(fractionwithdrawal.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionWithdrawalUpsert) SetUpdatedAt(v uint32) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateUpdatedAt() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionWithdrawalUpsert) AddUpdatedAt(v uint32) *FractionWithdrawalUpsert {
	u.Add(fractionwithdrawal.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionWithdrawalUpsert) SetDeletedAt(v uint32) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateDeletedAt() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionWithdrawalUpsert) AddDeletedAt(v uint32) *FractionWithdrawalUpsert {
	u.Add(fractionwithdrawal.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FractionWithdrawalUpsert) SetEntID(v uuid.UUID) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateEntID() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldEntID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *FractionWithdrawalUpsert) SetAppID(v uuid.UUID) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateAppID() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *FractionWithdrawalUpsert) ClearAppID() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *FractionWithdrawalUpsert) SetUserID(v uuid.UUID) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateUserID() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *FractionWithdrawalUpsert) ClearUserID() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldUserID)
	return u
}

// SetOrderUserID sets the "order_user_id" field.
func (u *FractionWithdrawalUpsert) SetOrderUserID(v uuid.UUID) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldOrderUserID, v)
	return u
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateOrderUserID() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldOrderUserID)
	return u
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (u *FractionWithdrawalUpsert) ClearOrderUserID() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldOrderUserID)
	return u
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *FractionWithdrawalUpsert) SetCoinTypeID(v uuid.UUID) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldCoinTypeID, v)
	return u
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateCoinTypeID() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldCoinTypeID)
	return u
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *FractionWithdrawalUpsert) ClearCoinTypeID() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldCoinTypeID)
	return u
}

// SetFractionWithdrawState sets the "fraction_withdraw_state" field.
func (u *FractionWithdrawalUpsert) SetFractionWithdrawState(v string) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldFractionWithdrawState, v)
	return u
}

// UpdateFractionWithdrawState sets the "fraction_withdraw_state" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateFractionWithdrawState() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldFractionWithdrawState)
	return u
}

// ClearFractionWithdrawState clears the value of the "fraction_withdraw_state" field.
func (u *FractionWithdrawalUpsert) ClearFractionWithdrawState() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldFractionWithdrawState)
	return u
}

// SetWithdrawAt sets the "withdraw_at" field.
func (u *FractionWithdrawalUpsert) SetWithdrawAt(v uint32) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldWithdrawAt, v)
	return u
}

// UpdateWithdrawAt sets the "withdraw_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateWithdrawAt() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldWithdrawAt)
	return u
}

// AddWithdrawAt adds v to the "withdraw_at" field.
func (u *FractionWithdrawalUpsert) AddWithdrawAt(v uint32) *FractionWithdrawalUpsert {
	u.Add(fractionwithdrawal.FieldWithdrawAt, v)
	return u
}

// ClearWithdrawAt clears the value of the "withdraw_at" field.
func (u *FractionWithdrawalUpsert) ClearWithdrawAt() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldWithdrawAt)
	return u
}

// SetPromisePayAt sets the "promise_pay_at" field.
func (u *FractionWithdrawalUpsert) SetPromisePayAt(v uint32) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldPromisePayAt, v)
	return u
}

// UpdatePromisePayAt sets the "promise_pay_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdatePromisePayAt() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldPromisePayAt)
	return u
}

// AddPromisePayAt adds v to the "promise_pay_at" field.
func (u *FractionWithdrawalUpsert) AddPromisePayAt(v uint32) *FractionWithdrawalUpsert {
	u.Add(fractionwithdrawal.FieldPromisePayAt, v)
	return u
}

// ClearPromisePayAt clears the value of the "promise_pay_at" field.
func (u *FractionWithdrawalUpsert) ClearPromisePayAt() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldPromisePayAt)
	return u
}

// SetMsg sets the "msg" field.
func (u *FractionWithdrawalUpsert) SetMsg(v string) *FractionWithdrawalUpsert {
	u.Set(fractionwithdrawal.FieldMsg, v)
	return u
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *FractionWithdrawalUpsert) UpdateMsg() *FractionWithdrawalUpsert {
	u.SetExcluded(fractionwithdrawal.FieldMsg)
	return u
}

// ClearMsg clears the value of the "msg" field.
func (u *FractionWithdrawalUpsert) ClearMsg() *FractionWithdrawalUpsert {
	u.SetNull(fractionwithdrawal.FieldMsg)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FractionWithdrawal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fractionwithdrawal.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FractionWithdrawalUpsertOne) UpdateNewValues() *FractionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fractionwithdrawal.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FractionWithdrawal.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FractionWithdrawalUpsertOne) Ignore() *FractionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FractionWithdrawalUpsertOne) DoNothing() *FractionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FractionWithdrawalCreate.OnConflict
// documentation for more info.
func (u *FractionWithdrawalUpsertOne) Update(set func(*FractionWithdrawalUpsert)) *FractionWithdrawalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FractionWithdrawalUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FractionWithdrawalUpsertOne) SetCreatedAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionWithdrawalUpsertOne) AddCreatedAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateCreatedAt() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionWithdrawalUpsertOne) SetUpdatedAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionWithdrawalUpsertOne) AddUpdatedAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateUpdatedAt() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionWithdrawalUpsertOne) SetDeletedAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionWithdrawalUpsertOne) AddDeletedAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateDeletedAt() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FractionWithdrawalUpsertOne) SetEntID(v uuid.UUID) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateEntID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *FractionWithdrawalUpsertOne) SetAppID(v uuid.UUID) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateAppID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *FractionWithdrawalUpsertOne) ClearAppID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *FractionWithdrawalUpsertOne) SetUserID(v uuid.UUID) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateUserID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *FractionWithdrawalUpsertOne) ClearUserID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearUserID()
	})
}

// SetOrderUserID sets the "order_user_id" field.
func (u *FractionWithdrawalUpsertOne) SetOrderUserID(v uuid.UUID) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetOrderUserID(v)
	})
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateOrderUserID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateOrderUserID()
	})
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (u *FractionWithdrawalUpsertOne) ClearOrderUserID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearOrderUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *FractionWithdrawalUpsertOne) SetCoinTypeID(v uuid.UUID) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateCoinTypeID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *FractionWithdrawalUpsertOne) ClearCoinTypeID() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFractionWithdrawState sets the "fraction_withdraw_state" field.
func (u *FractionWithdrawalUpsertOne) SetFractionWithdrawState(v string) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetFractionWithdrawState(v)
	})
}

// UpdateFractionWithdrawState sets the "fraction_withdraw_state" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateFractionWithdrawState() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateFractionWithdrawState()
	})
}

// ClearFractionWithdrawState clears the value of the "fraction_withdraw_state" field.
func (u *FractionWithdrawalUpsertOne) ClearFractionWithdrawState() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearFractionWithdrawState()
	})
}

// SetWithdrawAt sets the "withdraw_at" field.
func (u *FractionWithdrawalUpsertOne) SetWithdrawAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetWithdrawAt(v)
	})
}

// AddWithdrawAt adds v to the "withdraw_at" field.
func (u *FractionWithdrawalUpsertOne) AddWithdrawAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddWithdrawAt(v)
	})
}

// UpdateWithdrawAt sets the "withdraw_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateWithdrawAt() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateWithdrawAt()
	})
}

// ClearWithdrawAt clears the value of the "withdraw_at" field.
func (u *FractionWithdrawalUpsertOne) ClearWithdrawAt() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearWithdrawAt()
	})
}

// SetPromisePayAt sets the "promise_pay_at" field.
func (u *FractionWithdrawalUpsertOne) SetPromisePayAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetPromisePayAt(v)
	})
}

// AddPromisePayAt adds v to the "promise_pay_at" field.
func (u *FractionWithdrawalUpsertOne) AddPromisePayAt(v uint32) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddPromisePayAt(v)
	})
}

// UpdatePromisePayAt sets the "promise_pay_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdatePromisePayAt() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdatePromisePayAt()
	})
}

// ClearPromisePayAt clears the value of the "promise_pay_at" field.
func (u *FractionWithdrawalUpsertOne) ClearPromisePayAt() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearPromisePayAt()
	})
}

// SetMsg sets the "msg" field.
func (u *FractionWithdrawalUpsertOne) SetMsg(v string) *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetMsg(v)
	})
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertOne) UpdateMsg() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateMsg()
	})
}

// ClearMsg clears the value of the "msg" field.
func (u *FractionWithdrawalUpsertOne) ClearMsg() *FractionWithdrawalUpsertOne {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearMsg()
	})
}

// Exec executes the query.
func (u *FractionWithdrawalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FractionWithdrawalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FractionWithdrawalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FractionWithdrawalUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FractionWithdrawalUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FractionWithdrawalCreateBulk is the builder for creating many FractionWithdrawal entities in bulk.
type FractionWithdrawalCreateBulk struct {
	config
	builders []*FractionWithdrawalCreate
	conflict []sql.ConflictOption
}

// Save creates the FractionWithdrawal entities in the database.
func (fwcb *FractionWithdrawalCreateBulk) Save(ctx context.Context) ([]*FractionWithdrawal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fwcb.builders))
	nodes := make([]*FractionWithdrawal, len(fwcb.builders))
	mutators := make([]Mutator, len(fwcb.builders))
	for i := range fwcb.builders {
		func(i int, root context.Context) {
			builder := fwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FractionWithdrawalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fwcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fwcb *FractionWithdrawalCreateBulk) SaveX(ctx context.Context) []*FractionWithdrawal {
	v, err := fwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fwcb *FractionWithdrawalCreateBulk) Exec(ctx context.Context) error {
	_, err := fwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwcb *FractionWithdrawalCreateBulk) ExecX(ctx context.Context) {
	if err := fwcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FractionWithdrawal.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FractionWithdrawalUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fwcb *FractionWithdrawalCreateBulk) OnConflict(opts ...sql.ConflictOption) *FractionWithdrawalUpsertBulk {
	fwcb.conflict = opts
	return &FractionWithdrawalUpsertBulk{
		create: fwcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FractionWithdrawal.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fwcb *FractionWithdrawalCreateBulk) OnConflictColumns(columns ...string) *FractionWithdrawalUpsertBulk {
	fwcb.conflict = append(fwcb.conflict, sql.ConflictColumns(columns...))
	return &FractionWithdrawalUpsertBulk{
		create: fwcb,
	}
}

// FractionWithdrawalUpsertBulk is the builder for "upsert"-ing
// a bulk of FractionWithdrawal nodes.
type FractionWithdrawalUpsertBulk struct {
	create *FractionWithdrawalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FractionWithdrawal.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fractionwithdrawal.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FractionWithdrawalUpsertBulk) UpdateNewValues() *FractionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fractionwithdrawal.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FractionWithdrawal.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FractionWithdrawalUpsertBulk) Ignore() *FractionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FractionWithdrawalUpsertBulk) DoNothing() *FractionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FractionWithdrawalCreateBulk.OnConflict
// documentation for more info.
func (u *FractionWithdrawalUpsertBulk) Update(set func(*FractionWithdrawalUpsert)) *FractionWithdrawalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FractionWithdrawalUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FractionWithdrawalUpsertBulk) SetCreatedAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionWithdrawalUpsertBulk) AddCreatedAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateCreatedAt() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionWithdrawalUpsertBulk) SetUpdatedAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionWithdrawalUpsertBulk) AddUpdatedAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateUpdatedAt() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionWithdrawalUpsertBulk) SetDeletedAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionWithdrawalUpsertBulk) AddDeletedAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateDeletedAt() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FractionWithdrawalUpsertBulk) SetEntID(v uuid.UUID) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateEntID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateEntID()
	})
}

// SetAppID sets the "app_id" field.
func (u *FractionWithdrawalUpsertBulk) SetAppID(v uuid.UUID) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateAppID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *FractionWithdrawalUpsertBulk) ClearAppID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *FractionWithdrawalUpsertBulk) SetUserID(v uuid.UUID) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateUserID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *FractionWithdrawalUpsertBulk) ClearUserID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearUserID()
	})
}

// SetOrderUserID sets the "order_user_id" field.
func (u *FractionWithdrawalUpsertBulk) SetOrderUserID(v uuid.UUID) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetOrderUserID(v)
	})
}

// UpdateOrderUserID sets the "order_user_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateOrderUserID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateOrderUserID()
	})
}

// ClearOrderUserID clears the value of the "order_user_id" field.
func (u *FractionWithdrawalUpsertBulk) ClearOrderUserID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearOrderUserID()
	})
}

// SetCoinTypeID sets the "coin_type_id" field.
func (u *FractionWithdrawalUpsertBulk) SetCoinTypeID(v uuid.UUID) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetCoinTypeID(v)
	})
}

// UpdateCoinTypeID sets the "coin_type_id" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateCoinTypeID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateCoinTypeID()
	})
}

// ClearCoinTypeID clears the value of the "coin_type_id" field.
func (u *FractionWithdrawalUpsertBulk) ClearCoinTypeID() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearCoinTypeID()
	})
}

// SetFractionWithdrawState sets the "fraction_withdraw_state" field.
func (u *FractionWithdrawalUpsertBulk) SetFractionWithdrawState(v string) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetFractionWithdrawState(v)
	})
}

// UpdateFractionWithdrawState sets the "fraction_withdraw_state" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateFractionWithdrawState() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateFractionWithdrawState()
	})
}

// ClearFractionWithdrawState clears the value of the "fraction_withdraw_state" field.
func (u *FractionWithdrawalUpsertBulk) ClearFractionWithdrawState() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearFractionWithdrawState()
	})
}

// SetWithdrawAt sets the "withdraw_at" field.
func (u *FractionWithdrawalUpsertBulk) SetWithdrawAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetWithdrawAt(v)
	})
}

// AddWithdrawAt adds v to the "withdraw_at" field.
func (u *FractionWithdrawalUpsertBulk) AddWithdrawAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddWithdrawAt(v)
	})
}

// UpdateWithdrawAt sets the "withdraw_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateWithdrawAt() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateWithdrawAt()
	})
}

// ClearWithdrawAt clears the value of the "withdraw_at" field.
func (u *FractionWithdrawalUpsertBulk) ClearWithdrawAt() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearWithdrawAt()
	})
}

// SetPromisePayAt sets the "promise_pay_at" field.
func (u *FractionWithdrawalUpsertBulk) SetPromisePayAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetPromisePayAt(v)
	})
}

// AddPromisePayAt adds v to the "promise_pay_at" field.
func (u *FractionWithdrawalUpsertBulk) AddPromisePayAt(v uint32) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.AddPromisePayAt(v)
	})
}

// UpdatePromisePayAt sets the "promise_pay_at" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdatePromisePayAt() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdatePromisePayAt()
	})
}

// ClearPromisePayAt clears the value of the "promise_pay_at" field.
func (u *FractionWithdrawalUpsertBulk) ClearPromisePayAt() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearPromisePayAt()
	})
}

// SetMsg sets the "msg" field.
func (u *FractionWithdrawalUpsertBulk) SetMsg(v string) *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.SetMsg(v)
	})
}

// UpdateMsg sets the "msg" field to the value that was provided on create.
func (u *FractionWithdrawalUpsertBulk) UpdateMsg() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.UpdateMsg()
	})
}

// ClearMsg clears the value of the "msg" field.
func (u *FractionWithdrawalUpsertBulk) ClearMsg() *FractionWithdrawalUpsertBulk {
	return u.Update(func(s *FractionWithdrawalUpsert) {
		s.ClearMsg()
	})
}

// Exec executes the query.
func (u *FractionWithdrawalUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FractionWithdrawalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FractionWithdrawalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FractionWithdrawalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
