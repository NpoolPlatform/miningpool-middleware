// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionwithdrawalrule"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FractionWithdrawalRuleCreate is the builder for creating a FractionWithdrawalRule entity.
type FractionWithdrawalRuleCreate struct {
	config
	mutation *FractionWithdrawalRuleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fwrc *FractionWithdrawalRuleCreate) SetCreatedAt(u uint32) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetCreatedAt(u)
	return fwrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillableCreatedAt(u *uint32) *FractionWithdrawalRuleCreate {
	if u != nil {
		fwrc.SetCreatedAt(*u)
	}
	return fwrc
}

// SetUpdatedAt sets the "updated_at" field.
func (fwrc *FractionWithdrawalRuleCreate) SetUpdatedAt(u uint32) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetUpdatedAt(u)
	return fwrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillableUpdatedAt(u *uint32) *FractionWithdrawalRuleCreate {
	if u != nil {
		fwrc.SetUpdatedAt(*u)
	}
	return fwrc
}

// SetDeletedAt sets the "deleted_at" field.
func (fwrc *FractionWithdrawalRuleCreate) SetDeletedAt(u uint32) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetDeletedAt(u)
	return fwrc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillableDeletedAt(u *uint32) *FractionWithdrawalRuleCreate {
	if u != nil {
		fwrc.SetDeletedAt(*u)
	}
	return fwrc
}

// SetEntID sets the "ent_id" field.
func (fwrc *FractionWithdrawalRuleCreate) SetEntID(u uuid.UUID) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetEntID(u)
	return fwrc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillableEntID(u *uuid.UUID) *FractionWithdrawalRuleCreate {
	if u != nil {
		fwrc.SetEntID(*u)
	}
	return fwrc
}

// SetPoolCoinTypeID sets the "pool_coin_type_id" field.
func (fwrc *FractionWithdrawalRuleCreate) SetPoolCoinTypeID(u uuid.UUID) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetPoolCoinTypeID(u)
	return fwrc
}

// SetNillablePoolCoinTypeID sets the "pool_coin_type_id" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillablePoolCoinTypeID(u *uuid.UUID) *FractionWithdrawalRuleCreate {
	if u != nil {
		fwrc.SetPoolCoinTypeID(*u)
	}
	return fwrc
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (fwrc *FractionWithdrawalRuleCreate) SetWithdrawInterval(u uint32) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetWithdrawInterval(u)
	return fwrc
}

// SetNillableWithdrawInterval sets the "withdraw_interval" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillableWithdrawInterval(u *uint32) *FractionWithdrawalRuleCreate {
	if u != nil {
		fwrc.SetWithdrawInterval(*u)
	}
	return fwrc
}

// SetLeastWithdrawalAmount sets the "least_withdrawal_amount" field.
func (fwrc *FractionWithdrawalRuleCreate) SetLeastWithdrawalAmount(d decimal.Decimal) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetLeastWithdrawalAmount(d)
	return fwrc
}

// SetNillableLeastWithdrawalAmount sets the "least_withdrawal_amount" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillableLeastWithdrawalAmount(d *decimal.Decimal) *FractionWithdrawalRuleCreate {
	if d != nil {
		fwrc.SetLeastWithdrawalAmount(*d)
	}
	return fwrc
}

// SetPayoutThreshold sets the "payout_threshold" field.
func (fwrc *FractionWithdrawalRuleCreate) SetPayoutThreshold(d decimal.Decimal) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetPayoutThreshold(d)
	return fwrc
}

// SetNillablePayoutThreshold sets the "payout_threshold" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillablePayoutThreshold(d *decimal.Decimal) *FractionWithdrawalRuleCreate {
	if d != nil {
		fwrc.SetPayoutThreshold(*d)
	}
	return fwrc
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (fwrc *FractionWithdrawalRuleCreate) SetWithdrawFee(d decimal.Decimal) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetWithdrawFee(d)
	return fwrc
}

// SetNillableWithdrawFee sets the "withdraw_fee" field if the given value is not nil.
func (fwrc *FractionWithdrawalRuleCreate) SetNillableWithdrawFee(d *decimal.Decimal) *FractionWithdrawalRuleCreate {
	if d != nil {
		fwrc.SetWithdrawFee(*d)
	}
	return fwrc
}

// SetID sets the "id" field.
func (fwrc *FractionWithdrawalRuleCreate) SetID(u uint32) *FractionWithdrawalRuleCreate {
	fwrc.mutation.SetID(u)
	return fwrc
}

// Mutation returns the FractionWithdrawalRuleMutation object of the builder.
func (fwrc *FractionWithdrawalRuleCreate) Mutation() *FractionWithdrawalRuleMutation {
	return fwrc.mutation
}

// Save creates the FractionWithdrawalRule in the database.
func (fwrc *FractionWithdrawalRuleCreate) Save(ctx context.Context) (*FractionWithdrawalRule, error) {
	var (
		err  error
		node *FractionWithdrawalRule
	)
	if err := fwrc.defaults(); err != nil {
		return nil, err
	}
	if len(fwrc.hooks) == 0 {
		if err = fwrc.check(); err != nil {
			return nil, err
		}
		node, err = fwrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FractionWithdrawalRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fwrc.check(); err != nil {
				return nil, err
			}
			fwrc.mutation = mutation
			if node, err = fwrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fwrc.hooks) - 1; i >= 0; i-- {
			if fwrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fwrc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fwrc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FractionWithdrawalRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FractionWithdrawalRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fwrc *FractionWithdrawalRuleCreate) SaveX(ctx context.Context) *FractionWithdrawalRule {
	v, err := fwrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fwrc *FractionWithdrawalRuleCreate) Exec(ctx context.Context) error {
	_, err := fwrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwrc *FractionWithdrawalRuleCreate) ExecX(ctx context.Context) {
	if err := fwrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fwrc *FractionWithdrawalRuleCreate) defaults() error {
	if _, ok := fwrc.mutation.CreatedAt(); !ok {
		if fractionwithdrawalrule.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawalrule.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawalrule.DefaultCreatedAt()
		fwrc.mutation.SetCreatedAt(v)
	}
	if _, ok := fwrc.mutation.UpdatedAt(); !ok {
		if fractionwithdrawalrule.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawalrule.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawalrule.DefaultUpdatedAt()
		fwrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fwrc.mutation.DeletedAt(); !ok {
		if fractionwithdrawalrule.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawalrule.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawalrule.DefaultDeletedAt()
		fwrc.mutation.SetDeletedAt(v)
	}
	if _, ok := fwrc.mutation.EntID(); !ok {
		if fractionwithdrawalrule.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawalrule.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawalrule.DefaultEntID()
		fwrc.mutation.SetEntID(v)
	}
	if _, ok := fwrc.mutation.PoolCoinTypeID(); !ok {
		if fractionwithdrawalrule.DefaultPoolCoinTypeID == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawalrule.DefaultPoolCoinTypeID (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawalrule.DefaultPoolCoinTypeID()
		fwrc.mutation.SetPoolCoinTypeID(v)
	}
	if _, ok := fwrc.mutation.WithdrawInterval(); !ok {
		v := fractionwithdrawalrule.DefaultWithdrawInterval
		fwrc.mutation.SetWithdrawInterval(v)
	}
	if _, ok := fwrc.mutation.LeastWithdrawalAmount(); !ok {
		v := fractionwithdrawalrule.DefaultLeastWithdrawalAmount
		fwrc.mutation.SetLeastWithdrawalAmount(v)
	}
	if _, ok := fwrc.mutation.PayoutThreshold(); !ok {
		v := fractionwithdrawalrule.DefaultPayoutThreshold
		fwrc.mutation.SetPayoutThreshold(v)
	}
	if _, ok := fwrc.mutation.WithdrawFee(); !ok {
		v := fractionwithdrawalrule.DefaultWithdrawFee
		fwrc.mutation.SetWithdrawFee(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fwrc *FractionWithdrawalRuleCreate) check() error {
	if _, ok := fwrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FractionWithdrawalRule.created_at"`)}
	}
	if _, ok := fwrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FractionWithdrawalRule.updated_at"`)}
	}
	if _, ok := fwrc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "FractionWithdrawalRule.deleted_at"`)}
	}
	if _, ok := fwrc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "FractionWithdrawalRule.ent_id"`)}
	}
	return nil
}

func (fwrc *FractionWithdrawalRuleCreate) sqlSave(ctx context.Context) (*FractionWithdrawalRule, error) {
	_node, _spec := fwrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fwrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (fwrc *FractionWithdrawalRuleCreate) createSpec() (*FractionWithdrawalRule, *sqlgraph.CreateSpec) {
	var (
		_node = &FractionWithdrawalRule{config: fwrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fractionwithdrawalrule.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionwithdrawalrule.FieldID,
			},
		}
	)
	_spec.OnConflict = fwrc.conflict
	if id, ok := fwrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fwrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fwrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fwrc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fwrc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawalrule.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := fwrc.mutation.PoolCoinTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawalrule.FieldPoolCoinTypeID,
		})
		_node.PoolCoinTypeID = value
	}
	if value, ok := fwrc.mutation.WithdrawInterval(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawInterval,
		})
		_node.WithdrawInterval = value
	}
	if value, ok := fwrc.mutation.LeastWithdrawalAmount(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldLeastWithdrawalAmount,
		})
		_node.LeastWithdrawalAmount = value
	}
	if value, ok := fwrc.mutation.PayoutThreshold(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldPayoutThreshold,
		})
		_node.PayoutThreshold = value
	}
	if value, ok := fwrc.mutation.WithdrawFee(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawFee,
		})
		_node.WithdrawFee = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FractionWithdrawalRule.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FractionWithdrawalRuleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fwrc *FractionWithdrawalRuleCreate) OnConflict(opts ...sql.ConflictOption) *FractionWithdrawalRuleUpsertOne {
	fwrc.conflict = opts
	return &FractionWithdrawalRuleUpsertOne{
		create: fwrc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FractionWithdrawalRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fwrc *FractionWithdrawalRuleCreate) OnConflictColumns(columns ...string) *FractionWithdrawalRuleUpsertOne {
	fwrc.conflict = append(fwrc.conflict, sql.ConflictColumns(columns...))
	return &FractionWithdrawalRuleUpsertOne{
		create: fwrc,
	}
}

type (
	// FractionWithdrawalRuleUpsertOne is the builder for "upsert"-ing
	//  one FractionWithdrawalRule node.
	FractionWithdrawalRuleUpsertOne struct {
		create *FractionWithdrawalRuleCreate
	}

	// FractionWithdrawalRuleUpsert is the "OnConflict" setter.
	FractionWithdrawalRuleUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FractionWithdrawalRuleUpsert) SetCreatedAt(v uint32) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdateCreatedAt() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionWithdrawalRuleUpsert) AddCreatedAt(v uint32) *FractionWithdrawalRuleUpsert {
	u.Add(fractionwithdrawalrule.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionWithdrawalRuleUpsert) SetUpdatedAt(v uint32) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdateUpdatedAt() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionWithdrawalRuleUpsert) AddUpdatedAt(v uint32) *FractionWithdrawalRuleUpsert {
	u.Add(fractionwithdrawalrule.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionWithdrawalRuleUpsert) SetDeletedAt(v uint32) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdateDeletedAt() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionWithdrawalRuleUpsert) AddDeletedAt(v uint32) *FractionWithdrawalRuleUpsert {
	u.Add(fractionwithdrawalrule.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *FractionWithdrawalRuleUpsert) SetEntID(v uuid.UUID) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdateEntID() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldEntID)
	return u
}

// SetPoolCoinTypeID sets the "pool_coin_type_id" field.
func (u *FractionWithdrawalRuleUpsert) SetPoolCoinTypeID(v uuid.UUID) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldPoolCoinTypeID, v)
	return u
}

// UpdatePoolCoinTypeID sets the "pool_coin_type_id" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdatePoolCoinTypeID() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldPoolCoinTypeID)
	return u
}

// ClearPoolCoinTypeID clears the value of the "pool_coin_type_id" field.
func (u *FractionWithdrawalRuleUpsert) ClearPoolCoinTypeID() *FractionWithdrawalRuleUpsert {
	u.SetNull(fractionwithdrawalrule.FieldPoolCoinTypeID)
	return u
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsert) SetWithdrawInterval(v uint32) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldWithdrawInterval, v)
	return u
}

// UpdateWithdrawInterval sets the "withdraw_interval" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdateWithdrawInterval() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldWithdrawInterval)
	return u
}

// AddWithdrawInterval adds v to the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsert) AddWithdrawInterval(v uint32) *FractionWithdrawalRuleUpsert {
	u.Add(fractionwithdrawalrule.FieldWithdrawInterval, v)
	return u
}

// ClearWithdrawInterval clears the value of the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsert) ClearWithdrawInterval() *FractionWithdrawalRuleUpsert {
	u.SetNull(fractionwithdrawalrule.FieldWithdrawInterval)
	return u
}

// SetLeastWithdrawalAmount sets the "least_withdrawal_amount" field.
func (u *FractionWithdrawalRuleUpsert) SetLeastWithdrawalAmount(v decimal.Decimal) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldLeastWithdrawalAmount, v)
	return u
}

// UpdateLeastWithdrawalAmount sets the "least_withdrawal_amount" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdateLeastWithdrawalAmount() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldLeastWithdrawalAmount)
	return u
}

// ClearLeastWithdrawalAmount clears the value of the "least_withdrawal_amount" field.
func (u *FractionWithdrawalRuleUpsert) ClearLeastWithdrawalAmount() *FractionWithdrawalRuleUpsert {
	u.SetNull(fractionwithdrawalrule.FieldLeastWithdrawalAmount)
	return u
}

// SetPayoutThreshold sets the "payout_threshold" field.
func (u *FractionWithdrawalRuleUpsert) SetPayoutThreshold(v decimal.Decimal) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldPayoutThreshold, v)
	return u
}

// UpdatePayoutThreshold sets the "payout_threshold" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdatePayoutThreshold() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldPayoutThreshold)
	return u
}

// ClearPayoutThreshold clears the value of the "payout_threshold" field.
func (u *FractionWithdrawalRuleUpsert) ClearPayoutThreshold() *FractionWithdrawalRuleUpsert {
	u.SetNull(fractionwithdrawalrule.FieldPayoutThreshold)
	return u
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (u *FractionWithdrawalRuleUpsert) SetWithdrawFee(v decimal.Decimal) *FractionWithdrawalRuleUpsert {
	u.Set(fractionwithdrawalrule.FieldWithdrawFee, v)
	return u
}

// UpdateWithdrawFee sets the "withdraw_fee" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsert) UpdateWithdrawFee() *FractionWithdrawalRuleUpsert {
	u.SetExcluded(fractionwithdrawalrule.FieldWithdrawFee)
	return u
}

// ClearWithdrawFee clears the value of the "withdraw_fee" field.
func (u *FractionWithdrawalRuleUpsert) ClearWithdrawFee() *FractionWithdrawalRuleUpsert {
	u.SetNull(fractionwithdrawalrule.FieldWithdrawFee)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FractionWithdrawalRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fractionwithdrawalrule.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FractionWithdrawalRuleUpsertOne) UpdateNewValues() *FractionWithdrawalRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(fractionwithdrawalrule.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FractionWithdrawalRule.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FractionWithdrawalRuleUpsertOne) Ignore() *FractionWithdrawalRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FractionWithdrawalRuleUpsertOne) DoNothing() *FractionWithdrawalRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FractionWithdrawalRuleCreate.OnConflict
// documentation for more info.
func (u *FractionWithdrawalRuleUpsertOne) Update(set func(*FractionWithdrawalRuleUpsert)) *FractionWithdrawalRuleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FractionWithdrawalRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FractionWithdrawalRuleUpsertOne) SetCreatedAt(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionWithdrawalRuleUpsertOne) AddCreatedAt(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdateCreatedAt() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionWithdrawalRuleUpsertOne) SetUpdatedAt(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionWithdrawalRuleUpsertOne) AddUpdatedAt(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdateUpdatedAt() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionWithdrawalRuleUpsertOne) SetDeletedAt(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionWithdrawalRuleUpsertOne) AddDeletedAt(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdateDeletedAt() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FractionWithdrawalRuleUpsertOne) SetEntID(v uuid.UUID) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdateEntID() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateEntID()
	})
}

// SetPoolCoinTypeID sets the "pool_coin_type_id" field.
func (u *FractionWithdrawalRuleUpsertOne) SetPoolCoinTypeID(v uuid.UUID) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetPoolCoinTypeID(v)
	})
}

// UpdatePoolCoinTypeID sets the "pool_coin_type_id" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdatePoolCoinTypeID() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdatePoolCoinTypeID()
	})
}

// ClearPoolCoinTypeID clears the value of the "pool_coin_type_id" field.
func (u *FractionWithdrawalRuleUpsertOne) ClearPoolCoinTypeID() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearPoolCoinTypeID()
	})
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsertOne) SetWithdrawInterval(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetWithdrawInterval(v)
	})
}

// AddWithdrawInterval adds v to the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsertOne) AddWithdrawInterval(v uint32) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddWithdrawInterval(v)
	})
}

// UpdateWithdrawInterval sets the "withdraw_interval" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdateWithdrawInterval() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateWithdrawInterval()
	})
}

// ClearWithdrawInterval clears the value of the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsertOne) ClearWithdrawInterval() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearWithdrawInterval()
	})
}

// SetLeastWithdrawalAmount sets the "least_withdrawal_amount" field.
func (u *FractionWithdrawalRuleUpsertOne) SetLeastWithdrawalAmount(v decimal.Decimal) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetLeastWithdrawalAmount(v)
	})
}

// UpdateLeastWithdrawalAmount sets the "least_withdrawal_amount" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdateLeastWithdrawalAmount() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateLeastWithdrawalAmount()
	})
}

// ClearLeastWithdrawalAmount clears the value of the "least_withdrawal_amount" field.
func (u *FractionWithdrawalRuleUpsertOne) ClearLeastWithdrawalAmount() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearLeastWithdrawalAmount()
	})
}

// SetPayoutThreshold sets the "payout_threshold" field.
func (u *FractionWithdrawalRuleUpsertOne) SetPayoutThreshold(v decimal.Decimal) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetPayoutThreshold(v)
	})
}

// UpdatePayoutThreshold sets the "payout_threshold" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdatePayoutThreshold() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdatePayoutThreshold()
	})
}

// ClearPayoutThreshold clears the value of the "payout_threshold" field.
func (u *FractionWithdrawalRuleUpsertOne) ClearPayoutThreshold() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearPayoutThreshold()
	})
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (u *FractionWithdrawalRuleUpsertOne) SetWithdrawFee(v decimal.Decimal) *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetWithdrawFee(v)
	})
}

// UpdateWithdrawFee sets the "withdraw_fee" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertOne) UpdateWithdrawFee() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateWithdrawFee()
	})
}

// ClearWithdrawFee clears the value of the "withdraw_fee" field.
func (u *FractionWithdrawalRuleUpsertOne) ClearWithdrawFee() *FractionWithdrawalRuleUpsertOne {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearWithdrawFee()
	})
}

// Exec executes the query.
func (u *FractionWithdrawalRuleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FractionWithdrawalRuleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FractionWithdrawalRuleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FractionWithdrawalRuleUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FractionWithdrawalRuleUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FractionWithdrawalRuleCreateBulk is the builder for creating many FractionWithdrawalRule entities in bulk.
type FractionWithdrawalRuleCreateBulk struct {
	config
	builders []*FractionWithdrawalRuleCreate
	conflict []sql.ConflictOption
}

// Save creates the FractionWithdrawalRule entities in the database.
func (fwrcb *FractionWithdrawalRuleCreateBulk) Save(ctx context.Context) ([]*FractionWithdrawalRule, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fwrcb.builders))
	nodes := make([]*FractionWithdrawalRule, len(fwrcb.builders))
	mutators := make([]Mutator, len(fwrcb.builders))
	for i := range fwrcb.builders {
		func(i int, root context.Context) {
			builder := fwrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FractionWithdrawalRuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fwrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fwrcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fwrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fwrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fwrcb *FractionWithdrawalRuleCreateBulk) SaveX(ctx context.Context) []*FractionWithdrawalRule {
	v, err := fwrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fwrcb *FractionWithdrawalRuleCreateBulk) Exec(ctx context.Context) error {
	_, err := fwrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwrcb *FractionWithdrawalRuleCreateBulk) ExecX(ctx context.Context) {
	if err := fwrcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FractionWithdrawalRule.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FractionWithdrawalRuleUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fwrcb *FractionWithdrawalRuleCreateBulk) OnConflict(opts ...sql.ConflictOption) *FractionWithdrawalRuleUpsertBulk {
	fwrcb.conflict = opts
	return &FractionWithdrawalRuleUpsertBulk{
		create: fwrcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FractionWithdrawalRule.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fwrcb *FractionWithdrawalRuleCreateBulk) OnConflictColumns(columns ...string) *FractionWithdrawalRuleUpsertBulk {
	fwrcb.conflict = append(fwrcb.conflict, sql.ConflictColumns(columns...))
	return &FractionWithdrawalRuleUpsertBulk{
		create: fwrcb,
	}
}

// FractionWithdrawalRuleUpsertBulk is the builder for "upsert"-ing
// a bulk of FractionWithdrawalRule nodes.
type FractionWithdrawalRuleUpsertBulk struct {
	create *FractionWithdrawalRuleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FractionWithdrawalRule.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(fractionwithdrawalrule.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FractionWithdrawalRuleUpsertBulk) UpdateNewValues() *FractionWithdrawalRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(fractionwithdrawalrule.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FractionWithdrawalRule.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FractionWithdrawalRuleUpsertBulk) Ignore() *FractionWithdrawalRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FractionWithdrawalRuleUpsertBulk) DoNothing() *FractionWithdrawalRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FractionWithdrawalRuleCreateBulk.OnConflict
// documentation for more info.
func (u *FractionWithdrawalRuleUpsertBulk) Update(set func(*FractionWithdrawalRuleUpsert)) *FractionWithdrawalRuleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FractionWithdrawalRuleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetCreatedAt(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FractionWithdrawalRuleUpsertBulk) AddCreatedAt(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdateCreatedAt() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetUpdatedAt(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FractionWithdrawalRuleUpsertBulk) AddUpdatedAt(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdateUpdatedAt() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetDeletedAt(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FractionWithdrawalRuleUpsertBulk) AddDeletedAt(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdateDeletedAt() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetEntID(v uuid.UUID) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdateEntID() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateEntID()
	})
}

// SetPoolCoinTypeID sets the "pool_coin_type_id" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetPoolCoinTypeID(v uuid.UUID) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetPoolCoinTypeID(v)
	})
}

// UpdatePoolCoinTypeID sets the "pool_coin_type_id" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdatePoolCoinTypeID() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdatePoolCoinTypeID()
	})
}

// ClearPoolCoinTypeID clears the value of the "pool_coin_type_id" field.
func (u *FractionWithdrawalRuleUpsertBulk) ClearPoolCoinTypeID() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearPoolCoinTypeID()
	})
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetWithdrawInterval(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetWithdrawInterval(v)
	})
}

// AddWithdrawInterval adds v to the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsertBulk) AddWithdrawInterval(v uint32) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.AddWithdrawInterval(v)
	})
}

// UpdateWithdrawInterval sets the "withdraw_interval" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdateWithdrawInterval() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateWithdrawInterval()
	})
}

// ClearWithdrawInterval clears the value of the "withdraw_interval" field.
func (u *FractionWithdrawalRuleUpsertBulk) ClearWithdrawInterval() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearWithdrawInterval()
	})
}

// SetLeastWithdrawalAmount sets the "least_withdrawal_amount" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetLeastWithdrawalAmount(v decimal.Decimal) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetLeastWithdrawalAmount(v)
	})
}

// UpdateLeastWithdrawalAmount sets the "least_withdrawal_amount" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdateLeastWithdrawalAmount() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateLeastWithdrawalAmount()
	})
}

// ClearLeastWithdrawalAmount clears the value of the "least_withdrawal_amount" field.
func (u *FractionWithdrawalRuleUpsertBulk) ClearLeastWithdrawalAmount() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearLeastWithdrawalAmount()
	})
}

// SetPayoutThreshold sets the "payout_threshold" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetPayoutThreshold(v decimal.Decimal) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetPayoutThreshold(v)
	})
}

// UpdatePayoutThreshold sets the "payout_threshold" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdatePayoutThreshold() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdatePayoutThreshold()
	})
}

// ClearPayoutThreshold clears the value of the "payout_threshold" field.
func (u *FractionWithdrawalRuleUpsertBulk) ClearPayoutThreshold() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearPayoutThreshold()
	})
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (u *FractionWithdrawalRuleUpsertBulk) SetWithdrawFee(v decimal.Decimal) *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.SetWithdrawFee(v)
	})
}

// UpdateWithdrawFee sets the "withdraw_fee" field to the value that was provided on create.
func (u *FractionWithdrawalRuleUpsertBulk) UpdateWithdrawFee() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.UpdateWithdrawFee()
	})
}

// ClearWithdrawFee clears the value of the "withdraw_fee" field.
func (u *FractionWithdrawalRuleUpsertBulk) ClearWithdrawFee() *FractionWithdrawalRuleUpsertBulk {
	return u.Update(func(s *FractionWithdrawalRuleUpsert) {
		s.ClearWithdrawFee()
	})
}

// Exec executes the query.
func (u *FractionWithdrawalRuleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FractionWithdrawalRuleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FractionWithdrawalRuleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FractionWithdrawalRuleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
