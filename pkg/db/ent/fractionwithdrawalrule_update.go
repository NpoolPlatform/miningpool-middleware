// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/fractionwithdrawalrule"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

// FractionWithdrawalRuleUpdate is the builder for updating FractionWithdrawalRule entities.
type FractionWithdrawalRuleUpdate struct {
	config
	hooks     []Hook
	mutation  *FractionWithdrawalRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FractionWithdrawalRuleUpdate builder.
func (fwru *FractionWithdrawalRuleUpdate) Where(ps ...predicate.FractionWithdrawalRule) *FractionWithdrawalRuleUpdate {
	fwru.mutation.Where(ps...)
	return fwru
}

// SetCreatedAt sets the "created_at" field.
func (fwru *FractionWithdrawalRuleUpdate) SetCreatedAt(u uint32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.ResetCreatedAt()
	fwru.mutation.SetCreatedAt(u)
	return fwru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillableCreatedAt(u *uint32) *FractionWithdrawalRuleUpdate {
	if u != nil {
		fwru.SetCreatedAt(*u)
	}
	return fwru
}

// AddCreatedAt adds u to the "created_at" field.
func (fwru *FractionWithdrawalRuleUpdate) AddCreatedAt(u int32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.AddCreatedAt(u)
	return fwru
}

// SetUpdatedAt sets the "updated_at" field.
func (fwru *FractionWithdrawalRuleUpdate) SetUpdatedAt(u uint32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.ResetUpdatedAt()
	fwru.mutation.SetUpdatedAt(u)
	return fwru
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fwru *FractionWithdrawalRuleUpdate) AddUpdatedAt(u int32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.AddUpdatedAt(u)
	return fwru
}

// SetDeletedAt sets the "deleted_at" field.
func (fwru *FractionWithdrawalRuleUpdate) SetDeletedAt(u uint32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.ResetDeletedAt()
	fwru.mutation.SetDeletedAt(u)
	return fwru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillableDeletedAt(u *uint32) *FractionWithdrawalRuleUpdate {
	if u != nil {
		fwru.SetDeletedAt(*u)
	}
	return fwru
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fwru *FractionWithdrawalRuleUpdate) AddDeletedAt(u int32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.AddDeletedAt(u)
	return fwru
}

// SetEntID sets the "ent_id" field.
func (fwru *FractionWithdrawalRuleUpdate) SetEntID(u uuid.UUID) *FractionWithdrawalRuleUpdate {
	fwru.mutation.SetEntID(u)
	return fwru
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillableEntID(u *uuid.UUID) *FractionWithdrawalRuleUpdate {
	if u != nil {
		fwru.SetEntID(*u)
	}
	return fwru
}

// SetPoolCoinTypeID sets the "pool_coin_type_id" field.
func (fwru *FractionWithdrawalRuleUpdate) SetPoolCoinTypeID(u uuid.UUID) *FractionWithdrawalRuleUpdate {
	fwru.mutation.SetPoolCoinTypeID(u)
	return fwru
}

// SetNillablePoolCoinTypeID sets the "pool_coin_type_id" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillablePoolCoinTypeID(u *uuid.UUID) *FractionWithdrawalRuleUpdate {
	if u != nil {
		fwru.SetPoolCoinTypeID(*u)
	}
	return fwru
}

// ClearPoolCoinTypeID clears the value of the "pool_coin_type_id" field.
func (fwru *FractionWithdrawalRuleUpdate) ClearPoolCoinTypeID() *FractionWithdrawalRuleUpdate {
	fwru.mutation.ClearPoolCoinTypeID()
	return fwru
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (fwru *FractionWithdrawalRuleUpdate) SetWithdrawInterval(u uint32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.ResetWithdrawInterval()
	fwru.mutation.SetWithdrawInterval(u)
	return fwru
}

// SetNillableWithdrawInterval sets the "withdraw_interval" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillableWithdrawInterval(u *uint32) *FractionWithdrawalRuleUpdate {
	if u != nil {
		fwru.SetWithdrawInterval(*u)
	}
	return fwru
}

// AddWithdrawInterval adds u to the "withdraw_interval" field.
func (fwru *FractionWithdrawalRuleUpdate) AddWithdrawInterval(u int32) *FractionWithdrawalRuleUpdate {
	fwru.mutation.AddWithdrawInterval(u)
	return fwru
}

// ClearWithdrawInterval clears the value of the "withdraw_interval" field.
func (fwru *FractionWithdrawalRuleUpdate) ClearWithdrawInterval() *FractionWithdrawalRuleUpdate {
	fwru.mutation.ClearWithdrawInterval()
	return fwru
}

// SetLeastWithdrawalAmount sets the "least_withdrawal_amount" field.
func (fwru *FractionWithdrawalRuleUpdate) SetLeastWithdrawalAmount(d decimal.Decimal) *FractionWithdrawalRuleUpdate {
	fwru.mutation.SetLeastWithdrawalAmount(d)
	return fwru
}

// SetNillableLeastWithdrawalAmount sets the "least_withdrawal_amount" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillableLeastWithdrawalAmount(d *decimal.Decimal) *FractionWithdrawalRuleUpdate {
	if d != nil {
		fwru.SetLeastWithdrawalAmount(*d)
	}
	return fwru
}

// ClearLeastWithdrawalAmount clears the value of the "least_withdrawal_amount" field.
func (fwru *FractionWithdrawalRuleUpdate) ClearLeastWithdrawalAmount() *FractionWithdrawalRuleUpdate {
	fwru.mutation.ClearLeastWithdrawalAmount()
	return fwru
}

// SetPayoutThreshold sets the "payout_threshold" field.
func (fwru *FractionWithdrawalRuleUpdate) SetPayoutThreshold(d decimal.Decimal) *FractionWithdrawalRuleUpdate {
	fwru.mutation.SetPayoutThreshold(d)
	return fwru
}

// SetNillablePayoutThreshold sets the "payout_threshold" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillablePayoutThreshold(d *decimal.Decimal) *FractionWithdrawalRuleUpdate {
	if d != nil {
		fwru.SetPayoutThreshold(*d)
	}
	return fwru
}

// ClearPayoutThreshold clears the value of the "payout_threshold" field.
func (fwru *FractionWithdrawalRuleUpdate) ClearPayoutThreshold() *FractionWithdrawalRuleUpdate {
	fwru.mutation.ClearPayoutThreshold()
	return fwru
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (fwru *FractionWithdrawalRuleUpdate) SetWithdrawFee(d decimal.Decimal) *FractionWithdrawalRuleUpdate {
	fwru.mutation.SetWithdrawFee(d)
	return fwru
}

// SetNillableWithdrawFee sets the "withdraw_fee" field if the given value is not nil.
func (fwru *FractionWithdrawalRuleUpdate) SetNillableWithdrawFee(d *decimal.Decimal) *FractionWithdrawalRuleUpdate {
	if d != nil {
		fwru.SetWithdrawFee(*d)
	}
	return fwru
}

// ClearWithdrawFee clears the value of the "withdraw_fee" field.
func (fwru *FractionWithdrawalRuleUpdate) ClearWithdrawFee() *FractionWithdrawalRuleUpdate {
	fwru.mutation.ClearWithdrawFee()
	return fwru
}

// Mutation returns the FractionWithdrawalRuleMutation object of the builder.
func (fwru *FractionWithdrawalRuleUpdate) Mutation() *FractionWithdrawalRuleMutation {
	return fwru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fwru *FractionWithdrawalRuleUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := fwru.defaults(); err != nil {
		return 0, err
	}
	if len(fwru.hooks) == 0 {
		affected, err = fwru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FractionWithdrawalRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fwru.mutation = mutation
			affected, err = fwru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fwru.hooks) - 1; i >= 0; i-- {
			if fwru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fwru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fwru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fwru *FractionWithdrawalRuleUpdate) SaveX(ctx context.Context) int {
	affected, err := fwru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fwru *FractionWithdrawalRuleUpdate) Exec(ctx context.Context) error {
	_, err := fwru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwru *FractionWithdrawalRuleUpdate) ExecX(ctx context.Context) {
	if err := fwru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fwru *FractionWithdrawalRuleUpdate) defaults() error {
	if _, ok := fwru.mutation.UpdatedAt(); !ok {
		if fractionwithdrawalrule.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawalrule.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawalrule.UpdateDefaultUpdatedAt()
		fwru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fwru *FractionWithdrawalRuleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FractionWithdrawalRuleUpdate {
	fwru.modifiers = append(fwru.modifiers, modifiers...)
	return fwru
}

func (fwru *FractionWithdrawalRuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fractionwithdrawalrule.Table,
			Columns: fractionwithdrawalrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionwithdrawalrule.FieldID,
			},
		},
	}
	if ps := fwru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fwru.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldCreatedAt,
		})
	}
	if value, ok := fwru.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldCreatedAt,
		})
	}
	if value, ok := fwru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldUpdatedAt,
		})
	}
	if value, ok := fwru.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldUpdatedAt,
		})
	}
	if value, ok := fwru.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldDeletedAt,
		})
	}
	if value, ok := fwru.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldDeletedAt,
		})
	}
	if value, ok := fwru.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawalrule.FieldEntID,
		})
	}
	if value, ok := fwru.mutation.PoolCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawalrule.FieldPoolCoinTypeID,
		})
	}
	if fwru.mutation.PoolCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fractionwithdrawalrule.FieldPoolCoinTypeID,
		})
	}
	if value, ok := fwru.mutation.WithdrawInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fwru.mutation.AddedWithdrawInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawInterval,
		})
	}
	if fwru.mutation.WithdrawIntervalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fractionwithdrawalrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fwru.mutation.LeastWithdrawalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldLeastWithdrawalAmount,
		})
	}
	if fwru.mutation.LeastWithdrawalAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fractionwithdrawalrule.FieldLeastWithdrawalAmount,
		})
	}
	if value, ok := fwru.mutation.PayoutThreshold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldPayoutThreshold,
		})
	}
	if fwru.mutation.PayoutThresholdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fractionwithdrawalrule.FieldPayoutThreshold,
		})
	}
	if value, ok := fwru.mutation.WithdrawFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawFee,
		})
	}
	if fwru.mutation.WithdrawFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fractionwithdrawalrule.FieldWithdrawFee,
		})
	}
	_spec.Modifiers = fwru.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, fwru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fractionwithdrawalrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FractionWithdrawalRuleUpdateOne is the builder for updating a single FractionWithdrawalRule entity.
type FractionWithdrawalRuleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FractionWithdrawalRuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetCreatedAt(u uint32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ResetCreatedAt()
	fwruo.mutation.SetCreatedAt(u)
	return fwruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillableCreatedAt(u *uint32) *FractionWithdrawalRuleUpdateOne {
	if u != nil {
		fwruo.SetCreatedAt(*u)
	}
	return fwruo
}

// AddCreatedAt adds u to the "created_at" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) AddCreatedAt(u int32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.AddCreatedAt(u)
	return fwruo
}

// SetUpdatedAt sets the "updated_at" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetUpdatedAt(u uint32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ResetUpdatedAt()
	fwruo.mutation.SetUpdatedAt(u)
	return fwruo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) AddUpdatedAt(u int32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.AddUpdatedAt(u)
	return fwruo
}

// SetDeletedAt sets the "deleted_at" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetDeletedAt(u uint32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ResetDeletedAt()
	fwruo.mutation.SetDeletedAt(u)
	return fwruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillableDeletedAt(u *uint32) *FractionWithdrawalRuleUpdateOne {
	if u != nil {
		fwruo.SetDeletedAt(*u)
	}
	return fwruo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) AddDeletedAt(u int32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.AddDeletedAt(u)
	return fwruo
}

// SetEntID sets the "ent_id" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetEntID(u uuid.UUID) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.SetEntID(u)
	return fwruo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillableEntID(u *uuid.UUID) *FractionWithdrawalRuleUpdateOne {
	if u != nil {
		fwruo.SetEntID(*u)
	}
	return fwruo
}

// SetPoolCoinTypeID sets the "pool_coin_type_id" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetPoolCoinTypeID(u uuid.UUID) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.SetPoolCoinTypeID(u)
	return fwruo
}

// SetNillablePoolCoinTypeID sets the "pool_coin_type_id" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillablePoolCoinTypeID(u *uuid.UUID) *FractionWithdrawalRuleUpdateOne {
	if u != nil {
		fwruo.SetPoolCoinTypeID(*u)
	}
	return fwruo
}

// ClearPoolCoinTypeID clears the value of the "pool_coin_type_id" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) ClearPoolCoinTypeID() *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ClearPoolCoinTypeID()
	return fwruo
}

// SetWithdrawInterval sets the "withdraw_interval" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetWithdrawInterval(u uint32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ResetWithdrawInterval()
	fwruo.mutation.SetWithdrawInterval(u)
	return fwruo
}

// SetNillableWithdrawInterval sets the "withdraw_interval" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillableWithdrawInterval(u *uint32) *FractionWithdrawalRuleUpdateOne {
	if u != nil {
		fwruo.SetWithdrawInterval(*u)
	}
	return fwruo
}

// AddWithdrawInterval adds u to the "withdraw_interval" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) AddWithdrawInterval(u int32) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.AddWithdrawInterval(u)
	return fwruo
}

// ClearWithdrawInterval clears the value of the "withdraw_interval" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) ClearWithdrawInterval() *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ClearWithdrawInterval()
	return fwruo
}

// SetLeastWithdrawalAmount sets the "least_withdrawal_amount" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetLeastWithdrawalAmount(d decimal.Decimal) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.SetLeastWithdrawalAmount(d)
	return fwruo
}

// SetNillableLeastWithdrawalAmount sets the "least_withdrawal_amount" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillableLeastWithdrawalAmount(d *decimal.Decimal) *FractionWithdrawalRuleUpdateOne {
	if d != nil {
		fwruo.SetLeastWithdrawalAmount(*d)
	}
	return fwruo
}

// ClearLeastWithdrawalAmount clears the value of the "least_withdrawal_amount" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) ClearLeastWithdrawalAmount() *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ClearLeastWithdrawalAmount()
	return fwruo
}

// SetPayoutThreshold sets the "payout_threshold" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetPayoutThreshold(d decimal.Decimal) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.SetPayoutThreshold(d)
	return fwruo
}

// SetNillablePayoutThreshold sets the "payout_threshold" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillablePayoutThreshold(d *decimal.Decimal) *FractionWithdrawalRuleUpdateOne {
	if d != nil {
		fwruo.SetPayoutThreshold(*d)
	}
	return fwruo
}

// ClearPayoutThreshold clears the value of the "payout_threshold" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) ClearPayoutThreshold() *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ClearPayoutThreshold()
	return fwruo
}

// SetWithdrawFee sets the "withdraw_fee" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetWithdrawFee(d decimal.Decimal) *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.SetWithdrawFee(d)
	return fwruo
}

// SetNillableWithdrawFee sets the "withdraw_fee" field if the given value is not nil.
func (fwruo *FractionWithdrawalRuleUpdateOne) SetNillableWithdrawFee(d *decimal.Decimal) *FractionWithdrawalRuleUpdateOne {
	if d != nil {
		fwruo.SetWithdrawFee(*d)
	}
	return fwruo
}

// ClearWithdrawFee clears the value of the "withdraw_fee" field.
func (fwruo *FractionWithdrawalRuleUpdateOne) ClearWithdrawFee() *FractionWithdrawalRuleUpdateOne {
	fwruo.mutation.ClearWithdrawFee()
	return fwruo
}

// Mutation returns the FractionWithdrawalRuleMutation object of the builder.
func (fwruo *FractionWithdrawalRuleUpdateOne) Mutation() *FractionWithdrawalRuleMutation {
	return fwruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fwruo *FractionWithdrawalRuleUpdateOne) Select(field string, fields ...string) *FractionWithdrawalRuleUpdateOne {
	fwruo.fields = append([]string{field}, fields...)
	return fwruo
}

// Save executes the query and returns the updated FractionWithdrawalRule entity.
func (fwruo *FractionWithdrawalRuleUpdateOne) Save(ctx context.Context) (*FractionWithdrawalRule, error) {
	var (
		err  error
		node *FractionWithdrawalRule
	)
	if err := fwruo.defaults(); err != nil {
		return nil, err
	}
	if len(fwruo.hooks) == 0 {
		node, err = fwruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FractionWithdrawalRuleMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fwruo.mutation = mutation
			node, err = fwruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fwruo.hooks) - 1; i >= 0; i-- {
			if fwruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fwruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fwruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FractionWithdrawalRule)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FractionWithdrawalRuleMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fwruo *FractionWithdrawalRuleUpdateOne) SaveX(ctx context.Context) *FractionWithdrawalRule {
	node, err := fwruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fwruo *FractionWithdrawalRuleUpdateOne) Exec(ctx context.Context) error {
	_, err := fwruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fwruo *FractionWithdrawalRuleUpdateOne) ExecX(ctx context.Context) {
	if err := fwruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fwruo *FractionWithdrawalRuleUpdateOne) defaults() error {
	if _, ok := fwruo.mutation.UpdatedAt(); !ok {
		if fractionwithdrawalrule.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized fractionwithdrawalrule.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := fractionwithdrawalrule.UpdateDefaultUpdatedAt()
		fwruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fwruo *FractionWithdrawalRuleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FractionWithdrawalRuleUpdateOne {
	fwruo.modifiers = append(fwruo.modifiers, modifiers...)
	return fwruo
}

func (fwruo *FractionWithdrawalRuleUpdateOne) sqlSave(ctx context.Context) (_node *FractionWithdrawalRule, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fractionwithdrawalrule.Table,
			Columns: fractionwithdrawalrule.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: fractionwithdrawalrule.FieldID,
			},
		},
	}
	id, ok := fwruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FractionWithdrawalRule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fwruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fractionwithdrawalrule.FieldID)
		for _, f := range fields {
			if !fractionwithdrawalrule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fractionwithdrawalrule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fwruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fwruo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldCreatedAt,
		})
	}
	if value, ok := fwruo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldCreatedAt,
		})
	}
	if value, ok := fwruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldUpdatedAt,
		})
	}
	if value, ok := fwruo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldUpdatedAt,
		})
	}
	if value, ok := fwruo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldDeletedAt,
		})
	}
	if value, ok := fwruo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldDeletedAt,
		})
	}
	if value, ok := fwruo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawalrule.FieldEntID,
		})
	}
	if value, ok := fwruo.mutation.PoolCoinTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: fractionwithdrawalrule.FieldPoolCoinTypeID,
		})
	}
	if fwruo.mutation.PoolCoinTypeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: fractionwithdrawalrule.FieldPoolCoinTypeID,
		})
	}
	if value, ok := fwruo.mutation.WithdrawInterval(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fwruo.mutation.AddedWithdrawInterval(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawInterval,
		})
	}
	if fwruo.mutation.WithdrawIntervalCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: fractionwithdrawalrule.FieldWithdrawInterval,
		})
	}
	if value, ok := fwruo.mutation.LeastWithdrawalAmount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldLeastWithdrawalAmount,
		})
	}
	if fwruo.mutation.LeastWithdrawalAmountCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fractionwithdrawalrule.FieldLeastWithdrawalAmount,
		})
	}
	if value, ok := fwruo.mutation.PayoutThreshold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldPayoutThreshold,
		})
	}
	if fwruo.mutation.PayoutThresholdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fractionwithdrawalrule.FieldPayoutThreshold,
		})
	}
	if value, ok := fwruo.mutation.WithdrawFee(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Value:  value,
			Column: fractionwithdrawalrule.FieldWithdrawFee,
		})
	}
	if fwruo.mutation.WithdrawFeeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeOther,
			Column: fractionwithdrawalrule.FieldWithdrawFee,
		})
	}
	_spec.Modifiers = fwruo.modifiers
	_node = &FractionWithdrawalRule{config: fwruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fwruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fractionwithdrawalrule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
