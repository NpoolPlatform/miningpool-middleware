// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/gooduser"
	"github.com/google/uuid"
)

// GoodUser is the model entity for the GoodUser schema.
type GoodUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// GoodID holds the value of the "good_id" field.
	GoodID uuid.UUID `json:"good_id,omitempty"`
	// RootUserID holds the value of the "root_user_id" field.
	RootUserID uuid.UUID `json:"root_user_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MiningpoolType holds the value of the "miningpool_type" field.
	MiningpoolType string `json:"miningpool_type,omitempty"`
	// CoinType holds the value of the "coin_type" field.
	CoinType string `json:"coin_type,omitempty"`
	// HashRate holds the value of the "hash_rate" field.
	HashRate float32 `json:"hash_rate,omitempty"`
	// ReadPageLink holds the value of the "read_page_link" field.
	ReadPageLink string `json:"read_page_link,omitempty"`
	// RevenueType holds the value of the "revenue_type" field.
	RevenueType string `json:"revenue_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoodUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case gooduser.FieldHashRate:
			values[i] = new(sql.NullFloat64)
		case gooduser.FieldID, gooduser.FieldCreatedAt, gooduser.FieldUpdatedAt, gooduser.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case gooduser.FieldName, gooduser.FieldMiningpoolType, gooduser.FieldCoinType, gooduser.FieldReadPageLink, gooduser.FieldRevenueType:
			values[i] = new(sql.NullString)
		case gooduser.FieldEntID, gooduser.FieldGoodID, gooduser.FieldRootUserID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GoodUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoodUser fields.
func (gu *GoodUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gooduser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gu.ID = uint32(value.Int64)
		case gooduser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gu.CreatedAt = uint32(value.Int64)
			}
		case gooduser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gu.UpdatedAt = uint32(value.Int64)
			}
		case gooduser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gu.DeletedAt = uint32(value.Int64)
			}
		case gooduser.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				gu.EntID = *value
			}
		case gooduser.FieldGoodID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_id", values[i])
			} else if value != nil {
				gu.GoodID = *value
			}
		case gooduser.FieldRootUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field root_user_id", values[i])
			} else if value != nil {
				gu.RootUserID = *value
			}
		case gooduser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gu.Name = value.String
			}
		case gooduser.FieldMiningpoolType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field miningpool_type", values[i])
			} else if value.Valid {
				gu.MiningpoolType = value.String
			}
		case gooduser.FieldCoinType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type", values[i])
			} else if value.Valid {
				gu.CoinType = value.String
			}
		case gooduser.FieldHashRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field hash_rate", values[i])
			} else if value.Valid {
				gu.HashRate = float32(value.Float64)
			}
		case gooduser.FieldReadPageLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field read_page_link", values[i])
			} else if value.Valid {
				gu.ReadPageLink = value.String
			}
		case gooduser.FieldRevenueType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_type", values[i])
			} else if value.Valid {
				gu.RevenueType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this GoodUser.
// Note that you need to call GoodUser.Unwrap() before calling this method if this GoodUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *GoodUser) Update() *GoodUserUpdateOne {
	return (&GoodUserClient{config: gu.config}).UpdateOne(gu)
}

// Unwrap unwraps the GoodUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gu *GoodUser) Unwrap() *GoodUser {
	_tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoodUser is not a transactional entity")
	}
	gu.config.driver = _tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *GoodUser) String() string {
	var builder strings.Builder
	builder.WriteString("GoodUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", gu.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", gu.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", gu.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", gu.EntID))
	builder.WriteString(", ")
	builder.WriteString("good_id=")
	builder.WriteString(fmt.Sprintf("%v", gu.GoodID))
	builder.WriteString(", ")
	builder.WriteString("root_user_id=")
	builder.WriteString(fmt.Sprintf("%v", gu.RootUserID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gu.Name)
	builder.WriteString(", ")
	builder.WriteString("miningpool_type=")
	builder.WriteString(gu.MiningpoolType)
	builder.WriteString(", ")
	builder.WriteString("coin_type=")
	builder.WriteString(gu.CoinType)
	builder.WriteString(", ")
	builder.WriteString("hash_rate=")
	builder.WriteString(fmt.Sprintf("%v", gu.HashRate))
	builder.WriteString(", ")
	builder.WriteString("read_page_link=")
	builder.WriteString(gu.ReadPageLink)
	builder.WriteString(", ")
	builder.WriteString("revenue_type=")
	builder.WriteString(gu.RevenueType)
	builder.WriteByte(')')
	return builder.String()
}

// GoodUsers is a parsable slice of GoodUser.
type GoodUsers []*GoodUser

func (gu GoodUsers) config(cfg config) {
	for _i := range gu {
		gu[_i].config = cfg
	}
}
