// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/orderuser"
	"github.com/google/uuid"
)

// OrderUser is the model entity for the OrderUser schema.
type OrderUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// RootUserID holds the value of the "root_user_id" field.
	RootUserID uuid.UUID `json:"root_user_id,omitempty"`
	// GoodUserID holds the value of the "good_user_id" field.
	GoodUserID uuid.UUID `json:"good_user_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// MiningpoolType holds the value of the "miningpool_type" field.
	MiningpoolType string `json:"miningpool_type,omitempty"`
	// CoinType holds the value of the "coin_type" field.
	CoinType string `json:"coin_type,omitempty"`
	// Proportion holds the value of the "proportion" field.
	Proportion float32 `json:"proportion,omitempty"`
	// RevenueAddress holds the value of the "revenue_address" field.
	RevenueAddress string `json:"revenue_address,omitempty"`
	// ReadPageLink holds the value of the "read_page_link" field.
	ReadPageLink string `json:"read_page_link,omitempty"`
	// AutoPay holds the value of the "auto_pay" field.
	AutoPay bool `json:"auto_pay,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderuser.FieldAutoPay:
			values[i] = new(sql.NullBool)
		case orderuser.FieldProportion:
			values[i] = new(sql.NullFloat64)
		case orderuser.FieldID, orderuser.FieldCreatedAt, orderuser.FieldUpdatedAt, orderuser.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case orderuser.FieldName, orderuser.FieldMiningpoolType, orderuser.FieldCoinType, orderuser.FieldRevenueAddress, orderuser.FieldReadPageLink:
			values[i] = new(sql.NullString)
		case orderuser.FieldEntID, orderuser.FieldRootUserID, orderuser.FieldGoodUserID, orderuser.FieldUserID, orderuser.FieldAppID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderUser fields.
func (ou *OrderUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ou.ID = uint32(value.Int64)
		case orderuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ou.CreatedAt = uint32(value.Int64)
			}
		case orderuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ou.UpdatedAt = uint32(value.Int64)
			}
		case orderuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ou.DeletedAt = uint32(value.Int64)
			}
		case orderuser.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ou.EntID = *value
			}
		case orderuser.FieldRootUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field root_user_id", values[i])
			} else if value != nil {
				ou.RootUserID = *value
			}
		case orderuser.FieldGoodUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field good_user_id", values[i])
			} else if value != nil {
				ou.GoodUserID = *value
			}
		case orderuser.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				ou.UserID = *value
			}
		case orderuser.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				ou.AppID = *value
			}
		case orderuser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ou.Name = value.String
			}
		case orderuser.FieldMiningpoolType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field miningpool_type", values[i])
			} else if value.Valid {
				ou.MiningpoolType = value.String
			}
		case orderuser.FieldCoinType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type", values[i])
			} else if value.Valid {
				ou.CoinType = value.String
			}
		case orderuser.FieldProportion:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field proportion", values[i])
			} else if value.Valid {
				ou.Proportion = float32(value.Float64)
			}
		case orderuser.FieldRevenueAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revenue_address", values[i])
			} else if value.Valid {
				ou.RevenueAddress = value.String
			}
		case orderuser.FieldReadPageLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field read_page_link", values[i])
			} else if value.Valid {
				ou.ReadPageLink = value.String
			}
		case orderuser.FieldAutoPay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto_pay", values[i])
			} else if value.Valid {
				ou.AutoPay = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderUser.
// Note that you need to call OrderUser.Unwrap() before calling this method if this OrderUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ou *OrderUser) Update() *OrderUserUpdateOne {
	return (&OrderUserClient{config: ou.config}).UpdateOne(ou)
}

// Unwrap unwraps the OrderUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ou *OrderUser) Unwrap() *OrderUser {
	_tx, ok := ou.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderUser is not a transactional entity")
	}
	ou.config.driver = _tx.drv
	return ou
}

// String implements the fmt.Stringer.
func (ou *OrderUser) String() string {
	var builder strings.Builder
	builder.WriteString("OrderUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ou.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ou.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ou.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ou.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.EntID))
	builder.WriteString(", ")
	builder.WriteString("root_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.RootUserID))
	builder.WriteString(", ")
	builder.WriteString("good_user_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.GoodUserID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.UserID))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", ou.AppID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ou.Name)
	builder.WriteString(", ")
	builder.WriteString("miningpool_type=")
	builder.WriteString(ou.MiningpoolType)
	builder.WriteString(", ")
	builder.WriteString("coin_type=")
	builder.WriteString(ou.CoinType)
	builder.WriteString(", ")
	builder.WriteString("proportion=")
	builder.WriteString(fmt.Sprintf("%v", ou.Proportion))
	builder.WriteString(", ")
	builder.WriteString("revenue_address=")
	builder.WriteString(ou.RevenueAddress)
	builder.WriteString(", ")
	builder.WriteString("read_page_link=")
	builder.WriteString(ou.ReadPageLink)
	builder.WriteString(", ")
	builder.WriteString("auto_pay=")
	builder.WriteString(fmt.Sprintf("%v", ou.AutoPay))
	builder.WriteByte(')')
	return builder.String()
}

// OrderUsers is a parsable slice of OrderUser.
type OrderUsers []*OrderUser

func (ou OrderUsers) config(cfg config) {
	for _i := range ou {
		ou[_i].config = cfg
	}
}
