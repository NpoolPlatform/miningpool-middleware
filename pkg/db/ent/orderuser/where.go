// Code generated by ent, DO NOT EDIT.

package orderuser

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// OrderID applies equality check predicate on the "order_id" field. It's identical to OrderIDEQ.
func OrderID(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// GoodUserID applies equality check predicate on the "good_user_id" field. It's identical to GoodUserIDEQ.
func GoodUserID(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodUserID), v))
	})
}

// CoinID applies equality check predicate on the "coin_id" field. It's identical to CoinIDEQ.
func CoinID(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinID), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Proportion applies equality check predicate on the "proportion" field. It's identical to ProportionEQ.
func Proportion(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProportion), v))
	})
}

// Start applies equality check predicate on the "start" field. It's identical to StartEQ.
func Start(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// End applies equality check predicate on the "end" field. It's identical to EndEQ.
func End(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// CompensationTime applies equality check predicate on the "compensation_time" field. It's identical to CompensationTimeEQ.
func CompensationTime(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompensationTime), v))
	})
}

// RevenueAddress applies equality check predicate on the "revenue_address" field. It's identical to RevenueAddressEQ.
func RevenueAddress(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevenueAddress), v))
	})
}

// Threshold applies equality check predicate on the "threshold" field. It's identical to ThresholdEQ.
func Threshold(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThreshold), v))
	})
}

// ReadPageLink applies equality check predicate on the "read_page_link" field. It's identical to ReadPageLinkEQ.
func ReadPageLink(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadPageLink), v))
	})
}

// AutoPay applies equality check predicate on the "auto_pay" field. It's identical to AutoPayEQ.
func AutoPay(v bool) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoPay), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// OrderIDEQ applies the EQ predicate on the "order_id" field.
func OrderIDEQ(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderID), v))
	})
}

// OrderIDNEQ applies the NEQ predicate on the "order_id" field.
func OrderIDNEQ(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderID), v))
	})
}

// OrderIDIn applies the In predicate on the "order_id" field.
func OrderIDIn(vs ...uuid.UUID) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderID), v...))
	})
}

// OrderIDNotIn applies the NotIn predicate on the "order_id" field.
func OrderIDNotIn(vs ...uuid.UUID) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderID), v...))
	})
}

// OrderIDGT applies the GT predicate on the "order_id" field.
func OrderIDGT(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderID), v))
	})
}

// OrderIDGTE applies the GTE predicate on the "order_id" field.
func OrderIDGTE(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderID), v))
	})
}

// OrderIDLT applies the LT predicate on the "order_id" field.
func OrderIDLT(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderID), v))
	})
}

// OrderIDLTE applies the LTE predicate on the "order_id" field.
func OrderIDLTE(v uuid.UUID) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderID), v))
	})
}

// GoodUserIDEQ applies the EQ predicate on the "good_user_id" field.
func GoodUserIDEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDNEQ applies the NEQ predicate on the "good_user_id" field.
func GoodUserIDNEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDIn applies the In predicate on the "good_user_id" field.
func GoodUserIDIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldGoodUserID), v...))
	})
}

// GoodUserIDNotIn applies the NotIn predicate on the "good_user_id" field.
func GoodUserIDNotIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldGoodUserID), v...))
	})
}

// GoodUserIDGT applies the GT predicate on the "good_user_id" field.
func GoodUserIDGT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDGTE applies the GTE predicate on the "good_user_id" field.
func GoodUserIDGTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDLT applies the LT predicate on the "good_user_id" field.
func GoodUserIDLT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDLTE applies the LTE predicate on the "good_user_id" field.
func GoodUserIDLTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDContains applies the Contains predicate on the "good_user_id" field.
func GoodUserIDContains(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDHasPrefix applies the HasPrefix predicate on the "good_user_id" field.
func GoodUserIDHasPrefix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDHasSuffix applies the HasSuffix predicate on the "good_user_id" field.
func GoodUserIDHasSuffix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDEqualFold applies the EqualFold predicate on the "good_user_id" field.
func GoodUserIDEqualFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGoodUserID), v))
	})
}

// GoodUserIDContainsFold applies the ContainsFold predicate on the "good_user_id" field.
func GoodUserIDContainsFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGoodUserID), v))
	})
}

// CoinIDEQ applies the EQ predicate on the "coin_id" field.
func CoinIDEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCoinID), v))
	})
}

// CoinIDNEQ applies the NEQ predicate on the "coin_id" field.
func CoinIDNEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCoinID), v))
	})
}

// CoinIDIn applies the In predicate on the "coin_id" field.
func CoinIDIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCoinID), v...))
	})
}

// CoinIDNotIn applies the NotIn predicate on the "coin_id" field.
func CoinIDNotIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCoinID), v...))
	})
}

// CoinIDGT applies the GT predicate on the "coin_id" field.
func CoinIDGT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCoinID), v))
	})
}

// CoinIDGTE applies the GTE predicate on the "coin_id" field.
func CoinIDGTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCoinID), v))
	})
}

// CoinIDLT applies the LT predicate on the "coin_id" field.
func CoinIDLT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCoinID), v))
	})
}

// CoinIDLTE applies the LTE predicate on the "coin_id" field.
func CoinIDLTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCoinID), v))
	})
}

// CoinIDContains applies the Contains predicate on the "coin_id" field.
func CoinIDContains(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCoinID), v))
	})
}

// CoinIDHasPrefix applies the HasPrefix predicate on the "coin_id" field.
func CoinIDHasPrefix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCoinID), v))
	})
}

// CoinIDHasSuffix applies the HasSuffix predicate on the "coin_id" field.
func CoinIDHasSuffix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCoinID), v))
	})
}

// CoinIDEqualFold applies the EqualFold predicate on the "coin_id" field.
func CoinIDEqualFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCoinID), v))
	})
}

// CoinIDContainsFold applies the ContainsFold predicate on the "coin_id" field.
func CoinIDContainsFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCoinID), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// ProportionEQ applies the EQ predicate on the "proportion" field.
func ProportionEQ(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProportion), v))
	})
}

// ProportionNEQ applies the NEQ predicate on the "proportion" field.
func ProportionNEQ(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProportion), v))
	})
}

// ProportionIn applies the In predicate on the "proportion" field.
func ProportionIn(vs ...float32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProportion), v...))
	})
}

// ProportionNotIn applies the NotIn predicate on the "proportion" field.
func ProportionNotIn(vs ...float32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProportion), v...))
	})
}

// ProportionGT applies the GT predicate on the "proportion" field.
func ProportionGT(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProportion), v))
	})
}

// ProportionGTE applies the GTE predicate on the "proportion" field.
func ProportionGTE(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProportion), v))
	})
}

// ProportionLT applies the LT predicate on the "proportion" field.
func ProportionLT(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProportion), v))
	})
}

// ProportionLTE applies the LTE predicate on the "proportion" field.
func ProportionLTE(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProportion), v))
	})
}

// StartEQ applies the EQ predicate on the "start" field.
func StartEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStart), v))
	})
}

// StartNEQ applies the NEQ predicate on the "start" field.
func StartNEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStart), v))
	})
}

// StartIn applies the In predicate on the "start" field.
func StartIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStart), v...))
	})
}

// StartNotIn applies the NotIn predicate on the "start" field.
func StartNotIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStart), v...))
	})
}

// StartGT applies the GT predicate on the "start" field.
func StartGT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStart), v))
	})
}

// StartGTE applies the GTE predicate on the "start" field.
func StartGTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStart), v))
	})
}

// StartLT applies the LT predicate on the "start" field.
func StartLT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStart), v))
	})
}

// StartLTE applies the LTE predicate on the "start" field.
func StartLTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStart), v))
	})
}

// EndEQ applies the EQ predicate on the "end" field.
func EndEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEnd), v))
	})
}

// EndNEQ applies the NEQ predicate on the "end" field.
func EndNEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEnd), v))
	})
}

// EndIn applies the In predicate on the "end" field.
func EndIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEnd), v...))
	})
}

// EndNotIn applies the NotIn predicate on the "end" field.
func EndNotIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEnd), v...))
	})
}

// EndGT applies the GT predicate on the "end" field.
func EndGT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEnd), v))
	})
}

// EndGTE applies the GTE predicate on the "end" field.
func EndGTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEnd), v))
	})
}

// EndLT applies the LT predicate on the "end" field.
func EndLT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEnd), v))
	})
}

// EndLTE applies the LTE predicate on the "end" field.
func EndLTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEnd), v))
	})
}

// CompensationTimeEQ applies the EQ predicate on the "compensation_time" field.
func CompensationTimeEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompensationTime), v))
	})
}

// CompensationTimeNEQ applies the NEQ predicate on the "compensation_time" field.
func CompensationTimeNEQ(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompensationTime), v))
	})
}

// CompensationTimeIn applies the In predicate on the "compensation_time" field.
func CompensationTimeIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCompensationTime), v...))
	})
}

// CompensationTimeNotIn applies the NotIn predicate on the "compensation_time" field.
func CompensationTimeNotIn(vs ...uint32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCompensationTime), v...))
	})
}

// CompensationTimeGT applies the GT predicate on the "compensation_time" field.
func CompensationTimeGT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompensationTime), v))
	})
}

// CompensationTimeGTE applies the GTE predicate on the "compensation_time" field.
func CompensationTimeGTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompensationTime), v))
	})
}

// CompensationTimeLT applies the LT predicate on the "compensation_time" field.
func CompensationTimeLT(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompensationTime), v))
	})
}

// CompensationTimeLTE applies the LTE predicate on the "compensation_time" field.
func CompensationTimeLTE(v uint32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompensationTime), v))
	})
}

// CompensationTimeIsNil applies the IsNil predicate on the "compensation_time" field.
func CompensationTimeIsNil() predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCompensationTime)))
	})
}

// CompensationTimeNotNil applies the NotNil predicate on the "compensation_time" field.
func CompensationTimeNotNil() predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCompensationTime)))
	})
}

// RevenueAddressEQ applies the EQ predicate on the "revenue_address" field.
func RevenueAddressEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressNEQ applies the NEQ predicate on the "revenue_address" field.
func RevenueAddressNEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressIn applies the In predicate on the "revenue_address" field.
func RevenueAddressIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRevenueAddress), v...))
	})
}

// RevenueAddressNotIn applies the NotIn predicate on the "revenue_address" field.
func RevenueAddressNotIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRevenueAddress), v...))
	})
}

// RevenueAddressGT applies the GT predicate on the "revenue_address" field.
func RevenueAddressGT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressGTE applies the GTE predicate on the "revenue_address" field.
func RevenueAddressGTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressLT applies the LT predicate on the "revenue_address" field.
func RevenueAddressLT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressLTE applies the LTE predicate on the "revenue_address" field.
func RevenueAddressLTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressContains applies the Contains predicate on the "revenue_address" field.
func RevenueAddressContains(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressHasPrefix applies the HasPrefix predicate on the "revenue_address" field.
func RevenueAddressHasPrefix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressHasSuffix applies the HasSuffix predicate on the "revenue_address" field.
func RevenueAddressHasSuffix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressIsNil applies the IsNil predicate on the "revenue_address" field.
func RevenueAddressIsNil() predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRevenueAddress)))
	})
}

// RevenueAddressNotNil applies the NotNil predicate on the "revenue_address" field.
func RevenueAddressNotNil() predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRevenueAddress)))
	})
}

// RevenueAddressEqualFold applies the EqualFold predicate on the "revenue_address" field.
func RevenueAddressEqualFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRevenueAddress), v))
	})
}

// RevenueAddressContainsFold applies the ContainsFold predicate on the "revenue_address" field.
func RevenueAddressContainsFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRevenueAddress), v))
	})
}

// ThresholdEQ applies the EQ predicate on the "threshold" field.
func ThresholdEQ(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThreshold), v))
	})
}

// ThresholdNEQ applies the NEQ predicate on the "threshold" field.
func ThresholdNEQ(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThreshold), v))
	})
}

// ThresholdIn applies the In predicate on the "threshold" field.
func ThresholdIn(vs ...float32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThreshold), v...))
	})
}

// ThresholdNotIn applies the NotIn predicate on the "threshold" field.
func ThresholdNotIn(vs ...float32) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThreshold), v...))
	})
}

// ThresholdGT applies the GT predicate on the "threshold" field.
func ThresholdGT(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThreshold), v))
	})
}

// ThresholdGTE applies the GTE predicate on the "threshold" field.
func ThresholdGTE(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThreshold), v))
	})
}

// ThresholdLT applies the LT predicate on the "threshold" field.
func ThresholdLT(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThreshold), v))
	})
}

// ThresholdLTE applies the LTE predicate on the "threshold" field.
func ThresholdLTE(v float32) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThreshold), v))
	})
}

// ReadPageLinkEQ applies the EQ predicate on the "read_page_link" field.
func ReadPageLinkEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkNEQ applies the NEQ predicate on the "read_page_link" field.
func ReadPageLinkNEQ(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkIn applies the In predicate on the "read_page_link" field.
func ReadPageLinkIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReadPageLink), v...))
	})
}

// ReadPageLinkNotIn applies the NotIn predicate on the "read_page_link" field.
func ReadPageLinkNotIn(vs ...string) predicate.OrderUser {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReadPageLink), v...))
	})
}

// ReadPageLinkGT applies the GT predicate on the "read_page_link" field.
func ReadPageLinkGT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkGTE applies the GTE predicate on the "read_page_link" field.
func ReadPageLinkGTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkLT applies the LT predicate on the "read_page_link" field.
func ReadPageLinkLT(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkLTE applies the LTE predicate on the "read_page_link" field.
func ReadPageLinkLTE(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkContains applies the Contains predicate on the "read_page_link" field.
func ReadPageLinkContains(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkHasPrefix applies the HasPrefix predicate on the "read_page_link" field.
func ReadPageLinkHasPrefix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkHasSuffix applies the HasSuffix predicate on the "read_page_link" field.
func ReadPageLinkHasSuffix(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkIsNil applies the IsNil predicate on the "read_page_link" field.
func ReadPageLinkIsNil() predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldReadPageLink)))
	})
}

// ReadPageLinkNotNil applies the NotNil predicate on the "read_page_link" field.
func ReadPageLinkNotNil() predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldReadPageLink)))
	})
}

// ReadPageLinkEqualFold applies the EqualFold predicate on the "read_page_link" field.
func ReadPageLinkEqualFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReadPageLink), v))
	})
}

// ReadPageLinkContainsFold applies the ContainsFold predicate on the "read_page_link" field.
func ReadPageLinkContainsFold(v string) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReadPageLink), v))
	})
}

// AutoPayEQ applies the EQ predicate on the "auto_pay" field.
func AutoPayEQ(v bool) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAutoPay), v))
	})
}

// AutoPayNEQ applies the NEQ predicate on the "auto_pay" field.
func AutoPayNEQ(v bool) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAutoPay), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderUser) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderUser) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderUser) predicate.OrderUser {
	return predicate.OrderUser(func(s *sql.Selector) {
		p(s.Not())
	})
}
