// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/orderuser"
	"github.com/google/uuid"
)

// OrderUserCreate is the builder for creating a OrderUser entity.
type OrderUserCreate struct {
	config
	mutation *OrderUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ouc *OrderUserCreate) SetCreatedAt(u uint32) *OrderUserCreate {
	ouc.mutation.SetCreatedAt(u)
	return ouc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouc *OrderUserCreate) SetNillableCreatedAt(u *uint32) *OrderUserCreate {
	if u != nil {
		ouc.SetCreatedAt(*u)
	}
	return ouc
}

// SetUpdatedAt sets the "updated_at" field.
func (ouc *OrderUserCreate) SetUpdatedAt(u uint32) *OrderUserCreate {
	ouc.mutation.SetUpdatedAt(u)
	return ouc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ouc *OrderUserCreate) SetNillableUpdatedAt(u *uint32) *OrderUserCreate {
	if u != nil {
		ouc.SetUpdatedAt(*u)
	}
	return ouc
}

// SetDeletedAt sets the "deleted_at" field.
func (ouc *OrderUserCreate) SetDeletedAt(u uint32) *OrderUserCreate {
	ouc.mutation.SetDeletedAt(u)
	return ouc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouc *OrderUserCreate) SetNillableDeletedAt(u *uint32) *OrderUserCreate {
	if u != nil {
		ouc.SetDeletedAt(*u)
	}
	return ouc
}

// SetEntID sets the "ent_id" field.
func (ouc *OrderUserCreate) SetEntID(u uuid.UUID) *OrderUserCreate {
	ouc.mutation.SetEntID(u)
	return ouc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ouc *OrderUserCreate) SetNillableEntID(u *uuid.UUID) *OrderUserCreate {
	if u != nil {
		ouc.SetEntID(*u)
	}
	return ouc
}

// SetOrderID sets the "order_id" field.
func (ouc *OrderUserCreate) SetOrderID(u uuid.UUID) *OrderUserCreate {
	ouc.mutation.SetOrderID(u)
	return ouc
}

// SetGoodUserID sets the "good_user_id" field.
func (ouc *OrderUserCreate) SetGoodUserID(s string) *OrderUserCreate {
	ouc.mutation.SetGoodUserID(s)
	return ouc
}

// SetCoinID sets the "coin_id" field.
func (ouc *OrderUserCreate) SetCoinID(s string) *OrderUserCreate {
	ouc.mutation.SetCoinID(s)
	return ouc
}

// SetName sets the "name" field.
func (ouc *OrderUserCreate) SetName(s string) *OrderUserCreate {
	ouc.mutation.SetName(s)
	return ouc
}

// SetProportion sets the "proportion" field.
func (ouc *OrderUserCreate) SetProportion(f float32) *OrderUserCreate {
	ouc.mutation.SetProportion(f)
	return ouc
}

// SetStart sets the "start" field.
func (ouc *OrderUserCreate) SetStart(u uint32) *OrderUserCreate {
	ouc.mutation.SetStart(u)
	return ouc
}

// SetEnd sets the "end" field.
func (ouc *OrderUserCreate) SetEnd(u uint32) *OrderUserCreate {
	ouc.mutation.SetEnd(u)
	return ouc
}

// SetCompensationTime sets the "compensation_time" field.
func (ouc *OrderUserCreate) SetCompensationTime(u uint32) *OrderUserCreate {
	ouc.mutation.SetCompensationTime(u)
	return ouc
}

// SetNillableCompensationTime sets the "compensation_time" field if the given value is not nil.
func (ouc *OrderUserCreate) SetNillableCompensationTime(u *uint32) *OrderUserCreate {
	if u != nil {
		ouc.SetCompensationTime(*u)
	}
	return ouc
}

// SetRevenueAddress sets the "revenue_address" field.
func (ouc *OrderUserCreate) SetRevenueAddress(s string) *OrderUserCreate {
	ouc.mutation.SetRevenueAddress(s)
	return ouc
}

// SetNillableRevenueAddress sets the "revenue_address" field if the given value is not nil.
func (ouc *OrderUserCreate) SetNillableRevenueAddress(s *string) *OrderUserCreate {
	if s != nil {
		ouc.SetRevenueAddress(*s)
	}
	return ouc
}

// SetThreshold sets the "threshold" field.
func (ouc *OrderUserCreate) SetThreshold(f float32) *OrderUserCreate {
	ouc.mutation.SetThreshold(f)
	return ouc
}

// SetReadPageLink sets the "read_page_link" field.
func (ouc *OrderUserCreate) SetReadPageLink(s string) *OrderUserCreate {
	ouc.mutation.SetReadPageLink(s)
	return ouc
}

// SetNillableReadPageLink sets the "read_page_link" field if the given value is not nil.
func (ouc *OrderUserCreate) SetNillableReadPageLink(s *string) *OrderUserCreate {
	if s != nil {
		ouc.SetReadPageLink(*s)
	}
	return ouc
}

// SetAutoPay sets the "auto_pay" field.
func (ouc *OrderUserCreate) SetAutoPay(b bool) *OrderUserCreate {
	ouc.mutation.SetAutoPay(b)
	return ouc
}

// SetID sets the "id" field.
func (ouc *OrderUserCreate) SetID(u uint32) *OrderUserCreate {
	ouc.mutation.SetID(u)
	return ouc
}

// Mutation returns the OrderUserMutation object of the builder.
func (ouc *OrderUserCreate) Mutation() *OrderUserMutation {
	return ouc.mutation
}

// Save creates the OrderUser in the database.
func (ouc *OrderUserCreate) Save(ctx context.Context) (*OrderUser, error) {
	var (
		err  error
		node *OrderUser
	)
	if err := ouc.defaults(); err != nil {
		return nil, err
	}
	if len(ouc.hooks) == 0 {
		if err = ouc.check(); err != nil {
			return nil, err
		}
		node, err = ouc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ouc.check(); err != nil {
				return nil, err
			}
			ouc.mutation = mutation
			if node, err = ouc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ouc.hooks) - 1; i >= 0; i-- {
			if ouc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ouc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ouc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ouc *OrderUserCreate) SaveX(ctx context.Context) *OrderUser {
	v, err := ouc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ouc *OrderUserCreate) Exec(ctx context.Context) error {
	_, err := ouc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouc *OrderUserCreate) ExecX(ctx context.Context) {
	if err := ouc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouc *OrderUserCreate) defaults() error {
	if _, ok := ouc.mutation.CreatedAt(); !ok {
		if orderuser.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderuser.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := orderuser.DefaultCreatedAt()
		ouc.mutation.SetCreatedAt(v)
	}
	if _, ok := ouc.mutation.UpdatedAt(); !ok {
		if orderuser.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized orderuser.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := orderuser.DefaultUpdatedAt()
		ouc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ouc.mutation.DeletedAt(); !ok {
		if orderuser.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized orderuser.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := orderuser.DefaultDeletedAt()
		ouc.mutation.SetDeletedAt(v)
	}
	if _, ok := ouc.mutation.EntID(); !ok {
		if orderuser.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized orderuser.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := orderuser.DefaultEntID()
		ouc.mutation.SetEntID(v)
	}
	if _, ok := ouc.mutation.CompensationTime(); !ok {
		v := orderuser.DefaultCompensationTime
		ouc.mutation.SetCompensationTime(v)
	}
	if _, ok := ouc.mutation.RevenueAddress(); !ok {
		v := orderuser.DefaultRevenueAddress
		ouc.mutation.SetRevenueAddress(v)
	}
	if _, ok := ouc.mutation.ReadPageLink(); !ok {
		v := orderuser.DefaultReadPageLink
		ouc.mutation.SetReadPageLink(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ouc *OrderUserCreate) check() error {
	if _, ok := ouc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OrderUser.created_at"`)}
	}
	if _, ok := ouc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OrderUser.updated_at"`)}
	}
	if _, ok := ouc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "OrderUser.deleted_at"`)}
	}
	if _, ok := ouc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "OrderUser.ent_id"`)}
	}
	if _, ok := ouc.mutation.OrderID(); !ok {
		return &ValidationError{Name: "order_id", err: errors.New(`ent: missing required field "OrderUser.order_id"`)}
	}
	if _, ok := ouc.mutation.GoodUserID(); !ok {
		return &ValidationError{Name: "good_user_id", err: errors.New(`ent: missing required field "OrderUser.good_user_id"`)}
	}
	if _, ok := ouc.mutation.CoinID(); !ok {
		return &ValidationError{Name: "coin_id", err: errors.New(`ent: missing required field "OrderUser.coin_id"`)}
	}
	if _, ok := ouc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "OrderUser.name"`)}
	}
	if _, ok := ouc.mutation.Proportion(); !ok {
		return &ValidationError{Name: "proportion", err: errors.New(`ent: missing required field "OrderUser.proportion"`)}
	}
	if _, ok := ouc.mutation.Start(); !ok {
		return &ValidationError{Name: "start", err: errors.New(`ent: missing required field "OrderUser.start"`)}
	}
	if _, ok := ouc.mutation.End(); !ok {
		return &ValidationError{Name: "end", err: errors.New(`ent: missing required field "OrderUser.end"`)}
	}
	if _, ok := ouc.mutation.Threshold(); !ok {
		return &ValidationError{Name: "threshold", err: errors.New(`ent: missing required field "OrderUser.threshold"`)}
	}
	if _, ok := ouc.mutation.AutoPay(); !ok {
		return &ValidationError{Name: "auto_pay", err: errors.New(`ent: missing required field "OrderUser.auto_pay"`)}
	}
	return nil
}

func (ouc *OrderUserCreate) sqlSave(ctx context.Context) (*OrderUser, error) {
	_node, _spec := ouc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ouc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (ouc *OrderUserCreate) createSpec() (*OrderUser, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderUser{config: ouc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: orderuser.FieldID,
			},
		}
	)
	_spec.OnConflict = ouc.conflict
	if id, ok := ouc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ouc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ouc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderuser.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ouc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderuser.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ouc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderuser.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := ouc.mutation.OrderID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: orderuser.FieldOrderID,
		})
		_node.OrderID = value
	}
	if value, ok := ouc.mutation.GoodUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderuser.FieldGoodUserID,
		})
		_node.GoodUserID = value
	}
	if value, ok := ouc.mutation.CoinID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderuser.FieldCoinID,
		})
		_node.CoinID = value
	}
	if value, ok := ouc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderuser.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ouc.mutation.Proportion(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: orderuser.FieldProportion,
		})
		_node.Proportion = value
	}
	if value, ok := ouc.mutation.Start(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderuser.FieldStart,
		})
		_node.Start = value
	}
	if value, ok := ouc.mutation.End(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderuser.FieldEnd,
		})
		_node.End = value
	}
	if value, ok := ouc.mutation.CompensationTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: orderuser.FieldCompensationTime,
		})
		_node.CompensationTime = value
	}
	if value, ok := ouc.mutation.RevenueAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderuser.FieldRevenueAddress,
		})
		_node.RevenueAddress = value
	}
	if value, ok := ouc.mutation.Threshold(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: orderuser.FieldThreshold,
		})
		_node.Threshold = value
	}
	if value, ok := ouc.mutation.ReadPageLink(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: orderuser.FieldReadPageLink,
		})
		_node.ReadPageLink = value
	}
	if value, ok := ouc.mutation.AutoPay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: orderuser.FieldAutoPay,
		})
		_node.AutoPay = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ouc *OrderUserCreate) OnConflict(opts ...sql.ConflictOption) *OrderUserUpsertOne {
	ouc.conflict = opts
	return &OrderUserUpsertOne{
		create: ouc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ouc *OrderUserCreate) OnConflictColumns(columns ...string) *OrderUserUpsertOne {
	ouc.conflict = append(ouc.conflict, sql.ConflictColumns(columns...))
	return &OrderUserUpsertOne{
		create: ouc,
	}
}

type (
	// OrderUserUpsertOne is the builder for "upsert"-ing
	//  one OrderUser node.
	OrderUserUpsertOne struct {
		create *OrderUserCreate
	}

	// OrderUserUpsert is the "OnConflict" setter.
	OrderUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *OrderUserUpsert) SetCreatedAt(v uint32) *OrderUserUpsert {
	u.Set(orderuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateCreatedAt() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUserUpsert) AddCreatedAt(v uint32) *OrderUserUpsert {
	u.Add(orderuser.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUserUpsert) SetUpdatedAt(v uint32) *OrderUserUpsert {
	u.Set(orderuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateUpdatedAt() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUserUpsert) AddUpdatedAt(v uint32) *OrderUserUpsert {
	u.Add(orderuser.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUserUpsert) SetDeletedAt(v uint32) *OrderUserUpsert {
	u.Set(orderuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateDeletedAt() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUserUpsert) AddDeletedAt(v uint32) *OrderUserUpsert {
	u.Add(orderuser.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *OrderUserUpsert) SetEntID(v uuid.UUID) *OrderUserUpsert {
	u.Set(orderuser.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateEntID() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldEntID)
	return u
}

// SetOrderID sets the "order_id" field.
func (u *OrderUserUpsert) SetOrderID(v uuid.UUID) *OrderUserUpsert {
	u.Set(orderuser.FieldOrderID, v)
	return u
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateOrderID() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldOrderID)
	return u
}

// SetGoodUserID sets the "good_user_id" field.
func (u *OrderUserUpsert) SetGoodUserID(v string) *OrderUserUpsert {
	u.Set(orderuser.FieldGoodUserID, v)
	return u
}

// UpdateGoodUserID sets the "good_user_id" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateGoodUserID() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldGoodUserID)
	return u
}

// SetCoinID sets the "coin_id" field.
func (u *OrderUserUpsert) SetCoinID(v string) *OrderUserUpsert {
	u.Set(orderuser.FieldCoinID, v)
	return u
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateCoinID() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldCoinID)
	return u
}

// SetName sets the "name" field.
func (u *OrderUserUpsert) SetName(v string) *OrderUserUpsert {
	u.Set(orderuser.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateName() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldName)
	return u
}

// SetProportion sets the "proportion" field.
func (u *OrderUserUpsert) SetProportion(v float32) *OrderUserUpsert {
	u.Set(orderuser.FieldProportion, v)
	return u
}

// UpdateProportion sets the "proportion" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateProportion() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldProportion)
	return u
}

// AddProportion adds v to the "proportion" field.
func (u *OrderUserUpsert) AddProportion(v float32) *OrderUserUpsert {
	u.Add(orderuser.FieldProportion, v)
	return u
}

// SetStart sets the "start" field.
func (u *OrderUserUpsert) SetStart(v uint32) *OrderUserUpsert {
	u.Set(orderuser.FieldStart, v)
	return u
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateStart() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldStart)
	return u
}

// AddStart adds v to the "start" field.
func (u *OrderUserUpsert) AddStart(v uint32) *OrderUserUpsert {
	u.Add(orderuser.FieldStart, v)
	return u
}

// SetEnd sets the "end" field.
func (u *OrderUserUpsert) SetEnd(v uint32) *OrderUserUpsert {
	u.Set(orderuser.FieldEnd, v)
	return u
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateEnd() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldEnd)
	return u
}

// AddEnd adds v to the "end" field.
func (u *OrderUserUpsert) AddEnd(v uint32) *OrderUserUpsert {
	u.Add(orderuser.FieldEnd, v)
	return u
}

// SetCompensationTime sets the "compensation_time" field.
func (u *OrderUserUpsert) SetCompensationTime(v uint32) *OrderUserUpsert {
	u.Set(orderuser.FieldCompensationTime, v)
	return u
}

// UpdateCompensationTime sets the "compensation_time" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateCompensationTime() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldCompensationTime)
	return u
}

// AddCompensationTime adds v to the "compensation_time" field.
func (u *OrderUserUpsert) AddCompensationTime(v uint32) *OrderUserUpsert {
	u.Add(orderuser.FieldCompensationTime, v)
	return u
}

// ClearCompensationTime clears the value of the "compensation_time" field.
func (u *OrderUserUpsert) ClearCompensationTime() *OrderUserUpsert {
	u.SetNull(orderuser.FieldCompensationTime)
	return u
}

// SetRevenueAddress sets the "revenue_address" field.
func (u *OrderUserUpsert) SetRevenueAddress(v string) *OrderUserUpsert {
	u.Set(orderuser.FieldRevenueAddress, v)
	return u
}

// UpdateRevenueAddress sets the "revenue_address" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateRevenueAddress() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldRevenueAddress)
	return u
}

// ClearRevenueAddress clears the value of the "revenue_address" field.
func (u *OrderUserUpsert) ClearRevenueAddress() *OrderUserUpsert {
	u.SetNull(orderuser.FieldRevenueAddress)
	return u
}

// SetThreshold sets the "threshold" field.
func (u *OrderUserUpsert) SetThreshold(v float32) *OrderUserUpsert {
	u.Set(orderuser.FieldThreshold, v)
	return u
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateThreshold() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldThreshold)
	return u
}

// AddThreshold adds v to the "threshold" field.
func (u *OrderUserUpsert) AddThreshold(v float32) *OrderUserUpsert {
	u.Add(orderuser.FieldThreshold, v)
	return u
}

// SetReadPageLink sets the "read_page_link" field.
func (u *OrderUserUpsert) SetReadPageLink(v string) *OrderUserUpsert {
	u.Set(orderuser.FieldReadPageLink, v)
	return u
}

// UpdateReadPageLink sets the "read_page_link" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateReadPageLink() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldReadPageLink)
	return u
}

// ClearReadPageLink clears the value of the "read_page_link" field.
func (u *OrderUserUpsert) ClearReadPageLink() *OrderUserUpsert {
	u.SetNull(orderuser.FieldReadPageLink)
	return u
}

// SetAutoPay sets the "auto_pay" field.
func (u *OrderUserUpsert) SetAutoPay(v bool) *OrderUserUpsert {
	u.Set(orderuser.FieldAutoPay, v)
	return u
}

// UpdateAutoPay sets the "auto_pay" field to the value that was provided on create.
func (u *OrderUserUpsert) UpdateAutoPay() *OrderUserUpsert {
	u.SetExcluded(orderuser.FieldAutoPay)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OrderUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderUserUpsertOne) UpdateNewValues() *OrderUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(orderuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.OrderUser.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *OrderUserUpsertOne) Ignore() *OrderUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUserUpsertOne) DoNothing() *OrderUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderUserCreate.OnConflict
// documentation for more info.
func (u *OrderUserUpsertOne) Update(set func(*OrderUserUpsert)) *OrderUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUserUpsertOne) SetCreatedAt(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUserUpsertOne) AddCreatedAt(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateCreatedAt() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUserUpsertOne) SetUpdatedAt(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUserUpsertOne) AddUpdatedAt(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateUpdatedAt() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUserUpsertOne) SetDeletedAt(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUserUpsertOne) AddDeletedAt(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateDeletedAt() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderUserUpsertOne) SetEntID(v uuid.UUID) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateEntID() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderUserUpsertOne) SetOrderID(v uuid.UUID) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateOrderID() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateOrderID()
	})
}

// SetGoodUserID sets the "good_user_id" field.
func (u *OrderUserUpsertOne) SetGoodUserID(v string) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetGoodUserID(v)
	})
}

// UpdateGoodUserID sets the "good_user_id" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateGoodUserID() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateGoodUserID()
	})
}

// SetCoinID sets the "coin_id" field.
func (u *OrderUserUpsertOne) SetCoinID(v string) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetCoinID(v)
	})
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateCoinID() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateCoinID()
	})
}

// SetName sets the "name" field.
func (u *OrderUserUpsertOne) SetName(v string) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateName() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateName()
	})
}

// SetProportion sets the "proportion" field.
func (u *OrderUserUpsertOne) SetProportion(v float32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetProportion(v)
	})
}

// AddProportion adds v to the "proportion" field.
func (u *OrderUserUpsertOne) AddProportion(v float32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddProportion(v)
	})
}

// UpdateProportion sets the "proportion" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateProportion() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateProportion()
	})
}

// SetStart sets the "start" field.
func (u *OrderUserUpsertOne) SetStart(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *OrderUserUpsertOne) AddStart(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateStart() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *OrderUserUpsertOne) SetEnd(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *OrderUserUpsertOne) AddEnd(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateEnd() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateEnd()
	})
}

// SetCompensationTime sets the "compensation_time" field.
func (u *OrderUserUpsertOne) SetCompensationTime(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetCompensationTime(v)
	})
}

// AddCompensationTime adds v to the "compensation_time" field.
func (u *OrderUserUpsertOne) AddCompensationTime(v uint32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddCompensationTime(v)
	})
}

// UpdateCompensationTime sets the "compensation_time" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateCompensationTime() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateCompensationTime()
	})
}

// ClearCompensationTime clears the value of the "compensation_time" field.
func (u *OrderUserUpsertOne) ClearCompensationTime() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.ClearCompensationTime()
	})
}

// SetRevenueAddress sets the "revenue_address" field.
func (u *OrderUserUpsertOne) SetRevenueAddress(v string) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetRevenueAddress(v)
	})
}

// UpdateRevenueAddress sets the "revenue_address" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateRevenueAddress() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateRevenueAddress()
	})
}

// ClearRevenueAddress clears the value of the "revenue_address" field.
func (u *OrderUserUpsertOne) ClearRevenueAddress() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.ClearRevenueAddress()
	})
}

// SetThreshold sets the "threshold" field.
func (u *OrderUserUpsertOne) SetThreshold(v float32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetThreshold(v)
	})
}

// AddThreshold adds v to the "threshold" field.
func (u *OrderUserUpsertOne) AddThreshold(v float32) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddThreshold(v)
	})
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateThreshold() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateThreshold()
	})
}

// SetReadPageLink sets the "read_page_link" field.
func (u *OrderUserUpsertOne) SetReadPageLink(v string) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetReadPageLink(v)
	})
}

// UpdateReadPageLink sets the "read_page_link" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateReadPageLink() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateReadPageLink()
	})
}

// ClearReadPageLink clears the value of the "read_page_link" field.
func (u *OrderUserUpsertOne) ClearReadPageLink() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.ClearReadPageLink()
	})
}

// SetAutoPay sets the "auto_pay" field.
func (u *OrderUserUpsertOne) SetAutoPay(v bool) *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetAutoPay(v)
	})
}

// UpdateAutoPay sets the "auto_pay" field to the value that was provided on create.
func (u *OrderUserUpsertOne) UpdateAutoPay() *OrderUserUpsertOne {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateAutoPay()
	})
}

// Exec executes the query.
func (u *OrderUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderUserCreateBulk is the builder for creating many OrderUser entities in bulk.
type OrderUserCreateBulk struct {
	config
	builders []*OrderUserCreate
	conflict []sql.ConflictOption
}

// Save creates the OrderUser entities in the database.
func (oucb *OrderUserCreateBulk) Save(ctx context.Context) ([]*OrderUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(oucb.builders))
	nodes := make([]*OrderUser, len(oucb.builders))
	mutators := make([]Mutator, len(oucb.builders))
	for i := range oucb.builders {
		func(i int, root context.Context) {
			builder := oucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = oucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oucb *OrderUserCreateBulk) SaveX(ctx context.Context) []*OrderUser {
	v, err := oucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oucb *OrderUserCreateBulk) Exec(ctx context.Context) error {
	_, err := oucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oucb *OrderUserCreateBulk) ExecX(ctx context.Context) {
	if err := oucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OrderUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (oucb *OrderUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUserUpsertBulk {
	oucb.conflict = opts
	return &OrderUserUpsertBulk{
		create: oucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OrderUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (oucb *OrderUserCreateBulk) OnConflictColumns(columns ...string) *OrderUserUpsertBulk {
	oucb.conflict = append(oucb.conflict, sql.ConflictColumns(columns...))
	return &OrderUserUpsertBulk{
		create: oucb,
	}
}

// OrderUserUpsertBulk is the builder for "upsert"-ing
// a bulk of OrderUser nodes.
type OrderUserUpsertBulk struct {
	create *OrderUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OrderUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(orderuser.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *OrderUserUpsertBulk) UpdateNewValues() *OrderUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(orderuser.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OrderUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *OrderUserUpsertBulk) Ignore() *OrderUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUserUpsertBulk) DoNothing() *OrderUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderUserCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUserUpsertBulk) Update(set func(*OrderUserUpsert)) *OrderUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUserUpsertBulk) SetCreatedAt(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *OrderUserUpsertBulk) AddCreatedAt(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateCreatedAt() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OrderUserUpsertBulk) SetUpdatedAt(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *OrderUserUpsertBulk) AddUpdatedAt(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateUpdatedAt() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *OrderUserUpsertBulk) SetDeletedAt(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *OrderUserUpsertBulk) AddDeletedAt(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateDeletedAt() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *OrderUserUpsertBulk) SetEntID(v uuid.UUID) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateEntID() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateEntID()
	})
}

// SetOrderID sets the "order_id" field.
func (u *OrderUserUpsertBulk) SetOrderID(v uuid.UUID) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetOrderID(v)
	})
}

// UpdateOrderID sets the "order_id" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateOrderID() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateOrderID()
	})
}

// SetGoodUserID sets the "good_user_id" field.
func (u *OrderUserUpsertBulk) SetGoodUserID(v string) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetGoodUserID(v)
	})
}

// UpdateGoodUserID sets the "good_user_id" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateGoodUserID() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateGoodUserID()
	})
}

// SetCoinID sets the "coin_id" field.
func (u *OrderUserUpsertBulk) SetCoinID(v string) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetCoinID(v)
	})
}

// UpdateCoinID sets the "coin_id" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateCoinID() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateCoinID()
	})
}

// SetName sets the "name" field.
func (u *OrderUserUpsertBulk) SetName(v string) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateName() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateName()
	})
}

// SetProportion sets the "proportion" field.
func (u *OrderUserUpsertBulk) SetProportion(v float32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetProportion(v)
	})
}

// AddProportion adds v to the "proportion" field.
func (u *OrderUserUpsertBulk) AddProportion(v float32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddProportion(v)
	})
}

// UpdateProportion sets the "proportion" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateProportion() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateProportion()
	})
}

// SetStart sets the "start" field.
func (u *OrderUserUpsertBulk) SetStart(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetStart(v)
	})
}

// AddStart adds v to the "start" field.
func (u *OrderUserUpsertBulk) AddStart(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddStart(v)
	})
}

// UpdateStart sets the "start" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateStart() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateStart()
	})
}

// SetEnd sets the "end" field.
func (u *OrderUserUpsertBulk) SetEnd(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetEnd(v)
	})
}

// AddEnd adds v to the "end" field.
func (u *OrderUserUpsertBulk) AddEnd(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddEnd(v)
	})
}

// UpdateEnd sets the "end" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateEnd() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateEnd()
	})
}

// SetCompensationTime sets the "compensation_time" field.
func (u *OrderUserUpsertBulk) SetCompensationTime(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetCompensationTime(v)
	})
}

// AddCompensationTime adds v to the "compensation_time" field.
func (u *OrderUserUpsertBulk) AddCompensationTime(v uint32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddCompensationTime(v)
	})
}

// UpdateCompensationTime sets the "compensation_time" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateCompensationTime() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateCompensationTime()
	})
}

// ClearCompensationTime clears the value of the "compensation_time" field.
func (u *OrderUserUpsertBulk) ClearCompensationTime() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.ClearCompensationTime()
	})
}

// SetRevenueAddress sets the "revenue_address" field.
func (u *OrderUserUpsertBulk) SetRevenueAddress(v string) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetRevenueAddress(v)
	})
}

// UpdateRevenueAddress sets the "revenue_address" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateRevenueAddress() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateRevenueAddress()
	})
}

// ClearRevenueAddress clears the value of the "revenue_address" field.
func (u *OrderUserUpsertBulk) ClearRevenueAddress() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.ClearRevenueAddress()
	})
}

// SetThreshold sets the "threshold" field.
func (u *OrderUserUpsertBulk) SetThreshold(v float32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetThreshold(v)
	})
}

// AddThreshold adds v to the "threshold" field.
func (u *OrderUserUpsertBulk) AddThreshold(v float32) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.AddThreshold(v)
	})
}

// UpdateThreshold sets the "threshold" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateThreshold() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateThreshold()
	})
}

// SetReadPageLink sets the "read_page_link" field.
func (u *OrderUserUpsertBulk) SetReadPageLink(v string) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetReadPageLink(v)
	})
}

// UpdateReadPageLink sets the "read_page_link" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateReadPageLink() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateReadPageLink()
	})
}

// ClearReadPageLink clears the value of the "read_page_link" field.
func (u *OrderUserUpsertBulk) ClearReadPageLink() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.ClearReadPageLink()
	})
}

// SetAutoPay sets the "auto_pay" field.
func (u *OrderUserUpsertBulk) SetAutoPay(v bool) *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.SetAutoPay(v)
	})
}

// UpdateAutoPay sets the "auto_pay" field to the value that was provided on create.
func (u *OrderUserUpsertBulk) UpdateAutoPay() *OrderUserUpsertBulk {
	return u.Update(func(s *OrderUserUpsert) {
		s.UpdateAutoPay()
	})
}

// Exec executes the query.
func (u *OrderUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
