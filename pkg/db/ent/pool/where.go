// Code generated by ent, DO NOT EDIT.

package pool

import (
	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// EntID applies equality check predicate on the "ent_id" field. It's identical to EntIDEQ.
func EntID(v uuid.UUID) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// MiningpoolType applies equality check predicate on the "miningpool_type" field. It's identical to MiningpoolTypeEQ.
func MiningpoolType(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiningpoolType), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Site applies equality check predicate on the "site" field. It's identical to SiteEQ.
func Site(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSite), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...uint32) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...uint32) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...uint32) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...uint32) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...uint32) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...uint32) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v uint32) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// EntIDEQ applies the EQ predicate on the "ent_id" field.
func EntIDEQ(v uuid.UUID) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntID), v))
	})
}

// EntIDNEQ applies the NEQ predicate on the "ent_id" field.
func EntIDNEQ(v uuid.UUID) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntID), v))
	})
}

// EntIDIn applies the In predicate on the "ent_id" field.
func EntIDIn(vs ...uuid.UUID) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntID), v...))
	})
}

// EntIDNotIn applies the NotIn predicate on the "ent_id" field.
func EntIDNotIn(vs ...uuid.UUID) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntID), v...))
	})
}

// EntIDGT applies the GT predicate on the "ent_id" field.
func EntIDGT(v uuid.UUID) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntID), v))
	})
}

// EntIDGTE applies the GTE predicate on the "ent_id" field.
func EntIDGTE(v uuid.UUID) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntID), v))
	})
}

// EntIDLT applies the LT predicate on the "ent_id" field.
func EntIDLT(v uuid.UUID) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntID), v))
	})
}

// EntIDLTE applies the LTE predicate on the "ent_id" field.
func EntIDLTE(v uuid.UUID) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntID), v))
	})
}

// MiningpoolTypeEQ applies the EQ predicate on the "miningpool_type" field.
func MiningpoolTypeEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeNEQ applies the NEQ predicate on the "miningpool_type" field.
func MiningpoolTypeNEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeIn applies the In predicate on the "miningpool_type" field.
func MiningpoolTypeIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMiningpoolType), v...))
	})
}

// MiningpoolTypeNotIn applies the NotIn predicate on the "miningpool_type" field.
func MiningpoolTypeNotIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMiningpoolType), v...))
	})
}

// MiningpoolTypeGT applies the GT predicate on the "miningpool_type" field.
func MiningpoolTypeGT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeGTE applies the GTE predicate on the "miningpool_type" field.
func MiningpoolTypeGTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeLT applies the LT predicate on the "miningpool_type" field.
func MiningpoolTypeLT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeLTE applies the LTE predicate on the "miningpool_type" field.
func MiningpoolTypeLTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeContains applies the Contains predicate on the "miningpool_type" field.
func MiningpoolTypeContains(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeHasPrefix applies the HasPrefix predicate on the "miningpool_type" field.
func MiningpoolTypeHasPrefix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeHasSuffix applies the HasSuffix predicate on the "miningpool_type" field.
func MiningpoolTypeHasSuffix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeEqualFold applies the EqualFold predicate on the "miningpool_type" field.
func MiningpoolTypeEqualFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMiningpoolType), v))
	})
}

// MiningpoolTypeContainsFold applies the ContainsFold predicate on the "miningpool_type" field.
func MiningpoolTypeContainsFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMiningpoolType), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SiteEQ applies the EQ predicate on the "site" field.
func SiteEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSite), v))
	})
}

// SiteNEQ applies the NEQ predicate on the "site" field.
func SiteNEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSite), v))
	})
}

// SiteIn applies the In predicate on the "site" field.
func SiteIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSite), v...))
	})
}

// SiteNotIn applies the NotIn predicate on the "site" field.
func SiteNotIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSite), v...))
	})
}

// SiteGT applies the GT predicate on the "site" field.
func SiteGT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSite), v))
	})
}

// SiteGTE applies the GTE predicate on the "site" field.
func SiteGTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSite), v))
	})
}

// SiteLT applies the LT predicate on the "site" field.
func SiteLT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSite), v))
	})
}

// SiteLTE applies the LTE predicate on the "site" field.
func SiteLTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSite), v))
	})
}

// SiteContains applies the Contains predicate on the "site" field.
func SiteContains(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSite), v))
	})
}

// SiteHasPrefix applies the HasPrefix predicate on the "site" field.
func SiteHasPrefix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSite), v))
	})
}

// SiteHasSuffix applies the HasSuffix predicate on the "site" field.
func SiteHasSuffix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSite), v))
	})
}

// SiteIsNil applies the IsNil predicate on the "site" field.
func SiteIsNil() predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSite)))
	})
}

// SiteNotNil applies the NotNil predicate on the "site" field.
func SiteNotNil() predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSite)))
	})
}

// SiteEqualFold applies the EqualFold predicate on the "site" field.
func SiteEqualFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSite), v))
	})
}

// SiteContainsFold applies the ContainsFold predicate on the "site" field.
func SiteContainsFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSite), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Pool {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Pool) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Pool) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Pool) predicate.Pool {
	return predicate.Pool(func(s *sql.Selector) {
		p(s.Not())
	})
}
