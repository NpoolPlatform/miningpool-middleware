// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/rootuser"
	"github.com/google/uuid"
)

// RootUser is the model entity for the RootUser schema.
type RootUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PoolID holds the value of the "pool_id" field.
	PoolID uuid.UUID `json:"pool_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// AuthToken holds the value of the "auth_token" field.
	AuthToken string `json:"auth_token,omitempty"`
	// AuthTokenSalt holds the value of the "auth_token_salt" field.
	AuthTokenSalt string `json:"auth_token_salt,omitempty"`
	// Authed holds the value of the "authed" field.
	Authed bool `json:"authed,omitempty"`
	// Remark holds the value of the "remark" field.
	Remark string `json:"remark,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RootUser) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case rootuser.FieldAuthed:
			values[i] = new(sql.NullBool)
		case rootuser.FieldID, rootuser.FieldCreatedAt, rootuser.FieldUpdatedAt, rootuser.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case rootuser.FieldName, rootuser.FieldEmail, rootuser.FieldAuthToken, rootuser.FieldAuthTokenSalt, rootuser.FieldRemark:
			values[i] = new(sql.NullString)
		case rootuser.FieldEntID, rootuser.FieldPoolID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RootUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RootUser fields.
func (ru *RootUser) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rootuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ru.ID = uint32(value.Int64)
		case rootuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ru.CreatedAt = uint32(value.Int64)
			}
		case rootuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ru.UpdatedAt = uint32(value.Int64)
			}
		case rootuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ru.DeletedAt = uint32(value.Int64)
			}
		case rootuser.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				ru.EntID = *value
			}
		case rootuser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ru.Name = value.String
			}
		case rootuser.FieldPoolID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field pool_id", values[i])
			} else if value != nil {
				ru.PoolID = *value
			}
		case rootuser.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				ru.Email = value.String
			}
		case rootuser.FieldAuthToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_token", values[i])
			} else if value.Valid {
				ru.AuthToken = value.String
			}
		case rootuser.FieldAuthTokenSalt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_token_salt", values[i])
			} else if value.Valid {
				ru.AuthTokenSalt = value.String
			}
		case rootuser.FieldAuthed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field authed", values[i])
			} else if value.Valid {
				ru.Authed = value.Bool
			}
		case rootuser.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				ru.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RootUser.
// Note that you need to call RootUser.Unwrap() before calling this method if this RootUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ru *RootUser) Update() *RootUserUpdateOne {
	return (&RootUserClient{config: ru.config}).UpdateOne(ru)
}

// Unwrap unwraps the RootUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ru *RootUser) Unwrap() *RootUser {
	_tx, ok := ru.config.driver.(*txDriver)
	if !ok {
		panic("ent: RootUser is not a transactional entity")
	}
	ru.config.driver = _tx.drv
	return ru
}

// String implements the fmt.Stringer.
func (ru *RootUser) String() string {
	var builder strings.Builder
	builder.WriteString("RootUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ru.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", ru.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", ru.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", ru.DeletedAt))
	builder.WriteString(", ")
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", ru.EntID))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ru.Name)
	builder.WriteString(", ")
	builder.WriteString("pool_id=")
	builder.WriteString(fmt.Sprintf("%v", ru.PoolID))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(ru.Email)
	builder.WriteString(", ")
	builder.WriteString("auth_token=")
	builder.WriteString(ru.AuthToken)
	builder.WriteString(", ")
	builder.WriteString("auth_token_salt=")
	builder.WriteString(ru.AuthTokenSalt)
	builder.WriteString(", ")
	builder.WriteString("authed=")
	builder.WriteString(fmt.Sprintf("%v", ru.Authed))
	builder.WriteString(", ")
	builder.WriteString("remark=")
	builder.WriteString(ru.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// RootUsers is a parsable slice of RootUser.
type RootUsers []*RootUser

func (ru RootUsers) config(cfg config) {
	for _i := range ru {
		ru[_i].config = cfg
	}
}
