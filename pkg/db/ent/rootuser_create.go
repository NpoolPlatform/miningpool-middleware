// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/rootuser"
	"github.com/google/uuid"
)

// RootUserCreate is the builder for creating a RootUser entity.
type RootUserCreate struct {
	config
	mutation *RootUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ruc *RootUserCreate) SetCreatedAt(u uint32) *RootUserCreate {
	ruc.mutation.SetCreatedAt(u)
	return ruc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableCreatedAt(u *uint32) *RootUserCreate {
	if u != nil {
		ruc.SetCreatedAt(*u)
	}
	return ruc
}

// SetUpdatedAt sets the "updated_at" field.
func (ruc *RootUserCreate) SetUpdatedAt(u uint32) *RootUserCreate {
	ruc.mutation.SetUpdatedAt(u)
	return ruc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableUpdatedAt(u *uint32) *RootUserCreate {
	if u != nil {
		ruc.SetUpdatedAt(*u)
	}
	return ruc
}

// SetDeletedAt sets the "deleted_at" field.
func (ruc *RootUserCreate) SetDeletedAt(u uint32) *RootUserCreate {
	ruc.mutation.SetDeletedAt(u)
	return ruc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableDeletedAt(u *uint32) *RootUserCreate {
	if u != nil {
		ruc.SetDeletedAt(*u)
	}
	return ruc
}

// SetEntID sets the "ent_id" field.
func (ruc *RootUserCreate) SetEntID(u uuid.UUID) *RootUserCreate {
	ruc.mutation.SetEntID(u)
	return ruc
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableEntID(u *uuid.UUID) *RootUserCreate {
	if u != nil {
		ruc.SetEntID(*u)
	}
	return ruc
}

// SetName sets the "name" field.
func (ruc *RootUserCreate) SetName(s string) *RootUserCreate {
	ruc.mutation.SetName(s)
	return ruc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableName(s *string) *RootUserCreate {
	if s != nil {
		ruc.SetName(*s)
	}
	return ruc
}

// SetMiningpoolType sets the "miningpool_type" field.
func (ruc *RootUserCreate) SetMiningpoolType(s string) *RootUserCreate {
	ruc.mutation.SetMiningpoolType(s)
	return ruc
}

// SetNillableMiningpoolType sets the "miningpool_type" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableMiningpoolType(s *string) *RootUserCreate {
	if s != nil {
		ruc.SetMiningpoolType(*s)
	}
	return ruc
}

// SetEmail sets the "email" field.
func (ruc *RootUserCreate) SetEmail(s string) *RootUserCreate {
	ruc.mutation.SetEmail(s)
	return ruc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableEmail(s *string) *RootUserCreate {
	if s != nil {
		ruc.SetEmail(*s)
	}
	return ruc
}

// SetAuthToken sets the "auth_token" field.
func (ruc *RootUserCreate) SetAuthToken(s string) *RootUserCreate {
	ruc.mutation.SetAuthToken(s)
	return ruc
}

// SetNillableAuthToken sets the "auth_token" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableAuthToken(s *string) *RootUserCreate {
	if s != nil {
		ruc.SetAuthToken(*s)
	}
	return ruc
}

// SetAuthTokenSalt sets the "auth_token_salt" field.
func (ruc *RootUserCreate) SetAuthTokenSalt(s string) *RootUserCreate {
	ruc.mutation.SetAuthTokenSalt(s)
	return ruc
}

// SetNillableAuthTokenSalt sets the "auth_token_salt" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableAuthTokenSalt(s *string) *RootUserCreate {
	if s != nil {
		ruc.SetAuthTokenSalt(*s)
	}
	return ruc
}

// SetAuthed sets the "authed" field.
func (ruc *RootUserCreate) SetAuthed(b bool) *RootUserCreate {
	ruc.mutation.SetAuthed(b)
	return ruc
}

// SetNillableAuthed sets the "authed" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableAuthed(b *bool) *RootUserCreate {
	if b != nil {
		ruc.SetAuthed(*b)
	}
	return ruc
}

// SetRemark sets the "remark" field.
func (ruc *RootUserCreate) SetRemark(s string) *RootUserCreate {
	ruc.mutation.SetRemark(s)
	return ruc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruc *RootUserCreate) SetNillableRemark(s *string) *RootUserCreate {
	if s != nil {
		ruc.SetRemark(*s)
	}
	return ruc
}

// SetID sets the "id" field.
func (ruc *RootUserCreate) SetID(u uint32) *RootUserCreate {
	ruc.mutation.SetID(u)
	return ruc
}

// Mutation returns the RootUserMutation object of the builder.
func (ruc *RootUserCreate) Mutation() *RootUserMutation {
	return ruc.mutation
}

// Save creates the RootUser in the database.
func (ruc *RootUserCreate) Save(ctx context.Context) (*RootUser, error) {
	var (
		err  error
		node *RootUser
	)
	if err := ruc.defaults(); err != nil {
		return nil, err
	}
	if len(ruc.hooks) == 0 {
		if err = ruc.check(); err != nil {
			return nil, err
		}
		node, err = ruc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RootUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruc.check(); err != nil {
				return nil, err
			}
			ruc.mutation = mutation
			if node, err = ruc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ruc.hooks) - 1; i >= 0; i-- {
			if ruc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RootUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RootUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *RootUserCreate) SaveX(ctx context.Context) *RootUser {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ruc *RootUserCreate) Exec(ctx context.Context) error {
	_, err := ruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruc *RootUserCreate) ExecX(ctx context.Context) {
	if err := ruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruc *RootUserCreate) defaults() error {
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		if rootuser.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized rootuser.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := rootuser.DefaultCreatedAt()
		ruc.mutation.SetCreatedAt(v)
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		if rootuser.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rootuser.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rootuser.DefaultUpdatedAt()
		ruc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ruc.mutation.DeletedAt(); !ok {
		if rootuser.DefaultDeletedAt == nil {
			return fmt.Errorf("ent: uninitialized rootuser.DefaultDeletedAt (forgotten import ent/runtime?)")
		}
		v := rootuser.DefaultDeletedAt()
		ruc.mutation.SetDeletedAt(v)
	}
	if _, ok := ruc.mutation.EntID(); !ok {
		if rootuser.DefaultEntID == nil {
			return fmt.Errorf("ent: uninitialized rootuser.DefaultEntID (forgotten import ent/runtime?)")
		}
		v := rootuser.DefaultEntID()
		ruc.mutation.SetEntID(v)
	}
	if _, ok := ruc.mutation.Name(); !ok {
		v := rootuser.DefaultName
		ruc.mutation.SetName(v)
	}
	if _, ok := ruc.mutation.MiningpoolType(); !ok {
		v := rootuser.DefaultMiningpoolType
		ruc.mutation.SetMiningpoolType(v)
	}
	if _, ok := ruc.mutation.Email(); !ok {
		v := rootuser.DefaultEmail
		ruc.mutation.SetEmail(v)
	}
	if _, ok := ruc.mutation.AuthToken(); !ok {
		v := rootuser.DefaultAuthToken
		ruc.mutation.SetAuthToken(v)
	}
	if _, ok := ruc.mutation.AuthTokenSalt(); !ok {
		v := rootuser.DefaultAuthTokenSalt
		ruc.mutation.SetAuthTokenSalt(v)
	}
	if _, ok := ruc.mutation.Authed(); !ok {
		v := rootuser.DefaultAuthed
		ruc.mutation.SetAuthed(v)
	}
	if _, ok := ruc.mutation.Remark(); !ok {
		v := rootuser.DefaultRemark
		ruc.mutation.SetRemark(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruc *RootUserCreate) check() error {
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RootUser.created_at"`)}
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RootUser.updated_at"`)}
	}
	if _, ok := ruc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "RootUser.deleted_at"`)}
	}
	if _, ok := ruc.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "RootUser.ent_id"`)}
	}
	return nil
}

func (ruc *RootUserCreate) sqlSave(ctx context.Context) (*RootUser, error) {
	_node, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (ruc *RootUserCreate) createSpec() (*RootUser, *sqlgraph.CreateSpec) {
	var (
		_node = &RootUser{config: ruc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rootuser.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: rootuser.FieldID,
			},
		}
	)
	_spec.OnConflict = ruc.conflict
	if id, ok := ruc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ruc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ruc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ruc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := ruc.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: rootuser.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := ruc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ruc.mutation.MiningpoolType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldMiningpoolType,
		})
		_node.MiningpoolType = value
	}
	if value, ok := ruc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := ruc.mutation.AuthToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldAuthToken,
		})
		_node.AuthToken = value
	}
	if value, ok := ruc.mutation.AuthTokenSalt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldAuthTokenSalt,
		})
		_node.AuthTokenSalt = value
	}
	if value, ok := ruc.mutation.Authed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rootuser.FieldAuthed,
		})
		_node.Authed = value
	}
	if value, ok := ruc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RootUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RootUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ruc *RootUserCreate) OnConflict(opts ...sql.ConflictOption) *RootUserUpsertOne {
	ruc.conflict = opts
	return &RootUserUpsertOne{
		create: ruc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RootUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ruc *RootUserCreate) OnConflictColumns(columns ...string) *RootUserUpsertOne {
	ruc.conflict = append(ruc.conflict, sql.ConflictColumns(columns...))
	return &RootUserUpsertOne{
		create: ruc,
	}
}

type (
	// RootUserUpsertOne is the builder for "upsert"-ing
	//  one RootUser node.
	RootUserUpsertOne struct {
		create *RootUserCreate
	}

	// RootUserUpsert is the "OnConflict" setter.
	RootUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *RootUserUpsert) SetCreatedAt(v uint32) *RootUserUpsert {
	u.Set(rootuser.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateCreatedAt() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RootUserUpsert) AddCreatedAt(v uint32) *RootUserUpsert {
	u.Add(rootuser.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RootUserUpsert) SetUpdatedAt(v uint32) *RootUserUpsert {
	u.Set(rootuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateUpdatedAt() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RootUserUpsert) AddUpdatedAt(v uint32) *RootUserUpsert {
	u.Add(rootuser.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RootUserUpsert) SetDeletedAt(v uint32) *RootUserUpsert {
	u.Set(rootuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateDeletedAt() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RootUserUpsert) AddDeletedAt(v uint32) *RootUserUpsert {
	u.Add(rootuser.FieldDeletedAt, v)
	return u
}

// SetEntID sets the "ent_id" field.
func (u *RootUserUpsert) SetEntID(v uuid.UUID) *RootUserUpsert {
	u.Set(rootuser.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateEntID() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldEntID)
	return u
}

// SetName sets the "name" field.
func (u *RootUserUpsert) SetName(v string) *RootUserUpsert {
	u.Set(rootuser.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateName() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *RootUserUpsert) ClearName() *RootUserUpsert {
	u.SetNull(rootuser.FieldName)
	return u
}

// SetMiningpoolType sets the "miningpool_type" field.
func (u *RootUserUpsert) SetMiningpoolType(v string) *RootUserUpsert {
	u.Set(rootuser.FieldMiningpoolType, v)
	return u
}

// UpdateMiningpoolType sets the "miningpool_type" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateMiningpoolType() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldMiningpoolType)
	return u
}

// ClearMiningpoolType clears the value of the "miningpool_type" field.
func (u *RootUserUpsert) ClearMiningpoolType() *RootUserUpsert {
	u.SetNull(rootuser.FieldMiningpoolType)
	return u
}

// SetEmail sets the "email" field.
func (u *RootUserUpsert) SetEmail(v string) *RootUserUpsert {
	u.Set(rootuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateEmail() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *RootUserUpsert) ClearEmail() *RootUserUpsert {
	u.SetNull(rootuser.FieldEmail)
	return u
}

// SetAuthToken sets the "auth_token" field.
func (u *RootUserUpsert) SetAuthToken(v string) *RootUserUpsert {
	u.Set(rootuser.FieldAuthToken, v)
	return u
}

// UpdateAuthToken sets the "auth_token" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateAuthToken() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldAuthToken)
	return u
}

// ClearAuthToken clears the value of the "auth_token" field.
func (u *RootUserUpsert) ClearAuthToken() *RootUserUpsert {
	u.SetNull(rootuser.FieldAuthToken)
	return u
}

// SetAuthTokenSalt sets the "auth_token_salt" field.
func (u *RootUserUpsert) SetAuthTokenSalt(v string) *RootUserUpsert {
	u.Set(rootuser.FieldAuthTokenSalt, v)
	return u
}

// UpdateAuthTokenSalt sets the "auth_token_salt" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateAuthTokenSalt() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldAuthTokenSalt)
	return u
}

// ClearAuthTokenSalt clears the value of the "auth_token_salt" field.
func (u *RootUserUpsert) ClearAuthTokenSalt() *RootUserUpsert {
	u.SetNull(rootuser.FieldAuthTokenSalt)
	return u
}

// SetAuthed sets the "authed" field.
func (u *RootUserUpsert) SetAuthed(v bool) *RootUserUpsert {
	u.Set(rootuser.FieldAuthed, v)
	return u
}

// UpdateAuthed sets the "authed" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateAuthed() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldAuthed)
	return u
}

// ClearAuthed clears the value of the "authed" field.
func (u *RootUserUpsert) ClearAuthed() *RootUserUpsert {
	u.SetNull(rootuser.FieldAuthed)
	return u
}

// SetRemark sets the "remark" field.
func (u *RootUserUpsert) SetRemark(v string) *RootUserUpsert {
	u.Set(rootuser.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RootUserUpsert) UpdateRemark() *RootUserUpsert {
	u.SetExcluded(rootuser.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *RootUserUpsert) ClearRemark() *RootUserUpsert {
	u.SetNull(rootuser.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RootUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rootuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RootUserUpsertOne) UpdateNewValues() *RootUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rootuser.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RootUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RootUserUpsertOne) Ignore() *RootUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RootUserUpsertOne) DoNothing() *RootUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RootUserCreate.OnConflict
// documentation for more info.
func (u *RootUserUpsertOne) Update(set func(*RootUserUpsert)) *RootUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RootUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RootUserUpsertOne) SetCreatedAt(v uint32) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RootUserUpsertOne) AddCreatedAt(v uint32) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateCreatedAt() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RootUserUpsertOne) SetUpdatedAt(v uint32) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RootUserUpsertOne) AddUpdatedAt(v uint32) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateUpdatedAt() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RootUserUpsertOne) SetDeletedAt(v uint32) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RootUserUpsertOne) AddDeletedAt(v uint32) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateDeletedAt() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *RootUserUpsertOne) SetEntID(v uuid.UUID) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateEntID() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateEntID()
	})
}

// SetName sets the "name" field.
func (u *RootUserUpsertOne) SetName(v string) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateName() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RootUserUpsertOne) ClearName() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearName()
	})
}

// SetMiningpoolType sets the "miningpool_type" field.
func (u *RootUserUpsertOne) SetMiningpoolType(v string) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetMiningpoolType(v)
	})
}

// UpdateMiningpoolType sets the "miningpool_type" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateMiningpoolType() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateMiningpoolType()
	})
}

// ClearMiningpoolType clears the value of the "miningpool_type" field.
func (u *RootUserUpsertOne) ClearMiningpoolType() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearMiningpoolType()
	})
}

// SetEmail sets the "email" field.
func (u *RootUserUpsertOne) SetEmail(v string) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateEmail() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *RootUserUpsertOne) ClearEmail() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearEmail()
	})
}

// SetAuthToken sets the "auth_token" field.
func (u *RootUserUpsertOne) SetAuthToken(v string) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetAuthToken(v)
	})
}

// UpdateAuthToken sets the "auth_token" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateAuthToken() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateAuthToken()
	})
}

// ClearAuthToken clears the value of the "auth_token" field.
func (u *RootUserUpsertOne) ClearAuthToken() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearAuthToken()
	})
}

// SetAuthTokenSalt sets the "auth_token_salt" field.
func (u *RootUserUpsertOne) SetAuthTokenSalt(v string) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetAuthTokenSalt(v)
	})
}

// UpdateAuthTokenSalt sets the "auth_token_salt" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateAuthTokenSalt() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateAuthTokenSalt()
	})
}

// ClearAuthTokenSalt clears the value of the "auth_token_salt" field.
func (u *RootUserUpsertOne) ClearAuthTokenSalt() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearAuthTokenSalt()
	})
}

// SetAuthed sets the "authed" field.
func (u *RootUserUpsertOne) SetAuthed(v bool) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetAuthed(v)
	})
}

// UpdateAuthed sets the "authed" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateAuthed() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateAuthed()
	})
}

// ClearAuthed clears the value of the "authed" field.
func (u *RootUserUpsertOne) ClearAuthed() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearAuthed()
	})
}

// SetRemark sets the "remark" field.
func (u *RootUserUpsertOne) SetRemark(v string) *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RootUserUpsertOne) UpdateRemark() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RootUserUpsertOne) ClearRemark() *RootUserUpsertOne {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *RootUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RootUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RootUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RootUserUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RootUserUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RootUserCreateBulk is the builder for creating many RootUser entities in bulk.
type RootUserCreateBulk struct {
	config
	builders []*RootUserCreate
	conflict []sql.ConflictOption
}

// Save creates the RootUser entities in the database.
func (rucb *RootUserCreateBulk) Save(ctx context.Context) ([]*RootUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rucb.builders))
	nodes := make([]*RootUser, len(rucb.builders))
	mutators := make([]Mutator, len(rucb.builders))
	for i := range rucb.builders {
		func(i int, root context.Context) {
			builder := rucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RootUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rucb *RootUserCreateBulk) SaveX(ctx context.Context) []*RootUser {
	v, err := rucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rucb *RootUserCreateBulk) Exec(ctx context.Context) error {
	_, err := rucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rucb *RootUserCreateBulk) ExecX(ctx context.Context) {
	if err := rucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RootUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RootUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (rucb *RootUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *RootUserUpsertBulk {
	rucb.conflict = opts
	return &RootUserUpsertBulk{
		create: rucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RootUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rucb *RootUserCreateBulk) OnConflictColumns(columns ...string) *RootUserUpsertBulk {
	rucb.conflict = append(rucb.conflict, sql.ConflictColumns(columns...))
	return &RootUserUpsertBulk{
		create: rucb,
	}
}

// RootUserUpsertBulk is the builder for "upsert"-ing
// a bulk of RootUser nodes.
type RootUserUpsertBulk struct {
	create *RootUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RootUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rootuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RootUserUpsertBulk) UpdateNewValues() *RootUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rootuser.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RootUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RootUserUpsertBulk) Ignore() *RootUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RootUserUpsertBulk) DoNothing() *RootUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RootUserCreateBulk.OnConflict
// documentation for more info.
func (u *RootUserUpsertBulk) Update(set func(*RootUserUpsert)) *RootUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RootUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RootUserUpsertBulk) SetCreatedAt(v uint32) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RootUserUpsertBulk) AddCreatedAt(v uint32) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateCreatedAt() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RootUserUpsertBulk) SetUpdatedAt(v uint32) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RootUserUpsertBulk) AddUpdatedAt(v uint32) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateUpdatedAt() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RootUserUpsertBulk) SetDeletedAt(v uint32) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RootUserUpsertBulk) AddDeletedAt(v uint32) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateDeletedAt() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// SetEntID sets the "ent_id" field.
func (u *RootUserUpsertBulk) SetEntID(v uuid.UUID) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateEntID() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateEntID()
	})
}

// SetName sets the "name" field.
func (u *RootUserUpsertBulk) SetName(v string) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateName() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *RootUserUpsertBulk) ClearName() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearName()
	})
}

// SetMiningpoolType sets the "miningpool_type" field.
func (u *RootUserUpsertBulk) SetMiningpoolType(v string) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetMiningpoolType(v)
	})
}

// UpdateMiningpoolType sets the "miningpool_type" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateMiningpoolType() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateMiningpoolType()
	})
}

// ClearMiningpoolType clears the value of the "miningpool_type" field.
func (u *RootUserUpsertBulk) ClearMiningpoolType() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearMiningpoolType()
	})
}

// SetEmail sets the "email" field.
func (u *RootUserUpsertBulk) SetEmail(v string) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateEmail() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *RootUserUpsertBulk) ClearEmail() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearEmail()
	})
}

// SetAuthToken sets the "auth_token" field.
func (u *RootUserUpsertBulk) SetAuthToken(v string) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetAuthToken(v)
	})
}

// UpdateAuthToken sets the "auth_token" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateAuthToken() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateAuthToken()
	})
}

// ClearAuthToken clears the value of the "auth_token" field.
func (u *RootUserUpsertBulk) ClearAuthToken() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearAuthToken()
	})
}

// SetAuthTokenSalt sets the "auth_token_salt" field.
func (u *RootUserUpsertBulk) SetAuthTokenSalt(v string) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetAuthTokenSalt(v)
	})
}

// UpdateAuthTokenSalt sets the "auth_token_salt" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateAuthTokenSalt() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateAuthTokenSalt()
	})
}

// ClearAuthTokenSalt clears the value of the "auth_token_salt" field.
func (u *RootUserUpsertBulk) ClearAuthTokenSalt() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearAuthTokenSalt()
	})
}

// SetAuthed sets the "authed" field.
func (u *RootUserUpsertBulk) SetAuthed(v bool) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetAuthed(v)
	})
}

// UpdateAuthed sets the "authed" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateAuthed() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateAuthed()
	})
}

// ClearAuthed clears the value of the "authed" field.
func (u *RootUserUpsertBulk) ClearAuthed() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearAuthed()
	})
}

// SetRemark sets the "remark" field.
func (u *RootUserUpsertBulk) SetRemark(v string) *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *RootUserUpsertBulk) UpdateRemark() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *RootUserUpsertBulk) ClearRemark() *RootUserUpsertBulk {
	return u.Update(func(s *RootUserUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *RootUserUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RootUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RootUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RootUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
