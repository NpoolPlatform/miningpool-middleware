// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/miningpool-middleware/pkg/db/ent/rootuser"
	"github.com/google/uuid"
)

// RootUserUpdate is the builder for updating RootUser entities.
type RootUserUpdate struct {
	config
	hooks     []Hook
	mutation  *RootUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RootUserUpdate builder.
func (ruu *RootUserUpdate) Where(ps ...predicate.RootUser) *RootUserUpdate {
	ruu.mutation.Where(ps...)
	return ruu
}

// SetCreatedAt sets the "created_at" field.
func (ruu *RootUserUpdate) SetCreatedAt(u uint32) *RootUserUpdate {
	ruu.mutation.ResetCreatedAt()
	ruu.mutation.SetCreatedAt(u)
	return ruu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableCreatedAt(u *uint32) *RootUserUpdate {
	if u != nil {
		ruu.SetCreatedAt(*u)
	}
	return ruu
}

// AddCreatedAt adds u to the "created_at" field.
func (ruu *RootUserUpdate) AddCreatedAt(u int32) *RootUserUpdate {
	ruu.mutation.AddCreatedAt(u)
	return ruu
}

// SetUpdatedAt sets the "updated_at" field.
func (ruu *RootUserUpdate) SetUpdatedAt(u uint32) *RootUserUpdate {
	ruu.mutation.ResetUpdatedAt()
	ruu.mutation.SetUpdatedAt(u)
	return ruu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ruu *RootUserUpdate) AddUpdatedAt(u int32) *RootUserUpdate {
	ruu.mutation.AddUpdatedAt(u)
	return ruu
}

// SetDeletedAt sets the "deleted_at" field.
func (ruu *RootUserUpdate) SetDeletedAt(u uint32) *RootUserUpdate {
	ruu.mutation.ResetDeletedAt()
	ruu.mutation.SetDeletedAt(u)
	return ruu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableDeletedAt(u *uint32) *RootUserUpdate {
	if u != nil {
		ruu.SetDeletedAt(*u)
	}
	return ruu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ruu *RootUserUpdate) AddDeletedAt(u int32) *RootUserUpdate {
	ruu.mutation.AddDeletedAt(u)
	return ruu
}

// SetEntID sets the "ent_id" field.
func (ruu *RootUserUpdate) SetEntID(u uuid.UUID) *RootUserUpdate {
	ruu.mutation.SetEntID(u)
	return ruu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableEntID(u *uuid.UUID) *RootUserUpdate {
	if u != nil {
		ruu.SetEntID(*u)
	}
	return ruu
}

// SetName sets the "name" field.
func (ruu *RootUserUpdate) SetName(s string) *RootUserUpdate {
	ruu.mutation.SetName(s)
	return ruu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableName(s *string) *RootUserUpdate {
	if s != nil {
		ruu.SetName(*s)
	}
	return ruu
}

// ClearName clears the value of the "name" field.
func (ruu *RootUserUpdate) ClearName() *RootUserUpdate {
	ruu.mutation.ClearName()
	return ruu
}

// SetPoolID sets the "pool_id" field.
func (ruu *RootUserUpdate) SetPoolID(u uuid.UUID) *RootUserUpdate {
	ruu.mutation.SetPoolID(u)
	return ruu
}

// SetNillablePoolID sets the "pool_id" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillablePoolID(u *uuid.UUID) *RootUserUpdate {
	if u != nil {
		ruu.SetPoolID(*u)
	}
	return ruu
}

// ClearPoolID clears the value of the "pool_id" field.
func (ruu *RootUserUpdate) ClearPoolID() *RootUserUpdate {
	ruu.mutation.ClearPoolID()
	return ruu
}

// SetEmail sets the "email" field.
func (ruu *RootUserUpdate) SetEmail(s string) *RootUserUpdate {
	ruu.mutation.SetEmail(s)
	return ruu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableEmail(s *string) *RootUserUpdate {
	if s != nil {
		ruu.SetEmail(*s)
	}
	return ruu
}

// ClearEmail clears the value of the "email" field.
func (ruu *RootUserUpdate) ClearEmail() *RootUserUpdate {
	ruu.mutation.ClearEmail()
	return ruu
}

// SetAuthToken sets the "auth_token" field.
func (ruu *RootUserUpdate) SetAuthToken(s string) *RootUserUpdate {
	ruu.mutation.SetAuthToken(s)
	return ruu
}

// SetNillableAuthToken sets the "auth_token" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableAuthToken(s *string) *RootUserUpdate {
	if s != nil {
		ruu.SetAuthToken(*s)
	}
	return ruu
}

// ClearAuthToken clears the value of the "auth_token" field.
func (ruu *RootUserUpdate) ClearAuthToken() *RootUserUpdate {
	ruu.mutation.ClearAuthToken()
	return ruu
}

// SetAuthTokenSalt sets the "auth_token_salt" field.
func (ruu *RootUserUpdate) SetAuthTokenSalt(s string) *RootUserUpdate {
	ruu.mutation.SetAuthTokenSalt(s)
	return ruu
}

// SetNillableAuthTokenSalt sets the "auth_token_salt" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableAuthTokenSalt(s *string) *RootUserUpdate {
	if s != nil {
		ruu.SetAuthTokenSalt(*s)
	}
	return ruu
}

// ClearAuthTokenSalt clears the value of the "auth_token_salt" field.
func (ruu *RootUserUpdate) ClearAuthTokenSalt() *RootUserUpdate {
	ruu.mutation.ClearAuthTokenSalt()
	return ruu
}

// SetAuthed sets the "authed" field.
func (ruu *RootUserUpdate) SetAuthed(b bool) *RootUserUpdate {
	ruu.mutation.SetAuthed(b)
	return ruu
}

// SetNillableAuthed sets the "authed" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableAuthed(b *bool) *RootUserUpdate {
	if b != nil {
		ruu.SetAuthed(*b)
	}
	return ruu
}

// ClearAuthed clears the value of the "authed" field.
func (ruu *RootUserUpdate) ClearAuthed() *RootUserUpdate {
	ruu.mutation.ClearAuthed()
	return ruu
}

// SetRemark sets the "remark" field.
func (ruu *RootUserUpdate) SetRemark(s string) *RootUserUpdate {
	ruu.mutation.SetRemark(s)
	return ruu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruu *RootUserUpdate) SetNillableRemark(s *string) *RootUserUpdate {
	if s != nil {
		ruu.SetRemark(*s)
	}
	return ruu
}

// ClearRemark clears the value of the "remark" field.
func (ruu *RootUserUpdate) ClearRemark() *RootUserUpdate {
	ruu.mutation.ClearRemark()
	return ruu
}

// Mutation returns the RootUserMutation object of the builder.
func (ruu *RootUserUpdate) Mutation() *RootUserMutation {
	return ruu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ruu *RootUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ruu.defaults(); err != nil {
		return 0, err
	}
	if len(ruu.hooks) == 0 {
		affected, err = ruu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RootUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruu.mutation = mutation
			affected, err = ruu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ruu.hooks) - 1; i >= 0; i-- {
			if ruu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruu *RootUserUpdate) SaveX(ctx context.Context) int {
	affected, err := ruu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ruu *RootUserUpdate) Exec(ctx context.Context) error {
	_, err := ruu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruu *RootUserUpdate) ExecX(ctx context.Context) {
	if err := ruu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruu *RootUserUpdate) defaults() error {
	if _, ok := ruu.mutation.UpdatedAt(); !ok {
		if rootuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rootuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rootuser.UpdateDefaultUpdatedAt()
		ruu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruu *RootUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RootUserUpdate {
	ruu.modifiers = append(ruu.modifiers, modifiers...)
	return ruu
}

func (ruu *RootUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rootuser.Table,
			Columns: rootuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: rootuser.FieldID,
			},
		},
	}
	if ps := ruu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldCreatedAt,
		})
	}
	if value, ok := ruu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldCreatedAt,
		})
	}
	if value, ok := ruu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldUpdatedAt,
		})
	}
	if value, ok := ruu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldUpdatedAt,
		})
	}
	if value, ok := ruu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldDeletedAt,
		})
	}
	if value, ok := ruu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldDeletedAt,
		})
	}
	if value, ok := ruu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: rootuser.FieldEntID,
		})
	}
	if value, ok := ruu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldName,
		})
	}
	if ruu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldName,
		})
	}
	if value, ok := ruu.mutation.PoolID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: rootuser.FieldPoolID,
		})
	}
	if ruu.mutation.PoolIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: rootuser.FieldPoolID,
		})
	}
	if value, ok := ruu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldEmail,
		})
	}
	if ruu.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldEmail,
		})
	}
	if value, ok := ruu.mutation.AuthToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldAuthToken,
		})
	}
	if ruu.mutation.AuthTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldAuthToken,
		})
	}
	if value, ok := ruu.mutation.AuthTokenSalt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldAuthTokenSalt,
		})
	}
	if ruu.mutation.AuthTokenSaltCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldAuthTokenSalt,
		})
	}
	if value, ok := ruu.mutation.Authed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rootuser.FieldAuthed,
		})
	}
	if ruu.mutation.AuthedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: rootuser.FieldAuthed,
		})
	}
	if value, ok := ruu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldRemark,
		})
	}
	if ruu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldRemark,
		})
	}
	_spec.Modifiers = ruu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, ruu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rootuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RootUserUpdateOne is the builder for updating a single RootUser entity.
type RootUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RootUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (ruuo *RootUserUpdateOne) SetCreatedAt(u uint32) *RootUserUpdateOne {
	ruuo.mutation.ResetCreatedAt()
	ruuo.mutation.SetCreatedAt(u)
	return ruuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableCreatedAt(u *uint32) *RootUserUpdateOne {
	if u != nil {
		ruuo.SetCreatedAt(*u)
	}
	return ruuo
}

// AddCreatedAt adds u to the "created_at" field.
func (ruuo *RootUserUpdateOne) AddCreatedAt(u int32) *RootUserUpdateOne {
	ruuo.mutation.AddCreatedAt(u)
	return ruuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruuo *RootUserUpdateOne) SetUpdatedAt(u uint32) *RootUserUpdateOne {
	ruuo.mutation.ResetUpdatedAt()
	ruuo.mutation.SetUpdatedAt(u)
	return ruuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (ruuo *RootUserUpdateOne) AddUpdatedAt(u int32) *RootUserUpdateOne {
	ruuo.mutation.AddUpdatedAt(u)
	return ruuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruuo *RootUserUpdateOne) SetDeletedAt(u uint32) *RootUserUpdateOne {
	ruuo.mutation.ResetDeletedAt()
	ruuo.mutation.SetDeletedAt(u)
	return ruuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableDeletedAt(u *uint32) *RootUserUpdateOne {
	if u != nil {
		ruuo.SetDeletedAt(*u)
	}
	return ruuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (ruuo *RootUserUpdateOne) AddDeletedAt(u int32) *RootUserUpdateOne {
	ruuo.mutation.AddDeletedAt(u)
	return ruuo
}

// SetEntID sets the "ent_id" field.
func (ruuo *RootUserUpdateOne) SetEntID(u uuid.UUID) *RootUserUpdateOne {
	ruuo.mutation.SetEntID(u)
	return ruuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableEntID(u *uuid.UUID) *RootUserUpdateOne {
	if u != nil {
		ruuo.SetEntID(*u)
	}
	return ruuo
}

// SetName sets the "name" field.
func (ruuo *RootUserUpdateOne) SetName(s string) *RootUserUpdateOne {
	ruuo.mutation.SetName(s)
	return ruuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableName(s *string) *RootUserUpdateOne {
	if s != nil {
		ruuo.SetName(*s)
	}
	return ruuo
}

// ClearName clears the value of the "name" field.
func (ruuo *RootUserUpdateOne) ClearName() *RootUserUpdateOne {
	ruuo.mutation.ClearName()
	return ruuo
}

// SetPoolID sets the "pool_id" field.
func (ruuo *RootUserUpdateOne) SetPoolID(u uuid.UUID) *RootUserUpdateOne {
	ruuo.mutation.SetPoolID(u)
	return ruuo
}

// SetNillablePoolID sets the "pool_id" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillablePoolID(u *uuid.UUID) *RootUserUpdateOne {
	if u != nil {
		ruuo.SetPoolID(*u)
	}
	return ruuo
}

// ClearPoolID clears the value of the "pool_id" field.
func (ruuo *RootUserUpdateOne) ClearPoolID() *RootUserUpdateOne {
	ruuo.mutation.ClearPoolID()
	return ruuo
}

// SetEmail sets the "email" field.
func (ruuo *RootUserUpdateOne) SetEmail(s string) *RootUserUpdateOne {
	ruuo.mutation.SetEmail(s)
	return ruuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableEmail(s *string) *RootUserUpdateOne {
	if s != nil {
		ruuo.SetEmail(*s)
	}
	return ruuo
}

// ClearEmail clears the value of the "email" field.
func (ruuo *RootUserUpdateOne) ClearEmail() *RootUserUpdateOne {
	ruuo.mutation.ClearEmail()
	return ruuo
}

// SetAuthToken sets the "auth_token" field.
func (ruuo *RootUserUpdateOne) SetAuthToken(s string) *RootUserUpdateOne {
	ruuo.mutation.SetAuthToken(s)
	return ruuo
}

// SetNillableAuthToken sets the "auth_token" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableAuthToken(s *string) *RootUserUpdateOne {
	if s != nil {
		ruuo.SetAuthToken(*s)
	}
	return ruuo
}

// ClearAuthToken clears the value of the "auth_token" field.
func (ruuo *RootUserUpdateOne) ClearAuthToken() *RootUserUpdateOne {
	ruuo.mutation.ClearAuthToken()
	return ruuo
}

// SetAuthTokenSalt sets the "auth_token_salt" field.
func (ruuo *RootUserUpdateOne) SetAuthTokenSalt(s string) *RootUserUpdateOne {
	ruuo.mutation.SetAuthTokenSalt(s)
	return ruuo
}

// SetNillableAuthTokenSalt sets the "auth_token_salt" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableAuthTokenSalt(s *string) *RootUserUpdateOne {
	if s != nil {
		ruuo.SetAuthTokenSalt(*s)
	}
	return ruuo
}

// ClearAuthTokenSalt clears the value of the "auth_token_salt" field.
func (ruuo *RootUserUpdateOne) ClearAuthTokenSalt() *RootUserUpdateOne {
	ruuo.mutation.ClearAuthTokenSalt()
	return ruuo
}

// SetAuthed sets the "authed" field.
func (ruuo *RootUserUpdateOne) SetAuthed(b bool) *RootUserUpdateOne {
	ruuo.mutation.SetAuthed(b)
	return ruuo
}

// SetNillableAuthed sets the "authed" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableAuthed(b *bool) *RootUserUpdateOne {
	if b != nil {
		ruuo.SetAuthed(*b)
	}
	return ruuo
}

// ClearAuthed clears the value of the "authed" field.
func (ruuo *RootUserUpdateOne) ClearAuthed() *RootUserUpdateOne {
	ruuo.mutation.ClearAuthed()
	return ruuo
}

// SetRemark sets the "remark" field.
func (ruuo *RootUserUpdateOne) SetRemark(s string) *RootUserUpdateOne {
	ruuo.mutation.SetRemark(s)
	return ruuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ruuo *RootUserUpdateOne) SetNillableRemark(s *string) *RootUserUpdateOne {
	if s != nil {
		ruuo.SetRemark(*s)
	}
	return ruuo
}

// ClearRemark clears the value of the "remark" field.
func (ruuo *RootUserUpdateOne) ClearRemark() *RootUserUpdateOne {
	ruuo.mutation.ClearRemark()
	return ruuo
}

// Mutation returns the RootUserMutation object of the builder.
func (ruuo *RootUserUpdateOne) Mutation() *RootUserMutation {
	return ruuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruuo *RootUserUpdateOne) Select(field string, fields ...string) *RootUserUpdateOne {
	ruuo.fields = append([]string{field}, fields...)
	return ruuo
}

// Save executes the query and returns the updated RootUser entity.
func (ruuo *RootUserUpdateOne) Save(ctx context.Context) (*RootUser, error) {
	var (
		err  error
		node *RootUser
	)
	if err := ruuo.defaults(); err != nil {
		return nil, err
	}
	if len(ruuo.hooks) == 0 {
		node, err = ruuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RootUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruuo.mutation = mutation
			node, err = ruuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruuo.hooks) - 1; i >= 0; i-- {
			if ruuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RootUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RootUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruuo *RootUserUpdateOne) SaveX(ctx context.Context) *RootUser {
	node, err := ruuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruuo *RootUserUpdateOne) Exec(ctx context.Context) error {
	_, err := ruuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruuo *RootUserUpdateOne) ExecX(ctx context.Context) {
	if err := ruuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruuo *RootUserUpdateOne) defaults() error {
	if _, ok := ruuo.mutation.UpdatedAt(); !ok {
		if rootuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized rootuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := rootuser.UpdateDefaultUpdatedAt()
		ruuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruuo *RootUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RootUserUpdateOne {
	ruuo.modifiers = append(ruuo.modifiers, modifiers...)
	return ruuo
}

func (ruuo *RootUserUpdateOne) sqlSave(ctx context.Context) (_node *RootUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rootuser.Table,
			Columns: rootuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: rootuser.FieldID,
			},
		},
	}
	id, ok := ruuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RootUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rootuser.FieldID)
		for _, f := range fields {
			if !rootuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rootuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldCreatedAt,
		})
	}
	if value, ok := ruuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldCreatedAt,
		})
	}
	if value, ok := ruuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldUpdatedAt,
		})
	}
	if value, ok := ruuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldUpdatedAt,
		})
	}
	if value, ok := ruuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldDeletedAt,
		})
	}
	if value, ok := ruuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: rootuser.FieldDeletedAt,
		})
	}
	if value, ok := ruuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: rootuser.FieldEntID,
		})
	}
	if value, ok := ruuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldName,
		})
	}
	if ruuo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldName,
		})
	}
	if value, ok := ruuo.mutation.PoolID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: rootuser.FieldPoolID,
		})
	}
	if ruuo.mutation.PoolIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: rootuser.FieldPoolID,
		})
	}
	if value, ok := ruuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldEmail,
		})
	}
	if ruuo.mutation.EmailCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldEmail,
		})
	}
	if value, ok := ruuo.mutation.AuthToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldAuthToken,
		})
	}
	if ruuo.mutation.AuthTokenCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldAuthToken,
		})
	}
	if value, ok := ruuo.mutation.AuthTokenSalt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldAuthTokenSalt,
		})
	}
	if ruuo.mutation.AuthTokenSaltCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldAuthTokenSalt,
		})
	}
	if value, ok := ruuo.mutation.Authed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: rootuser.FieldAuthed,
		})
	}
	if ruuo.mutation.AuthedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: rootuser.FieldAuthed,
		})
	}
	if value, ok := ruuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rootuser.FieldRemark,
		})
	}
	if ruuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: rootuser.FieldRemark,
		})
	}
	_spec.Modifiers = ruuo.modifiers
	_node = &RootUser{config: ruuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rootuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
